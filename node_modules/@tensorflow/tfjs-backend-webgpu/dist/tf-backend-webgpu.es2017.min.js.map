{"version":3,"file":"tf-backend-webgpu.es2017.min.js","sources":["../../../../tfjs-backend-webgpu/src/flags_webgpu.ts","../../../../tfjs-backend-webgpu/src/adapter_info.ts","../../../../tfjs-backend-webgpu/src/buffer_manager.ts","../../../../tfjs-backend-webgpu/src/texture_manager.ts","../../../../tfjs-backend-webgpu/src/shader_util.ts","../../../../tfjs-backend-webgpu/src/webgpu_program.ts","../../../../tfjs-backend-webgpu/src/webgpu_util.ts","../../../../tfjs-backend-webgpu/src/backend_webgpu.ts","../../../../tfjs-backend-webgpu/src/binary_op_util.ts","../../../../tfjs-backend-webgpu/src/base.ts","../../../../tfjs-backend-webgpu/src/unary_op_util.ts","../../../../tfjs-backend-webgpu/src/activation_util.ts","../../../../tfjs-backend-webgpu/src/matmul_packed_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_reduce_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_small_output_size_webgpu.ts","../../../../tfjs-backend-webgpu/src/matmul_splitK_webgpu.ts","../../../../tfjs-backend-webgpu/src/fill_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Fill.ts","../../../../tfjs-backend-webgpu/src/kernels/Reshape.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchMatMul_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-webgpu/src/binary_op_complex_webgpu.ts","../../../../tfjs-backend-webgpu/src/binary_op_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Identity.ts","../../../../tfjs-backend-webgpu/src/kernels/Complex.ts","../../../../tfjs-backend-webgpu/src/unary_op_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/kernel_funcs_utils.ts","../../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../../tfjs-backend-cpu/src/kernels/BitwiseAnd.ts","../../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedGather_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedRange_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/RaggedTensorToTensor_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../../tfjs-backend-cpu/src/kernels/StaticRegexReplace.ts","../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/shared.ts","../../../../tfjs-backend-webgpu/src/kernels/Abs.ts","../../../../tfjs-backend-webgpu/src/kernels/Acos.ts","../../../../tfjs-backend-webgpu/src/kernels/Acosh.ts","../../../../tfjs-backend-webgpu/src/kernels/Add.ts","../../../../tfjs-backend-webgpu/src/addn_packed_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/AddN.ts","../../../../tfjs-backend-webgpu/src/transpose_shared_webgpu.ts","../../../../tfjs-backend-webgpu/src/transpose_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Transpose.ts","../../../../tfjs-backend-webgpu/src/reduce_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/reduce.ts","../../../../tfjs-backend-webgpu/src/kernels/All.ts","../../../../tfjs-backend-webgpu/src/kernels/Any.ts","../../../../tfjs-backend-webgpu/src/argminmax_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ArgMax.ts","../../../../tfjs-backend-webgpu/src/kernels/ArgMin.ts","../../../../tfjs-backend-webgpu/src/kernels/Asin.ts","../../../../tfjs-backend-webgpu/src/kernels/Asinh.ts","../../../../tfjs-backend-webgpu/src/kernels/Atan.ts","../../../../tfjs-backend-webgpu/src/kernels/Atan2.ts","../../../../tfjs-backend-webgpu/src/kernels/Atanh.ts","../../../../tfjs-backend-webgpu/src/pool_filtersizeone_webgpu.ts","../../../../tfjs-backend-webgpu/src/pool_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Max.ts","../../../../tfjs-backend-webgpu/src/kernels/Mean.ts","../../../../tfjs-backend-webgpu/src/kernels/Pool_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/AvgPool.ts","../../../../tfjs-backend-webgpu/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-webgpu/src/avg_pool_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-webgpu/src/slice_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Slice.ts","../../../../tfjs-backend-webgpu/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-webgpu/src/bincount_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Bincount.ts","../../../../tfjs-backend-webgpu/src/broadcast_args_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-webgpu/src/kernels/NotEqual.ts","../../../../tfjs-backend-webgpu/src/kernels/Real.ts","../../../../tfjs-backend-webgpu/src/kernels/Cast.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/int.ts","../../../../tfjs-backend-webgpu/src/kernels/Ceil.ts","../../../../tfjs-backend-webgpu/src/clip_vec4_webgpu.ts","../../../../tfjs-backend-webgpu/src/clip_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ClipByValue.ts","../../../../tfjs-backend-webgpu/src/complex_abs_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-webgpu/src/concat_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Imag.ts","../../../../tfjs-backend-webgpu/src/kernels/Concat_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Concat.ts","../../../../tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts","../../../../tfjs-backend-webgpu/src/conv2d_naive_webgpu.ts","../../../../tfjs-backend-webgpu/src/im2col_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2D_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2D.ts","../../../../tfjs-backend-webgpu/src/conv_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-webgpu/src/conv_backprop_mm_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-webgpu/src/conv3d_naive_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv3D.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Cos.ts","../../../../tfjs-backend-webgpu/src/kernels/Cosh.ts","../../../../tfjs-backend-webgpu/src/crop_and_resize_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/CropAndResize.ts","../../../../tfjs-backend-webgpu/src/cum_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Cum_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/Cumprod.ts","../../../../tfjs-backend-webgpu/src/kernels/Cumsum.ts","../../../../tfjs-backend-webgpu/src/kernels/DenseBincount.ts","../../../../tfjs-backend-webgpu/src/depth_to_space_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_nchw_shared_webgpu.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_vec4_webgpu.ts","../../../../tfjs-backend-webgpu/src/depthwise_conv2d_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-webgpu/src/conv_backprop_depthwise_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-webgpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-webgpu/src/diag_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Diag.ts","../../../../tfjs-backend-webgpu/src/dilation_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Dilation2D.ts","../../../../tfjs-backend-webgpu/src/dilation_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Dilation2DBackpropFilter.ts","../../../../tfjs-backend-webgpu/src/kernels/Dilation2DBackpropInput.ts","../../../../tfjs-backend-webgpu/src/draw_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Draw.ts","../../../../tfjs-backend-webgpu/src/kernels/Multiply.ts","../../../../tfjs-backend-webgpu/src/kernels/Sum.ts","../../../../tfjs-backend-webgpu/src/kernels/Einsum.ts","../../../../tfjs-backend-webgpu/src/kernels/Elu.ts","../../../../tfjs-backend-webgpu/src/kernels/EluGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/Equal.ts","../../../../tfjs-backend-webgpu/src/kernels/Erf.ts","../../../../tfjs-backend-webgpu/src/kernels/Exp.ts","../../../../tfjs-backend-webgpu/src/kernels/ExpandDims.ts","../../../../tfjs-backend-webgpu/src/kernels/Expm1.ts","../../../../tfjs-backend-webgpu/src/fft_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FFT_impl.ts","../../../../tfjs-backend-webgpu/src/kernels/FFT.ts","../../../../tfjs-backend-webgpu/src/flip_left_right_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-webgpu/src/kernels/Floor.ts","../../../../tfjs-backend-webgpu/src/kernels/FloorDiv.ts","../../../../tfjs-backend-webgpu/src/from_pixels_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FromPixels.ts","../../../../tfjs-backend-webgpu/src/batchnorm_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedBatchNorm.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-webgpu/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-webgpu/src/gather_nd_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/GatherNd.ts","../../../../tfjs-backend-webgpu/src/gather_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/GatherV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Greater.ts","../../../../tfjs-backend-webgpu/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-webgpu/src/kernels/IFFT.ts","../../../../tfjs-backend-webgpu/src/kernels/IsFinite.ts","../../../../tfjs-backend-webgpu/src/kernels/IsInf.ts","../../../../tfjs-backend-webgpu/src/kernels/IsNaN.ts","../../../../tfjs-backend-webgpu/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-webgpu/src/kernels/Less.ts","../../../../tfjs-backend-webgpu/src/kernels/LessEqual.ts","../../../../tfjs-backend-webgpu/src/lin_space_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/LinSpace.ts","../../../../tfjs-backend-webgpu/src/kernels/Log.ts","../../../../tfjs-backend-webgpu/src/kernels/Log1p.ts","../../../../tfjs-backend-webgpu/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-webgpu/src/kernels/LogicalNot.ts","../../../../tfjs-backend-webgpu/src/kernels/LogicalOr.ts","../../../../tfjs-backend-webgpu/src/lrn_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/LRN.ts","../../../../tfjs-backend-webgpu/src/lrn_grad_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/LRNGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/Maximum.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPool.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-webgpu/src/max_pool_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-webgpu/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-webgpu/src/kernels/Min.ts","../../../../tfjs-backend-webgpu/src/kernels/Minimum.ts","../../../../tfjs-backend-webgpu/src/mirror_pad_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/MirrorPad.ts","../../../../tfjs-backend-webgpu/src/kernels/Mod.ts","../../../../tfjs-backend-webgpu/src/multinomial_webgpu.ts","../../../../tfjs-backend-webgpu/src/softmax_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Softmax.ts","../../../../tfjs-backend-webgpu/src/kernels/Multinomial.ts","../../../../tfjs-backend-webgpu/src/kernels/Neg.ts","../../../../tfjs-backend-webgpu/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-webgpu/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-webgpu/src/onehot_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/OneHot.ts","../../../../tfjs-backend-webgpu/src/kernels/ZerosLike.ts","../../../../tfjs-backend-webgpu/src/kernels/OnesLike.ts","../../../../tfjs-backend-webgpu/src/kernels/Pack.ts","../../../../tfjs-backend-webgpu/src/pad_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/PadV2.ts","../../../../tfjs-backend-webgpu/src/kernels/Pow.ts","../../../../tfjs-backend-webgpu/src/kernels/Prelu.ts","../../../../tfjs-backend-webgpu/src/kernels/Prod.ts","../../../../tfjs-backend-webgpu/src/kernels/Range.ts","../../../../tfjs-backend-webgpu/src/kernels/RealDiv.ts","../../../../tfjs-backend-webgpu/src/kernels/Reciprocal.ts","../../../../tfjs-backend-webgpu/src/kernels/Relu.ts","../../../../tfjs-backend-webgpu/src/kernels/Relu6.ts","../../../../tfjs-backend-webgpu/src/resize_bilinear_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-webgpu/src/resize_bilinear_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-webgpu/src/resize_nearest_neighbor_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-webgpu/src/resize_nearest_neighbor_backprop_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-webgpu/src/reverse_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Reverse.ts","../../../../tfjs-backend-webgpu/src/rotate_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-webgpu/src/kernels/Round.ts","../../../../tfjs-backend-webgpu/src/kernels/Rsqrt.ts","../../../../tfjs-backend-webgpu/src/scatter_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/ScatterNd.ts","../../../../tfjs-backend-webgpu/src/search_sorted_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/SearchSorted.ts","../../../../tfjs-backend-webgpu/src/select_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Select.ts","../../../../tfjs-backend-webgpu/src/kernels/Selu.ts","../../../../tfjs-backend-webgpu/src/kernels/Sigmoid.ts","../../../../tfjs-backend-webgpu/src/kernels/Sign.ts","../../../../tfjs-backend-webgpu/src/kernels/Sin.ts","../../../../tfjs-backend-webgpu/src/kernels/Sinh.ts","../../../../tfjs-backend-webgpu/src/kernels/Softplus.ts","../../../../tfjs-backend-webgpu/src/space_to_batchND_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-webgpu/src/sparse_segment_reduce_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernel_utils/sparse_segment_reduce.ts","../../../../tfjs-backend-webgpu/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-webgpu/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-webgpu/src/tile_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Tile.ts","../../../../tfjs-backend-webgpu/src/kernels/SparseToDense.ts","../../../../tfjs-backend-webgpu/src/kernels/SplitV.ts","../../../../tfjs-backend-webgpu/src/kernels/Sqrt.ts","../../../../tfjs-backend-webgpu/src/kernels/Square.ts","../../../../tfjs-backend-webgpu/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-webgpu/src/kernels/Step.ts","../../../../tfjs-backend-webgpu/src/strided_slice_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/StridedSlice.ts","../../../../tfjs-backend-webgpu/src/kernels/StringNGrams.ts","../../../../tfjs-backend-webgpu/src/kernels/Sub.ts","../../../../tfjs-backend-webgpu/src/kernels/Tan.ts","../../../../tfjs-backend-webgpu/src/kernels/Tanh.ts","../../../../tfjs-backend-webgpu/src/kernels/TensorScatterUpdate.ts","../../../../tfjs-backend-webgpu/src/top_k_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/TopK.ts","../../../../tfjs-backend-webgpu/src/transform_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/Transform.ts","../../../../tfjs-backend-webgpu/src/kernels/Unpack.ts","../../../../tfjs-backend-webgpu/src/unsorted_segment_sum_webgpu.ts","../../../../tfjs-backend-webgpu/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-webgpu/src/register_all_kernels.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nconst ENV = env();\n\n/** The batched dispatching calls size in the device queue. */\nENV.registerFlag('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE', () => 15);\n\n/**\n * Whether we forward execution to the CPU backend if tensors are small and\n * reside on the CPU.\n */\nENV.registerFlag('WEBGPU_CPU_FORWARD', () => true);\n\n/**\n * This flag is used to test different types of matmul programs.\n *\n * See MatMulProgramType in webgpu_util.ts for a list of available values.\n */\nENV.registerFlag('WEBGPU_MATMUL_PROGRAM_TYPE', () => -1);\n\n/**\n * Whether to use conv2dTranspose_naive which directly implement the\n * conv2dTranspose logic rather than using a matmul to simulate.\n */\nENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE', () => true);\n\n/**\n * Whether we use low power GPU. Otherwise, a high performance GPU will be\n * requested.\n */\nENV.registerFlag('WEBGPU_USE_LOW_POWER_GPU', () => false);\n\n/**\n * Threshold for input tensor size that determines whether WebGPU backend will\n * delegate computation to CPU.\n *\n * Default value is 1000.\n */\nENV.registerFlag('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD', () => 1000);\n\n/**\n * Whether to use a dummy canvas to make profiling tools like PIX work with\n * TFJS webgpu backend.\n */\nENV.registerFlag('WEBGPU_USE_PROFILE_TOOL', () => false);\n\n/**\n * Whether to use import API.\n */\nENV.registerFlag('WEBGPU_IMPORT_EXTERNAL_TEXTURE', () => true);\n\n/**\n * Whether to use conv2dNaive for debugging.\n */\nENV.registerFlag('WEBGPU_USE_NAIVE_CONV2D_DEBUG', () => false);\n\n/**\n * Threshold to increase dispatched workgroups for matmul. If too few workgroups\n * are dispatched, it means the hardware may be in low occupancy.\n * -1 means it's not set by the user. A default strategy will be applied.\n */\nENV.registerFlag(\n    'WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL', () => -1);\n\n/**\n * Whether we will run im2col as a separate shader for convolution.\n */\nENV.registerFlag('WEBGPU_CONV_SEPARATE_IM2COL_SHADER', () => false);\n\n/**\n * A string used to match shader key. If any matches, print the related shader.\n * Seperated by comma. 'all' to print all. 'binary' to print binary(add, mul,\n * etc.). 'unary,conv2d' to print both unary and conv2d.\n */\nENV.registerFlag('WEBGPU_PRINT_SHADER', () => '');\n\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('WEBGPU_ENGINE_COMPILE_ONLY', () => false);\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class AdapterInfo {\n  private vendor: string;\n  private architecture: string;\n  public intelGPUGeneration: number;\n\n  constructor(adapterInfo: GPUAdapterInfo) {\n    if (adapterInfo) {\n      this.vendor = adapterInfo.vendor;\n      this.architecture = adapterInfo.architecture;\n      this.intelGPUGeneration = this.getIntelGPUGeneration();\n    }\n  }\n\n  private getIntelGPUGeneration() {\n    if (this.isIntel()) {\n      if (this.architecture.startsWith('gen')) {\n        return Number(this.architecture.match(/\\d+/));\n      } else if (this.architecture.startsWith('xe')) {\n        return 12;\n      }\n    }\n    return 0;\n  }\n\n  isIntel(): boolean {\n    return this.vendor === 'intel';\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class BufferManager {\n  private numUsedBuffers = 0;\n  private numFreeBuffers = 0;\n  private freeBuffers: Map<string, GPUBuffer[]> = new Map();\n  private usedBuffers: Map<string, GPUBuffer[]> = new Map();\n\n  public numBytesUsed = 0;\n  public numBytesAllocated = 0;\n\n  constructor(private device: GPUDevice) {}\n\n  acquireBuffer(\n      size: number, usage: GPUBufferUsageFlags, mappedAtCreation = false,\n      reuse = true) {\n    let buffer;\n    const key = getBufferKey(size, usage);\n\n    if (reuse) {\n      if (!this.freeBuffers.has(key)) {\n        this.freeBuffers.set(key, []);\n      }\n\n      if (this.freeBuffers.get(key).length > 0) {\n        buffer = this.freeBuffers.get(key).pop();\n        this.numFreeBuffers--;\n      } else {\n        buffer = this.device.createBuffer({size, usage, mappedAtCreation});\n        this.numBytesAllocated += size;\n      }\n    } else {\n      buffer = this.device.createBuffer({size, usage, mappedAtCreation});\n      this.numBytesAllocated += size;\n    }\n\n    if (!this.usedBuffers.has(key)) {\n      this.usedBuffers.set(key, []);\n    }\n    this.usedBuffers.get(key).push(buffer);\n    this.numUsedBuffers++;\n    this.numBytesUsed += size;\n\n    return buffer;\n  }\n\n  releaseBuffer(buffer: GPUBuffer, reuse = true) {\n    if (this.freeBuffers.size === 0) {\n      return;\n    }\n\n    const size = buffer.size;\n    const usage = buffer.usage;\n\n    const key = getBufferKey(size, usage);\n    const bufferArray = this.usedBuffers.get(key);\n    const index = bufferArray.indexOf(buffer);\n    if (index < 0) {\n      throw new Error('Cannot find the buffer in buffer manager');\n    }\n    bufferArray[index] = bufferArray[bufferArray.length - 1];\n    bufferArray.pop();\n    this.numUsedBuffers--;\n    this.numBytesUsed -= size;\n\n    if (reuse) {\n      this.freeBuffers.get(key).push(buffer);\n      this.numFreeBuffers++;\n    } else {\n      buffer.destroy();\n      this.numBytesAllocated -= size;\n    }\n  }\n\n  getNumUsedBuffers(): number {\n    return this.numUsedBuffers;\n  }\n\n  getNumFreeBuffers(): number {\n    return this.numFreeBuffers;\n  }\n\n  dispose() {\n    this.freeBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.usedBuffers.forEach((buffers, key) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.freeBuffers = new Map();\n    this.usedBuffers = new Map();\n    this.numUsedBuffers = 0;\n    this.numFreeBuffers = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\n\nfunction getBufferKey(size: number, usage: GPUBufferUsageFlags) {\n  return `${size}_${usage}`;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private freeTextures: Map<string, GPUTexture[]> = new Map();\n  private usedTextures: Map<string, GPUTexture[]> = new Map();\n\n  public numBytesUsed = 0;\n  public numBytesAllocated = 0;\n\n  constructor(private device: GPUDevice) {}\n\n  acquireTexture(\n      width: number, height: number, format: GPUTextureFormat,\n      usage: GPUTextureUsageFlags) {\n    const bytesPerElement = getBytesPerElement(format);\n    const byteSize = width * height * bytesPerElement;\n    const key = getTextureKey(width, height, format, usage);\n    if (!this.freeTextures.has(key)) {\n      this.freeTextures.set(key, []);\n    }\n\n    if (!this.usedTextures.has(key)) {\n      this.usedTextures.set(key, []);\n    }\n\n    this.numBytesUsed += byteSize;\n    this.numUsedTextures++;\n\n    if (this.freeTextures.get(key).length > 0) {\n      this.numFreeTextures--;\n\n      const newTexture = this.freeTextures.get(key).shift();\n      this.usedTextures.get(key).push(newTexture);\n      return newTexture;\n    }\n\n    this.numBytesAllocated += byteSize;\n\n    const newTexture = this.device.createTexture({\n      size: [width, height],\n      format,\n      usage,\n    });\n    this.usedTextures.get(key).push(newTexture);\n\n    return newTexture;\n  }\n\n  releaseTexture(texture: GPUTexture) {\n    if (this.freeTextures.size === 0) {\n      return;\n    }\n\n    const width = texture.width;\n    const height = texture.height;\n    const format = texture.format;\n    const usage = texture.usage;\n\n    const key = getTextureKey(width, height, format, usage);\n    if (!this.freeTextures.has(key)) {\n      this.freeTextures.set(key, []);\n    }\n\n    this.freeTextures.get(key).push(texture);\n    this.numFreeTextures++;\n    this.numUsedTextures--;\n\n    const textureList = this.usedTextures.get(key);\n    const textureIndex = textureList.indexOf(texture);\n    if (textureIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    textureList.splice(textureIndex, 1);\n    const bytesPerElement = getBytesPerElement(format);\n    const byteSize = width * height * bytesPerElement;\n    this.numBytesUsed -= byteSize;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    this.freeTextures.forEach((textures, key) => {\n      textures.forEach(texture => {\n        texture.destroy();\n      });\n    });\n\n    this.usedTextures.forEach((textures, key) => {\n      textures.forEach(texture => {\n        texture.destroy();\n      });\n    });\n\n    this.freeTextures = new Map();\n    this.usedTextures = new Map();\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this.numBytesUsed = 0;\n    this.numBytesAllocated = 0;\n  }\n}\n\nfunction getTextureKey(\n    width: number, height: number, format: GPUTextureFormat,\n    usage: GPUTextureUsageFlags) {\n  return `${width}_${height}_${format}_${usage}`;\n}\n\nfunction getBytesPerElement(format: GPUTextureFormat) {\n  if (format === 'rgba8unorm') {\n    return 16;\n  } else {\n    throw new Error(`${format} is not supported!`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Generates WGSL that computes strides.\nexport function symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  if (Math.max(...indicesArr) > 5) {\n    throw new Error('Cannot symbolically compute strides for rank > 6 tensor.');\n  }\n\n  const numCoords = indicesArr.length;\n  const indicesStr = 'xyzwuv';\n  const shape = indicesArr.map(d => `${variableName}.${indicesStr[d]}`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport const atomicAddSnippet =\n    (ptr: string, v: string, type: 'int32'|'float32') => {\n      if (type === 'int32') {\n        return `atomicAdd(${ptr}, bitcast<i32>(${v}));`;\n      } else {\n        // atomicAdd only supports uint/int type. For float, we use\n        // atomicCompareExchangeWeak to simulate.\n        return `\n          {\n            var oldValue = 0;\n            loop {\n              let newValueF32 = bitcast<f32>(oldValue) + (${v});\n              let newValue = bitcast<i32>(newValueF32);\n              let res = atomicCompareExchangeWeak(${ptr}, oldValue, newValue);\n              if res.exchanged {\n                break;\n              }\n              oldValue = res.old_value;\n            }\n          }`;\n      }\n    };\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataTypeMap, env, Rank, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {symbolicallyComputeStrides} from './shader_util';\n\nexport enum PixelsOpType {\n  FROM_PIXELS,\n  DRAW\n}\n\nexport interface WebGPUProgram {\n  // Whether to use atomic built-in functions.\n  atomic?: boolean;\n  // dispatch specifies geometry of thread groups - derived from dispatchLayout.\n  dispatch: [number, number, number];\n  // dispatchLayout enumerates how tensor dimensions are distributed among\n  // dispatch x,y,z dimensions.\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  // By default, the output data component is 1.\n  outputComponent?: number;\n  outputShape: number[];\n  pixelsOpType?: PixelsOpType;\n  // The unique key to distinguish different shader source code.\n  shaderKey: string;\n  // Whether to use output size for bounds checking.\n  size?: boolean;\n  uniforms?: string;\n  variableNames: string[];\n  // Describe each variable's component and must have one-one mapping with\n  // variableNames. If not set, all variables component will be same with output\n  // component member.\n  variableComponents?: number[];\n  // workgroupSize.x * workgroupSize.y * workgroupSize.z = the number of threads\n  // in a thread group. Individual dimensions determines thread layout within\n  // the group.\n  workgroupSize: [number, number, number];\n  // Size of register cache in one dimension (assumes square cache).\n  // Each thread writes to workPerThread * workPerThread locations in the output\n  // buffer.\n  workPerThread?: number;\n  pipeline?: GPUComputePipeline|Promise<GPUComputePipeline>;\n  getUserCode: () => string;\n}\n\nexport const compileProgram =\n    (device: GPUDevice, program: WebGPUProgram, inputsData: InputInfo[],\n     output: TensorInfo, parallelCompilation: boolean): GPUComputePipeline|\n    Promise<GPUComputePipeline> => {\n      const outputData = {dtype: output.dtype, shape: output.shape};\n      const source = makeShader(inputsData, outputData, program);\n      const module = device.createShaderModule(\n          {code: source, label: program.constructor.name});\n\n      let printShaderString = env().get('WEBGPU_PRINT_SHADER') as string;\n      if (printShaderString !== '') {\n        printShaderString = printShaderString.toLowerCase();\n        const printShaderArray = printShaderString.split(',');\n        if (printShaderString === 'all' ||\n            printShaderArray.some(\n                item => program.shaderKey.toLowerCase().includes(item))) {\n          console.group(program.shaderKey);\n          console.debug(source);\n          console.groupEnd();\n        }\n      }\n\n      if (parallelCompilation) {\n        return device.createComputePipelineAsync({\n          compute: {module, entryPoint: '_start'},\n          label: program.constructor.name,\n          layout: 'auto'\n        });\n      } else {\n        return device.createComputePipeline({\n          compute: {module, entryPoint: '_start'},\n          label: program.constructor.name,\n          layout: 'auto'\n        });\n      }\n    };\n\nexport const typeSnippet = (component: number, type = 'f32') => {\n  switch (component) {\n    case 1:\n      return `${type}`;\n    case 2:\n      return `vec2<${type}>`;\n    case 3:\n      return `vec3<${type}>`;\n    case 4:\n      return `vec4<${type}>`;\n    default:\n      throw new Error(`${component}-component ${type} is not supported.`);\n  }\n};\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'i32';\n  } else if (rank === 2) {\n    return `vec2<i32>`;\n  } else if (rank === 3) {\n    return `vec3<i32>`;\n  } else if (rank === 4) {\n    return `vec4<i32>`;\n  } else if (rank === 5) {\n    return `vec5`;\n  } else if (rank === 6) {\n    return `vec6`;\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getCoordsXYZ(index: number): string {\n  if (index === 0) {\n    return 'x';\n  } else if (index === 1) {\n    return 'y';\n  } else if (index === 2) {\n    return 'z';\n  } else if (index === 3) {\n    return 'w';\n  } else if (index === 4) {\n    return 'u';\n  } else if (index === 5) {\n    return 'v';\n  } else {\n    throw Error(`Index ${index} is not yet supported`);\n  }\n}\n\nexport function getMainHeaderString(): string;\nexport function getMainHeaderString(index: string): string;\nexport function getMainHeaderString(...params: string[]): string {\n  let snippet: string;\n  switch (params.length) {\n    case 0:\n      snippet = `\n        fn main()\n      `;\n      break;\n    case 1:\n      snippet = `\n        fn main(${params[0]} : i32)\n      `;\n      break;\n    default:\n      throw Error('Unreachable');\n  }\n  return snippet;\n}\n\nexport function getStartHeaderString(\n    useGlobalIndex: boolean, program: WebGPUProgram): string {\n  let snippet: string;\n  snippet = `\n     ${getWorkgroupSizeString(program)}\n      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,\n                @builtin(global_invocation_id) GlobalId : vec3<u32>,\n                @builtin(local_invocation_index) LocalIndex: u32,\n                @builtin(workgroup_id) WorkgroupId : vec3<u32>,\n                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {\n        localId = LocalId;\n        localIndex = LocalIndex;\n        globalId = GlobalId;\n        numWorkgroups = NumWorkgroups;\n        workgroupId = WorkgroupId;\n        ${useGlobalIndex ? `main(getGlobalIndex());` : `main();`};\n      }\n    `;\n  return snippet;\n}\n\nexport function getWorkgroupSizeString(program: WebGPUProgram): string {\n  return `\n  @compute @workgroup_size(${program.workgroupSize[0]}, ${\n      program.workgroupSize[1]}, ${program.workgroupSize[2]})\n`;\n}\n\nfunction makeShader(\n    inputInfo: InputInfo[], outputData: {dtype: DataType, shape: number[]},\n    program: WebGPUProgram): string {\n  const prefixSnippets: string[] = [];\n  const flatWorkgroupSize = program.workgroupSize[0] *\n      program.workgroupSize[1] * program.workgroupSize[2];\n  program.outputComponent =\n      program.outputComponent ? program.outputComponent : 1;\n  prefixSnippets.push(`\n\n      var<private> localId: vec3<u32>;\n      var<private> localIndex: u32;\n      var<private> globalId: vec3<u32>;\n      var<private> numWorkgroups: vec3<u32>;\n      var<private> workgroupId: vec3<u32>;\n\n      // Only used when the y/z dimension of workgroup size is 1.\n      fn getGlobalIndex() -> i32 {\n        ${\n      isFlatDispatch(program) ?\n          `  return i32(globalId.x);` :\n          `  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +\n                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${\n              flatWorkgroupSize}u +\n                localIndex);\n        `}\n      }\n    `);\n\n  if (program.pixelsOpType != null) {\n    const inoutSnippet = program.pixelsOpType === PixelsOpType.FROM_PIXELS ?\n        `@group(0) @binding(0) var<storage, read_write> result: array<${\n            dataTypeToGPUType(outputData.dtype, program.outputComponent)}>;` :\n        `@group(0) @binding(1) var<storage, read> inBuf : array<${\n            dataTypeToGPUType(inputInfo[0].dtype, program.outputComponent)}>;`;\n    const outShapeStridesType =\n        outputData.shape.length === 3 ? 'vec2<i32>' : 'i32';\n    prefixSnippets.push(`\n        struct Uniform {\n          outShapeStrides : ${outShapeStridesType},\n          size            : i32,\n          numChannels     : i32,\n          alpha           : f32,\n        };\n\n        ${inoutSnippet}\n        @group(0) @binding(2) var<uniform> uniforms: Uniform;\n      `);\n    const useGlobalIndex = isFlatDispatchLayout(program);\n    return [\n      commonSnippet,\n      prefixSnippets.join('\\n'),\n      getCoordsFromIndexSnippet(outputData.shape),\n      program.getUserCode(),\n      getStartHeaderString(useGlobalIndex, program),\n    ].join('\\n');\n  }\n\n  let stridesLength: number;\n  let stridesDataType: string;\n  let uniformDeclaration = 'struct Uniforms { NAN : f32, INFINITY : f32, ';\n  program.variableNames.forEach((x, i) => {\n    const perDataType = getCoordsDataType(inputInfo[i].shape.length);\n    uniformDeclaration +=\n        `${x.charAt(0).toLowerCase() + x.slice(1)}Shape : ${perDataType}, `;\n    stridesLength = inputInfo[i].shape.length - 1;\n    stridesDataType = getCoordsDataType(stridesLength);\n    uniformDeclaration +=\n        `${x.charAt(0).toLowerCase() + x.slice(1)}ShapeStrides: ${\n            stridesDataType}, `;\n  });\n  const outputDataType = getCoordsDataType(outputData.shape.length);\n  uniformDeclaration += `outShape : ${outputDataType}, `;\n  stridesLength = outputData.shape.length - 1;\n  stridesDataType = getCoordsDataType(stridesLength);\n  uniformDeclaration += `\n         outShapeStrides: ${stridesDataType}, `;\n\n  if (program.size) {\n    uniformDeclaration += 'size : i32, ';\n  }\n\n  if (program.uniforms) {\n    uniformDeclaration += program.uniforms;\n  }\n  uniformDeclaration += '};';\n  uniformDeclaration = insertAlignment(uniformDeclaration);\n\n  prefixSnippets.push(uniformDeclaration);\n\n  // Output buffer.\n  if (program.atomic) {\n    prefixSnippets.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;\n    `);\n  } else {\n    prefixSnippets.push(`\n      @group(0) @binding(0) var<storage, read_write> result: array<${\n        dataTypeToGPUType(outputData.dtype, program.outputComponent)}>;\n    `);\n  }\n  program.variableNames.forEach((x, i) => {\n    prefixSnippets.push(`\n      @group(0) @binding(${1 + i}) var<storage, read> ${x}: array<${\n        program.variableComponents ?\n            dataTypeToGPUType(\n                inputInfo[i].dtype, program.variableComponents[i]) :\n            dataTypeToGPUType(inputInfo[i].dtype, program.outputComponent)}>;\n        `);\n  });\n\n  if (uniformDeclaration !== '') {\n    prefixSnippets.push(`\n      @group(0) @binding(${\n        1 + program.variableNames.length}) var<uniform> uniforms: Uniforms;\n      `);\n  }\n\n  const coordsSnippet =\n      getOutputCoordsSnippet(outputData.shape, program.dispatchLayout);\n\n  const sources = [\n    commonSnippet, prefixSnippets.join('\\n') + isInfSnippet,\n    getCoordsFromIndexSnippet(outputData.shape), coordsSnippet,\n    getOutputIndexFromCoordsSnippet(outputData.shape.length)\n  ];\n  if (!program.atomic) {\n    sources.push(setOutputSnippet(\n        outputData.shape, outputData.dtype, program.outputComponent));\n  }\n\n  program.variableNames.forEach((x, i) => {\n    sources.push(`${getCoordsFromIndexSnippet(inputInfo[i].shape, x)}`);\n  });\n\n  const inputSnippet =\n      inputInfo\n          .map(\n              (x, i) => getInputSnippet(\n                  x, outputData.shape,\n                  program.variableComponents ? program.variableComponents[i] :\n                                               program.outputComponent,\n                  program.dispatchLayout.x.length === outputData.shape.length))\n          .join('\\n');\n  sources.push(inputSnippet);\n  sources.push(program.getUserCode());\n  const useGlobalIndex = isFlatDispatchLayout(program);\n  sources.push(getStartHeaderString(useGlobalIndex, program));\n  const source = sources.join('\\n');\n  return source;\n}\n\nexport function makeShaderKey<R extends Rank>(\n    program: WebGPUProgram, inputsData: InputInfo[],\n    output: TensorInfo): string {\n  let key = program.shaderKey;\n  if (program.pixelsOpType != null) {\n    return key;\n  }\n\n  const shapes: number[][] = [];\n  const types: Array<keyof DataTypeMap> = [];\n  inputsData.forEach(element => {\n    shapes.push(element.shape);\n    types.push(element.dtype);\n  });\n  shapes.push(output.shape);\n  types.push(output.dtype);\n\n  const broadcastDims =\n      inputsData.map(d => backend_util.getBroadcastDims(d.shape, output.shape));\n  const inputShapesEqualsOutShape =\n      inputsData.map(d => util.arraysEqual(d.shape, output.shape)).join('_');\n  const broadcastDimsKey = broadcastDims.map(d => d.join('_')).join(';');\n\n  const flatDispatchString = isFlatDispatch(program) ? 'flatDispatch' : '';\n\n  key += '_' + (program.workgroupSize ? program.workgroupSize.join(',') : '') +\n      shapes.map(shape => shape.length).join(',') + types.join(',') +\n      program.variableNames.join(',') + broadcastDimsKey +\n      inputShapesEqualsOutShape + flatDispatchString;\n\n  return key;\n}\n\nconst commonSnippet = `\n  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};\n  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};\n\n  // Checks whether coordinates lie within the bounds of the shape.\n  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {\n    return all(coord >= vec2<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {\n    return all(coord >= vec3<i32>(0)) && all(coord < shape);\n  }\n  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {\n    return all(coord >= vec4<i32>(0)) && all(coord < shape);\n  }\n\n  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {\n    return coord;\n  }\n  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {\n    return dot(coords, vec2<i32>(shape.y, 1));\n  }\n  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {\n    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));\n  }\n  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n    return dot(coords, vec4<i32>(\n        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n  }\n  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {\n    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;\n  }\n  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {\n    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);\n    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;\n  }\n\n  // NaN defination in IEEE 754-1985 is :\n  //   - sign = either 0 or 1.\n  //   - biased exponent = all 1 bits.\n  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).\n  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n  fn isnan(val: f32) -> bool {\n    let floatToUint: u32 = bitcast<u32>(val);\n    return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n  }\n  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {\n    let floatToUint: vec4<u32> = bitcast<vec4<u32>>(val);\n    return (floatToUint & vec4<u32>(0x7fffffffu)) > vec4<u32>(0x7f800000u);\n  }\n`;\n\nconst isInfSnippet = `\n  fn isinf(val: f32) -> bool {\n    return abs(val) == uniforms.INFINITY;\n  }\n`;\n\ntype InputInfo = {\n  dtype: DataType; shape: number[]; name: string;\n};\n\n/**\n * Derives logical coordinates from a flat index. Performs integer division\n * with each stride and decrements the index until the index equals the final\n * dimension coordinate.\n */\nexport function getCoordsFromIndexSnippet(shape: number[], name = ''): string {\n  const rank = shape.length;\n  const funcName = name !== '' ?\n      `get${name.charAt(0).toUpperCase() + name.slice(1)}CoordsFromIndex` :\n      'getCoordsFromIndex';\n  const stridesName = name !== '' ?\n      `${name.charAt(0).toLowerCase() + name.slice(1)}ShapeStrides` :\n      `outShapeStrides`;\n\n  if (rank <= 1) {\n    return `fn ${funcName}(index : i32) -> i32 { return index; }`;\n  }\n\n  const strides = util.computeStrides(shape);\n  const dtype = getCoordsDataType(rank);\n\n  const coords: string[] = [];\n  for (let i = 0; i < rank; i++) {\n    coords.push(`d${i}`);\n  }\n\n  if (strides.length === 1) {\n    return `    fn ${funcName}(index : i32) -> vec2<i32> {\n      let d0 = index / uniforms.${\n        stridesName}; let d1 = index - d0 * uniforms.${stridesName};\n      return vec2<i32>(d0, d1);\n    }`;\n  }\n  let snippet;\n  snippet = 'var index2 = index;' +\n      strides\n          .map((_, i) => {\n            const line1 = `let ${coords[i]} = index2 / uniforms.${\n                stridesName}.${getCoordsXYZ(i)}`;\n            const line2 = i === strides.length - 1 ?\n                `let ${coords[i + 1]} = index2 - ${coords[i]} * uniforms.${\n                    stridesName}.${getCoordsXYZ(i)}` :\n                `index2 = index2 - ${coords[i]} * uniforms.${stridesName}.${\n                    getCoordsXYZ(i)}`;\n            return `${line1}; ${line2};`;\n          })\n          .join('');\n\n  return `\n    fn ${funcName}(index : i32) -> ${dtype} {\n      ${snippet}\n      return ${dtype}(${coords.join(',')});\n    }\n  `;\n}\n\nfunction getInputAtCoordsSnippet(\n    inputInfo: InputInfo, component: number): string {\n  const texName = inputInfo.name;\n  const rank = inputInfo.shape.length;\n  const type = getCoordsDataType(rank);\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const dims = ['d0', 'd1', 'd2', 'd3', 'd4', 'd5'].slice(0, rank);\n  const inputs = dims.map(d => `${d} : i32`).join(', ');\n\n  if (rank < 1) {\n    return `\n      fn ${funcName}() -> ${typeSnippet(component)} {\n        return ${typeSnippet(component)}(${texName}[0]);\n      }\n    `;\n  }\n\n  const shapeStr =\n      `uniforms.${texName.charAt(0).toLowerCase() + texName.slice(1)}Shape`;\n  let rankStr = `${rank}D`;\n  if (rank === 0) {\n    rankStr = '1D';\n  }\n\n  return `\n    fn ${funcName}(${inputs}) -> ${typeSnippet(component)} {\n      return ${typeSnippet(component)}(${texName}[getIndexFromCoords${\n      rankStr}(${type}(${dims.join(',')}),\n        ${shapeStr})${component === 1 ? '' : ` / ${component}`}]);\n    }\n   `;\n}\n\nfunction getInputByOutputSnippet(\n    inputInfo: InputInfo, outShape: number[], component: number,\n    isFlatDispatchLayout: boolean): string {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const funcName = 'get' + texFuncSnippet + 'ByOutput';\n\n  const inRank = inputInfo.shape.length;\n  const outRank = outShape.length;\n  const type = getCoordsDataType(outRank);\n\n  // If the inShape equals the outShape and the dispatch layout is flat, we can\n  // directly use |gl_GlobalInvocationID.x| as the index and don't need coords\n  // conversion between these two shapes.\n  if (util.arraysEqual(inputInfo.shape, outShape) && isFlatDispatchLayout) {\n    return `\n    fn ${funcName}Index(globalIndex : i32) -> ${typeSnippet(component)} {\n      return ${typeSnippet(component)}(${texName}[globalIndex]);\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> ${typeSnippet(component)} {\n      return ${typeSnippet(component)}(${texName}[${\n        outRank > 1 ? 'getOutputIndexFromCoords(coords)' :\n                      'coords'}${component === 1 ? '' : ` / ${component}`}]);\n    }\n    `;\n  }\n\n  const broadcastDims =\n      backend_util.getBroadcastDims(inputInfo.shape, outShape);\n  const rankDiff = outRank - inRank;\n\n  let coordsSnippet = '';\n\n  if (inRank === 0) {\n    return `\n    fn ${funcName}Index(globalIndex : i32) -> ${typeSnippet(component)}{\n      return get${texFuncSnippet}();\n    }\n\n    fn ${funcName}Coords(coords : ${type}) -> ${typeSnippet(component)}{\n      return get${texFuncSnippet}();\n    }\n  `;\n  } else {\n    if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet =\n          broadcastDims.map(d => `coords.${getCoordsXYZ(d + rankDiff)} = 0;`)\n              .join('\\n');\n    }\n  }\n\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    if (outRank > 1) {\n      const coordsType = getCoordsDataType(inRank);\n      const coordsValues =\n          inputInfo.shape.map((s, i) => `coords.${getCoordsXYZ(i + rankDiff)}`)\n              .join(', ');\n      unpackedCoordsSnippet = `${coordsType}(${coordsValues})`;\n    } else {\n      unpackedCoordsSnippet = 'coords';\n    }\n  }\n\n  const shapeStr =\n      `uniforms.${texName.charAt(0).toLowerCase() + texName.slice(1)}Shape`;\n  const rankStr = `${inRank}D`;\n\n  return `\n  fn ${funcName}Index(globalIndex : i32) -> ${typeSnippet(component)} {\n    var coords = getCoordsFromIndex(globalIndex);\n    ${coordsSnippet}\n    return ${typeSnippet(component)}(${texName}[getIndexFromCoords${rankStr}(${\n      unpackedCoordsSnippet}, ${shapeStr})${\n      component === 1 ? '' : ` / ${component}`}]);\n  }\n\n  fn ${funcName}Coords(coordsIn : ${type}) -> ${typeSnippet(component)} {\n    var coords = coordsIn;\n    ${coordsSnippet}\n    return ${typeSnippet(component)}(${texName}[getIndexFromCoords${rankStr}(${\n      unpackedCoordsSnippet}, ${shapeStr})${\n      component === 1 ? '' : ` / ${component}`}]);\n  }\n`;\n}\n\nfunction getInputSnippet(\n    inputInfo: InputInfo, outShape: number[], component: number,\n    isFlatDispatchLayout: boolean): string {\n  let res = getInputAtCoordsSnippet(inputInfo, component);\n\n  const inShape = inputInfo.shape;\n  if (inShape.length <= outShape.length) {\n    res += getInputByOutputSnippet(\n        inputInfo, outShape, component, isFlatDispatchLayout);\n  }\n\n  return res;\n}\n\n/**\n * Generates getOutputCoords() function that computes output coordinates\n * from dispatch geometry to reduce arithmetic.\n */\nfunction getOutputCoordsSnippet(\n    outShape: number[],\n    dispatchLayout: {x: number[], y?: number[], z?: number[]}): string {\n  const {x, y = [], z = []} = dispatchLayout;\n\n  const outRank = outShape.length;\n  const rank = x.length + y.length + z.length;\n  // getOutputCoords is only meaningful when the output rank is same with\n  // dispatch layout rank.\n  if (rank !== outRank) {\n    return '';\n  }\n\n  if (x.length === outRank) {\n    const dtype = getCoordsDataType(outRank);\n    const snippet = `fn getOutputCoords() -> ${dtype}{\n    let globalIndex = getGlobalIndex();\n    return getCoordsFromIndex(globalIndex);\n  }\n  `;\n    return snippet;\n  }\n\n  let gatherDimensionsStr = '';\n  const dims = [x, y, z];\n\n  for (let i = 0; i < dims.length; i++) {\n    const arr = dims[i];\n\n    if (arr.length === 0) {\n      continue;\n    }\n\n    if (arr.length === 1) {\n      gatherDimensionsStr += `let d${arr[0]} = i32(globalId[${i}]);`;\n    } else {\n      const strides = symbolicallyComputeStrides(arr, 'uniforms.outShape');\n      gatherDimensionsStr += `var index${i} = i32(globalId[${i}]);`;\n      for (let j = 0; j < strides.length; j++) {\n        gatherDimensionsStr += `let d${arr[j]} = index${i} / ${strides[j]};`;\n\n        if (j === strides.length - 1) {\n          gatherDimensionsStr += `let d${arr[j + 1]} = ` +\n              `index${i} - d${arr[j]} * ${strides[j]};`;\n        } else {\n          gatherDimensionsStr +=\n              `index${i} = index${i} - d${arr[j]} * ${strides[j]};`;\n        }\n      }\n    }\n  }\n\n  const dimensions = [];\n  for (let i = 0; i < rank; i++) {\n    dimensions.push(`d${i}`);\n  }\n\n  const dtype = getCoordsDataType(rank);\n  let snippet = `fn getOutputCoords() -> ${dtype} {\n  ${gatherDimensionsStr}\n`;\n  if (dimensions.length === 0) {\n    snippet += `return ${dtype}(0); }`;\n  } else {\n    snippet += `return ${dtype}(${dimensions.join(',')}); }`;\n  }\n\n  return snippet;\n}\n\nfunction getOutputIndexFromCoordsSnippet(outRank: number) {\n  let snippet = '';\n  switch (outRank) {\n    case 0:\n    case 1:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : i32) -> i32 {\n          return coords;\n        }\n        `;\n      break;\n    case 2:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {\n          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));\n        }\n        `;\n      break;\n    case 3:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {\n          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));\n        }\n        `;\n      break;\n    case 4:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n          return dot(coords, vec4<i32>(\n            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));\n        }\n        `;\n      break;\n    case 5:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec5) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u;\n        }\n        `;\n      break;\n    case 6:\n      snippet += `\n        fn getOutputIndexFromCoords(coords : vec6) -> i32 {\n          return coords.x * uniforms.outShapeStrides.x +\n              coords.y * uniforms.outShapeStrides.y +\n              coords.z * uniforms.outShapeStrides.z +\n              coords.w * uniforms.outShapeStrides.w +\n              coords.u * uniforms.outShapeStrides.u +\n              coords.v;\n        }\n        `;\n      break;\n    default:\n      util.assert(false, () => `Unsupported ${outRank}D shape`);\n      break;\n  }\n  return snippet;\n}\n\nfunction isFlatDispatch(program: WebGPUProgram): boolean {\n  return program.dispatch[1] === 1 && program.dispatch[2] === 1;\n}\n\nexport function dataTypeToGPUType(type: DataType, component = 1) {\n  if (type === 'float32') {\n    return typeSnippet(component, 'f32');\n  } else if (type === 'int32' || type === 'bool') {\n    return typeSnippet(component, 'i32');\n  }\n  throw new Error(`type ${type} is not supported.`);\n}\n\nfunction setOutputSnippet(\n    outShape: number[], outBufferType: DataType, component: number): string {\n  const outRank = outShape.length;\n  const gpuType = dataTypeToGPUType(outBufferType, component);\n  let snippet =\n      `fn setOutputAtIndex(flatIndex : i32, value : ${typeSnippet(component)}) {\n      result[flatIndex] = ${gpuType}(value);\n    }\n\n    fn setOutputAtIndexI32(flatIndex : i32, value : ${\n          typeSnippet(component, 'i32')}) {\n      result[flatIndex] = ${gpuType}(value);\n    }\n    `;\n  if (outRank >= 2) {\n    const dims = ['d0', 'd1', 'd2', 'd3', 'd4', 'd5'].slice(0, outRank);\n    const type = getCoordsDataType(outRank);\n\n    snippet += `\n      fn setOutputAtCoords(${dims.map(d => `${d} : i32`).join(', ')}, value : ${\n        typeSnippet(component)}) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndex(flatIndex${\n        component === 1 ? '' : ` / ${component}`}, value);\n      }\n      fn setOutputAtCoordsI32(${\n        dims.map(d => `${d} : i32`).join(', ')}, value : ${\n        typeSnippet(component, 'i32')}) {\n        let flatIndex = getOutputIndexFromCoords(${type}(${dims.join(', ')}));\n        setOutputAtIndexI32(flatIndex${\n        component === 1 ? '' : ` / ${component}`}, value);\n      }\n    `;\n  }\n\n  return snippet;\n}\n\nfunction insertAlignment(uniformShader: string) {\n  // insert alignment when current pattern is vec5 or vec6\n  const curInsertRe = /(\\w+)\\s*:\\s*vec(5|6)/g;\n  uniformShader = uniformShader.replace(curInsertRe, (match) => {\n    return '@align(16) ' + match;\n  });\n\n  // insert alignment when previous pattern is vec5 or vec6\n  const preInsertRe = /vec(5|6)\\s*,\\s*(\\w+)/g;\n  uniformShader = uniformShader.replace(preInsertRe, (_, p1, p2) => {\n    return `vec${p1}, @align(16) ${p2}`;\n  });\n  return uniformShader;\n}\nfunction isFlatDispatchLayout(program: WebGPUProgram): boolean {\n  if (program.dispatchLayout.hasOwnProperty('y') &&\n      program.dispatchLayout.y.length !== 0) {\n    return false;\n  }\n  if (program.dispatchLayout.hasOwnProperty('z') &&\n      program.dispatchLayout.z.length !== 0) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nconst arrayProduct = (arr: number[]) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nexport function tilesFitEvenlyIntoShape(\n    tileSize: number[], shape: number[]): boolean {\n  if (tileSize.length !== shape.length) {\n    throw new Error(\n        `Cannot compute whether rank ${tileSize.length}` +\n        ` tiles fit evenly into rank ${shape.length} shape` +\n        ` - ranks must match.`);\n  }\n  return shape.every(\n      (dim: number, dimIdx: number) => dim % tileSize[dimIdx] === 0);\n}\n\n// Computes dispatch geometry based on layout of output dimensions and\n// workgroupSize.\nexport function computeDispatch(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    workgroupSize: [number, number, number] = [1, 1, 1],\n    elementsPerThread: [number, number, number] =\n        [1, 1, 1]): [number, number, number] {\n  const [dispatchX, dispatchY, dispatchZ] = [\n    Math.ceil(\n        arrayProduct(layout.x.map(d => outputShape[d])) /\n        (workgroupSize[0] * elementsPerThread[0])),\n    layout.y ? Math.ceil(\n                   arrayProduct(layout.y.map(d => outputShape[d])) /\n                   (workgroupSize[1] * elementsPerThread[1])) :\n               1,\n    layout.z ? Math.ceil(\n                   arrayProduct(layout.z.map(d => outputShape[d])) /\n                   (workgroupSize[2] * elementsPerThread[2])) :\n               1\n  ];\n  return [dispatchX, dispatchY, dispatchZ];\n}\n\nexport type WorkgroupInfo = {\n  workgroupSize: [number, number, number],\n  elementsPerThread: [number, number, number],\n};\n\nexport function computeWorkgroupInfoForMatMul(\n    dimAOuter: number, dimInner: number, dimBOuter: number,\n    transposeA = false): WorkgroupInfo {\n  // These are experimental values. Usually, we need to adjust the work group\n  // size based on the input shapes to improve the EU occupancy.\n  // TODO: WebGPU limits the maximum allowed shared memory size as 16K. To make\n  // sure it doesn't exceed this limitations. Temporarily reduce the work group\n  // size to [8, 8, 1] and the work per thread size is [4, 4, 1]. But we should\n  // revisit it and find the balance between work group size and work per thread\n  // size.\n  const workgroupSize: [number, number, number] = [8, 8, 1];\n  const elementsPerThread: [number, number, number] = [4, 4, 1];\n\n  if (!transposeA) {\n    if (dimAOuter <= 8) {\n      elementsPerThread[1] = 1;\n    }\n\n    if (dimInner <= 16 && dimBOuter <= 16) {\n      workgroupSize[0] = 4;\n    }\n  }\n\n  return {workgroupSize, elementsPerThread};\n}\n\nexport function computeWorkgroupSizeForConv2d(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    isVec4 = false): [number, number, number] {\n  if (isVec4) {\n    return [8, 8, 1];\n  }\n\n  const dim0 = arrayProduct(layout.x.map(d => outputShape[d]));\n  const dim1 = arrayProduct(layout.y.map(d => outputShape[d]));\n  // TODO(jiajia.qin@intel.com): More fine tune based on outputShape.\n  // These are experimental values. Usually, we need to adjust the work group\n  // size based on the output shape. For example, when one dimension is smaller\n  // than 4, it will be wasteful if we assign a larger size for this dimension,\n  // which results lots of threads doing useless work and reduces parallelism\n  // of hardware threads. But it is always a balance between work group size\n  // and shared memory. If one dimension is too small, such as 1, shared memory\n  // will won't be fully utilized.\n  if (dim0 <= 4) {\n    return [4, 16, 1];\n  }\n  if (dim1 <= 4) {\n    return [16, 4, 1];\n  }\n\n  return [16, 16, 1];\n}\n\nexport function computeWorkPerThreadForConv2d(\n    layout: {x: number[], y?: number[], z?: number[]}, outputShape: number[],\n    isVec4 = false): [number, number, number] {\n  if (isVec4) {\n    return [4, 4, 1];\n  }\n\n  const dim0 = arrayProduct(layout.x.map(d => outputShape[d]));\n  const dim1 = arrayProduct(layout.y.map(d => outputShape[d]));\n  // TODO(jiajia.qin@intel.com): More fine tune based on outputShape.\n  // The following conditions correspond to the values set in\n  // computeWorkgroupSizeForConv2d.\n  if (dim0 <= 4) {\n    return [1, 2, 1];\n  }\n  if (dim1 <= 4) {\n    return [2, 1, 1];\n  }\n\n  return [2, 2, 1];\n}\n\nexport function flatDispatchLayout(shape: number[]) {\n  return {x: shape.map((d, i) => i)};\n}\n\nexport function GPUBytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32' || dtype === 'bool' ||\n      dtype === 'string') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nexport function isWebGPUSupported(): boolean {\n  return !!globalThis.navigator.gpu;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGPU backend.');\n    }\n  });\n}\n\nexport enum MatMulProgramType {\n  MatMulReduceProgram,\n  MatMulSplitKProgram,\n  MatMulSmallOutputSizeProgram,\n  MatMulPackedProgram,\n  MatMulMax\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport './flags_webgpu';\n\nimport {backend_util, BackendValues, buffer, DataStorage, DataType, engine, env, GPUData, KernelBackend, Rank, RecursiveArray, ShapeMap, Tensor, TensorBuffer, TensorInfo, TimingInfo, TypedArray, util, WebGPUData} from '@tensorflow/tfjs-core';\n\nimport {AdapterInfo} from './adapter_info';\nimport {BufferManager} from './buffer_manager';\nimport {TextureManager} from './texture_manager';\nimport * as webgpu_program from './webgpu_program';\nimport * as webgpu_util from './webgpu_util';\n\nexport interface WebGPUMemoryInfo extends backend_util.MemoryInfo {\n  numBytesInGPU: number;\n  numBytesAllocatedInGPU: number;\n  unreliable: boolean;\n}\n\ntype TensorData = {\n  values: BackendValues,\n  dtype: DataType,\n  shape: number[],\n  refCount: number,\n  resource?: GPUBuffer|GPUTexture|GPUExternalTexture,\n  // external is true means we use the resource provided by users directly\n  // (without a copy), so users should be responsible for its release.\n  external?: boolean,\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo}\n};\n\ninterface DataId {}\n\nexport type WebGPUKernelInfo = {\n  name: string,\n  query: Promise<number>,\n};\n\nexport type TimerNode = RecursiveArray<WebGPUKernelInfo>|WebGPUKernelInfo;\n\nexport interface WebGPUTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\ntype ProgramUniform = Array<{type: string; data: number[]}>;\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Reshape dispatch, not to exceed device limits.\nconst reshapeDispatch =\n    (device: GPUDevice,\n     program: webgpu_program.WebGPUProgram): [number, number, number] => {\n      const MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE =\n          device.limits.maxComputeWorkgroupsPerDimension;\n      const layout = program['dispatchLayout'];\n      const dispatch = program['dispatch'];\n      if (dispatch.every((d) => d <= MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE)) {\n        return dispatch;\n      }\n\n      util.assert(\n          dispatch[0] > MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE &&\n              layout.y === undefined && layout.z === undefined,\n          () => 'Dispatch size exceeds WebGPU limits in Y or Z dimension.');\n\n      let dispatchAverage = Math.ceil(Math.sqrt(dispatch[0]));\n      if (dispatchAverage > MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE) {\n        dispatchAverage = Math.ceil(Math.cbrt(dispatch[0]));\n        util.assert(\n            dispatchAverage <= MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE,\n            () => 'Total dispatch size exceeds WebGPU maximum.');\n        return [dispatchAverage, dispatchAverage, dispatchAverage];\n      } else {\n        return [dispatchAverage, dispatchAverage, 1];\n      }\n    };\n\nexport class WebGPUBackend extends KernelBackend {\n  bufferManager: BufferManager;\n  adapterInfo: AdapterInfo;\n  device: GPUDevice;\n  queue: GPUQueue;\n  tensorMap: DataStorage<TensorData>;\n  textureManager: TextureManager;\n  thresholdToIncreaseWorkgroups: number;\n\n  private activeTimers: TimerNode[];\n  private commandEncoder: GPUCommandEncoder;\n  private computePassEncoder: GPUComputePassEncoder;\n  private commandQueueOwnedIds = new WeakSet<DataId>();\n  private dispatchCountInPass = 0;\n  private disposed = false;\n  private downloadWaitMs = 0;\n  private dummyCanvas: HTMLCanvasElement;\n  private dummyContext: GPUCanvasContext;\n  private tensorDataPendingDisposal: DataId[] = [];\n  private static nextDataId = 0;\n  private pipelineCache:\n      {[key: string]: GPUComputePipeline|Promise<GPUComputePipeline>};\n  private programTimersStack: TimerNode[];\n  private queryResolveBuffer: GPUBuffer = null;\n  private querySet: GPUQuerySet = null;\n  private querySetCount = 2;\n  private stagingPendingDisposal: GPUBuffer[] = [];\n  private supportTimestampQuery: boolean;\n  private uniformPendingDisposal: GPUBuffer[] = [];\n  private uploadWaitMs = 0;\n  private hasReadSyncWarned = false;\n  private hasTimestampQueryWarned = false;\n\n  private nextDataId(): number {\n    return WebGPUBackend.nextDataId++;\n  }\n\n  constructor(device: GPUDevice, adapterInfo?: GPUAdapterInfo) {\n    super();\n    if (!webgpu_util.isWebGPUSupported()) {\n      throw new Error('WebGPU is not supported on this device');\n    }\n    this.pipelineCache = {};\n    this.device = device;\n    this.queue = device.queue;\n    this.commandEncoder = null;\n    this.computePassEncoder = null;\n    this.adapterInfo = new AdapterInfo(adapterInfo);\n    this.supportTimestampQuery = this.device.features.has('timestamp-query');\n    this.thresholdToIncreaseWorkgroups =\n        this.adapterInfo.intelGPUGeneration >= 12 ? 16 : 8;\n\n    this.bufferManager = new BufferManager(this.device);\n    this.textureManager = new TextureManager(this.device);\n    this.tensorMap = new DataStorage(this, engine());\n\n    // Profiling tools like PIX needs this dummy canvas to\n    // trigger capturing a frame.\n    if (env().getBool('WEBGPU_USE_PROFILE_TOOL')) {\n      this.dummyCanvas = document.createElement('canvas');\n      this.dummyCanvas.width = 1;\n      this.dummyCanvas.height = 1;\n\n      this.dummyContext = this.dummyCanvas.getContext('webgpu');\n      this.dummyContext.configure({\n        device,\n        format: 'bgra8unorm',\n      });\n\n      document.body.appendChild(this.dummyCanvas);\n    }\n  }\n\n  override floatPrecision(): 32 {\n    return 32;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or delayed in this backend, false if there are still\n   * references.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  override disposeData(dataId: DataId, force = false): boolean {\n    // No-op if already disposed.\n    if (!this.tensorMap.has(dataId)) {\n      return true;\n    }\n\n    const tensorData = this.tensorMap.get(dataId);\n    if (force) {\n      tensorData.refCount = 0;\n    } else {\n      tensorData.refCount--;\n    }\n\n    if (tensorData.refCount > 0) {\n      return false;\n    }\n\n    if (tensorData.complexTensorInfos != null) {\n      this.disposeData(tensorData.complexTensorInfos.real.dataId);\n      this.disposeData(tensorData.complexTensorInfos.imag.dataId);\n    }\n\n    if (this.commandQueueOwnedIds.has(dataId)) {\n      this.tensorDataPendingDisposal.push(dataId);\n      return true;\n    }\n\n    this.releaseResource(dataId);\n    this.tensorMap.delete(dataId);\n\n    return true;\n  }\n\n  override memory(): WebGPUMemoryInfo {\n    return {\n      numBytesInGPU: this.bufferManager.numBytesUsed,\n      numBytesAllocatedInGPU: this.bufferManager.numBytesAllocated,\n      unreliable: false\n    } as WebGPUMemoryInfo;\n  }\n\n  private releaseResource(dataId: DataId) {\n    const tensorData = this.tensorMap.get(dataId);\n    if (!tensorData || !tensorData.resource) {\n      return;\n    }\n\n    // If tensor's resource is from external, do not release.\n    if (tensorData.external) {\n      tensorData.resource = null;\n      return;\n    }\n    if (tensorData.resource instanceof GPUBuffer) {\n      this.bufferManager.releaseBuffer(tensorData.resource);\n    } else if (tensorData.resource instanceof GPUTexture) {\n      this.textureManager.releaseTexture(tensorData.resource);\n    }\n    tensorData.resource = null;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  override refCount(dataId: DataId): number {\n    if (this.tensorMap.has(dataId)) {\n      const tensorData = this.tensorMap.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  override incRef(dataId: DataId): void {\n    const tensorData = this.tensorMap.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.tensorMap.has(dataId)) {\n      const tensorData = this.tensorMap.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  override write(values: BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.tensorMap.set(dataId, {dtype, shape, values, refCount: 1});\n    return dataId;\n  }\n\n  override move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.tensorMap.set(dataId, {dtype, shape, values, refCount});\n  }\n\n  submitQueue() {\n    this.queue.submit([this.commandEncoder.finish()]);\n    this.commandEncoder = null;\n    this.dispatchCountInPass = 0;\n\n    this.commandQueueOwnedIds = new WeakSet<DataId>();\n\n    this.tensorDataPendingDisposal.forEach(d => {\n      this.releaseResource(d);\n      this.tensorMap.delete(d);\n    });\n\n    this.uniformPendingDisposal.forEach(\n        b => this.bufferManager.releaseBuffer(b));\n    this.stagingPendingDisposal.forEach(\n        b => this.bufferManager.releaseBuffer(b, false));\n\n    this.tensorDataPendingDisposal = [];\n    this.uniformPendingDisposal = [];\n    this.stagingPendingDisposal = [];\n  }\n\n  ensureCommandEncoderReady() {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n  }\n\n  endComputePassEncoder() {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  // Check if parallel compilation is done.\n  async checkCompileCompletionAsync() {\n    let pipelines: GPUComputePipeline[];\n    try {\n      pipelines = await Promise.all(Object.values(this.pipelineCache));\n    } catch (e) {\n      // TODO: Add test case to catch this exception.\n      throw new Error(e.message);\n    }\n    Object.keys(this.pipelineCache).map((key, i) => {\n      this.pipelineCache[key] = pipelines[i];\n    });\n  }\n\n  public async getBufferData(buffer: GPUBuffer): Promise<ArrayBuffer> {\n    if (env().getBool('WEBGPU_ENGINE_COMPILE_ONLY')) {\n      console.warn(\n          'The data may be invalid since WEBGPU_ENGINE_COMPILE_ONLY is true, this can only be called when WEBGPU_ENGINE_COMPILE_ONLY is false');\n      return null;\n    }\n    const size = buffer.size;\n    const stagingBuffer = this.bufferManager.acquireBuffer(\n        size, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ);\n    this.ensureCommandEncoderReady();\n    this.endComputePassEncoder();\n    this.commandEncoder.copyBufferToBuffer(buffer, 0, stagingBuffer, 0, size);\n    this.submitQueue();\n\n    await stagingBuffer.mapAsync(GPUMapMode.READ);\n    const values = stagingBuffer.getMappedRange().slice(0);\n\n    stagingBuffer.unmap();\n    if (stagingBuffer != null) {\n      this.bufferManager.releaseBuffer(stagingBuffer);\n    }\n\n    // Need to get texture from swapChain to enable profiling tool\n    // to capture a frame\n    if (env().getBool('WEBGPU_USE_PROFILE_TOOL')) {\n      util.assert(\n          this.dummyContext !== undefined,\n          () => `Fail to get context for profiling tool`);\n      this.dummyContext.getCurrentTexture();\n    }\n\n    return values;\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, data: BackendValues):\n      BackendValues {\n    const tensorData = this.tensorMap.get(dataId);\n    tensorData.values = data;\n    return tensorData.values;\n  }\n\n  override readSync(dataId: object): BackendValues {\n    const tensorData = this.tensorMap.get(dataId);\n    const {values, complexTensorInfos} = tensorData;\n\n    if (values != null || tensorData.dtype === 'string') {\n      return values;\n    }\n\n    if (tensorData.dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      const complexVals = util.convertBackendValuesAndArrayBuffer(\n          backend_util.mergeRealAndImagArrays(realValues, imagValues).buffer,\n          'float32');\n      this.convertAndCacheOnCPU(dataId, complexVals);\n      return complexVals;\n    }\n\n    if (!this.hasReadSyncWarned) {\n      this.hasReadSyncWarned = true;\n      console.warn(\n          `The performance of synchronously reading data from GPU to CPU is ` +\n          `poor on the webgpu backend, please use asynchronous APIs instead.`);\n    }\n\n    const alphaModes: GPUCanvasAlphaMode[] = ['opaque', 'premultiplied'];\n\n    const buffer = tensorData.resource as GPUBuffer;\n    const bufferSize = buffer.size;\n    util.assert(\n        bufferSize % 4 === 0,\n        () => 'Because there is 4 bytes for ' +\n            'one pixel, buffer size must be multiple of 4.');\n    const pixelsSize = bufferSize / 4;\n    const valsGPU = new ArrayBuffer(bufferSize);\n    // TODO: adjust the reading window size according the `bufferSize`.\n    const canvasWidth = 256, canvasHeight = 256;\n    const stagingDeviceStorage: OffscreenCanvas[] =\n        alphaModes.map(_ => new OffscreenCanvas(canvasWidth, canvasHeight));\n    const stagingHostStorage = new OffscreenCanvas(canvasWidth, canvasHeight);\n\n    this.endComputePassEncoder();\n    stagingDeviceStorage\n        .map((storage, index) => {\n          const context = storage.getContext('webgpu');\n          // TODO: use rgba8unorm format when this format is supported on Mac.\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1298618\n          context.configure({\n            device: this.device,\n            format: 'bgra8unorm',\n            usage: GPUTextureUsage.COPY_DST,\n            alphaMode: alphaModes[index],\n          });\n          return context.getCurrentTexture();\n        })\n        .map((texture, index) => {\n          const bytesPerRow = canvasWidth * 4;\n          const readDataGPUToCPU =\n              (width: number, height: number, offset: number) => {\n                this.ensureCommandEncoderReady();\n                this.commandEncoder.copyBufferToTexture(\n                    {\n                      buffer,\n                      bytesPerRow,\n                      offset,\n                    },\n                    {\n                      texture,\n                    },\n                    {\n                      width,\n                      height,\n                    });\n                this.submitQueue();\n\n                const context = stagingHostStorage.getContext('2d', {\n                  willReadFrequently: true,\n                });\n                context.clearRect(0, 0, width, height);\n                context.drawImage(stagingDeviceStorage[index], 0, 0);\n                const stagingValues =\n                    context.getImageData(0, 0, width, height).data;\n                const alphaMode = alphaModes[index];\n                const span =\n                    new Uint8ClampedArray(valsGPU, offset, width * height * 4);\n                for (let k = 0; k < span.length; k += 4) {\n                  if (alphaMode === 'premultiplied') {\n                    span[k + 3] = stagingValues[k + 3];\n                  } else {\n                    const value = stagingValues[k];\n                    span[k] = stagingValues[k + 2];\n                    span[k + 1] = stagingValues[k + 1];\n                    span[k + 2] = value;\n                  }\n                }\n              };\n\n          const fullyReadCount =\n              Math.floor(pixelsSize / (canvasWidth * canvasHeight));\n          let width = canvasWidth, height = canvasHeight, offset = 0;\n          for (let i = 0; i < fullyReadCount; i++) {\n            // Read the buffer data, which fully fill the whole canvas.\n            readDataGPUToCPU(width, height, offset);\n            offset += canvasWidth * canvasHeight * 4;\n          }\n\n          const remainSize = pixelsSize % (canvasWidth * canvasHeight);\n          height = Math.floor(remainSize / canvasWidth);\n          if (height > 0) {\n            // Read the buffer data, which fully fill certain rows of canvas.\n            readDataGPUToCPU(width, height, offset);\n            offset += height * (canvasWidth * 4);\n          }\n\n          width = remainSize % canvasWidth;\n          if (width > 0) {\n            // Read the buffer data, which not fully fill one row of canvas.\n            readDataGPUToCPU(width, 1, offset);\n          }\n        });\n\n    const vals =\n        util.convertBackendValuesAndArrayBuffer(valsGPU, tensorData.dtype);\n    this.convertAndCacheOnCPU(dataId, vals);\n    return vals;\n  }\n\n  override async read(dataId: object): Promise<BackendValues> {\n    if (!this.tensorMap.has(dataId)) {\n      throw new Error(`Tensor ${dataId} was not registered!`);\n    }\n    const tensorData = this.tensorMap.get(dataId);\n\n    const {values} = tensorData;\n\n    if (values != null) {\n      return values;\n    }\n\n    // Download the values from the GPU.\n    let vals: BackendValues;\n    if (tensorData.dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(tensorData.complexTensorInfos.real.dataId),\n        this.read(tensorData.complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else {\n      const data = await this.getBufferData(tensorData.resource as GPUBuffer);\n      vals = util.convertBackendValuesAndArrayBuffer(data, tensorData.dtype);\n    }\n    this.convertAndCacheOnCPU(dataId, vals);\n    return vals;\n  }\n\n  // The source GPUBuffer and destination GPUBuffer have the same size and\n  // usage.\n  private copyBuffer(srcBuffer: GPUBuffer) {\n    const size = srcBuffer.size;\n    const usage = srcBuffer.usage;\n    const dstBuffer = this.bufferManager.acquireBuffer(size, usage);\n    this.ensureCommandEncoderReady();\n    this.endComputePassEncoder();\n    this.commandEncoder.copyBufferToBuffer(srcBuffer, 0, dstBuffer, 0, size);\n    this.submitQueue();\n    return dstBuffer;\n  }\n\n  /**\n   * Create a TF.js tensor out of an existing WebGPU buffer.\n   */\n  override createTensorFromGPUData(\n      webGPUData: WebGPUData, shape: number[], dtype: DataType): Tensor {\n    let buffer = webGPUData.buffer;\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. `);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.tensorMap.set(dataId, {\n      dtype,\n      shape,\n      values: null,\n      refCount: 1,\n      external: webGPUData.zeroCopy\n    });\n    const tensorData = this.tensorMap.get(dataId);\n    const size = webgpu_util.GPUBytesPerElement(tensorData.dtype) *\n        util.sizeFromShape(tensorData.shape);\n    if (webGPUData.buffer.size < size) {\n      throw new Error(`GPUBuffer size(${\n          webGPUData.buffer.size}) is smaller than tensor size(${size})!`);\n    } else if (\n        (webGPUData.buffer.usage &\n         (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC)) !==\n        (GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC)) {\n      throw new Error(\n          'GPUBuffer.usage should include GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC!');\n    }\n\n    // Do buffer copy by default.\n    if (webGPUData.zeroCopy !== true) {\n      buffer = this.copyBuffer(buffer);\n    }\n    tensorData.resource = buffer;\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n\n  /**\n   * Read tensor to a new GPUBuffer.\n   * @param dataId The source tensor.\n   */\n  override readToGPU(dataId: DataId): GPUData {\n    const srcTensorData = this.tensorMap.get(dataId);\n    const {values, dtype, shape, resource} = srcTensorData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading buffer for complex64 dtype.');\n    }\n\n    if (resource == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    const srcBuffer = resource as GPUBuffer;\n    const size = srcBuffer.size;\n    const usage = srcBuffer.usage;\n    const buffer = this.bufferManager.acquireBuffer(size, usage);\n    this.ensureCommandEncoderReady();\n    this.endComputePassEncoder();\n    this.commandEncoder.copyBufferToBuffer(\n        resource as GPUBuffer, 0, buffer, 0, size);\n    this.submitQueue();\n\n    const tensorInfo = this.makeTensorInfo(shape, dtype);\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tensorInfo);\n\n    const tensorData = this.tensorMap.get(tensorInfo.dataId);\n    tensorData.resource = buffer;\n\n    return {tensorRef, buffer};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  override async time(f: () => void): Promise<WebGPUTimingInfo> {\n    if (!this.supportTimestampQuery && !this.hasTimestampQueryWarned) {\n      console.warn(\n          `This device doesn't support timestamp-query extension. ` +\n          `Start Chrome browser with flag ` +\n          `--disable-dawn-features=disallow_unsafe_apis to try it again. ` +\n          `Otherwise, zero will be shown for the kernel time when profiling ` +\n          `mode is enabled.`);\n      this.hasTimestampQueryWarned = true;\n    }\n\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: WebGPUKernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: WebGPUKernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n    const res: WebGPUTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null\n    };\n\n    const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n    res['kernelMs'] = util.sum(kernelMs);\n    res['getExtraProfileInfo'] = () =>\n        kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n            .map(d => `${d.name}: ${d.ms}`)\n            .join(', ');\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      values = (values as unknown as string[]).map(d => util.encodeString(d));\n    }\n    const dataId = this.write(values as BackendValues, shape, dtype);\n    return {dataId, shape, dtype};\n  }\n\n  private tensorToBinding(tensor?: TensorInfo): GPUBindingResource {\n    if (!tensor) {\n      return null;\n    }\n\n    const tensorData = this.tensorMap.get(tensor.dataId);\n    const resource = tensorData.resource;\n\n    if (resource instanceof GPUBuffer) {\n      return {buffer: resource};\n    }\n    if (resource instanceof GPUTexture) {\n      return resource.createView();\n    }\n    // GPUExternalTexture\n    return resource;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const tensorData = this.tensorMap.get(dataId);\n    // Already on the GPU.\n    if (tensorData.resource != null) {\n      return;\n    }\n\n    const size = webgpu_util.GPUBytesPerElement(tensorData.dtype) *\n        util.sizeFromShape(tensorData.shape);\n    let buffer;\n    const usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC |\n        GPUBufferUsage.COPY_DST;\n    if (tensorData.values) {\n      buffer = this.bufferManager.acquireBuffer(size, usage, true);\n      if (buffer.mapState === 'unmapped') {\n        const stagingBuffer = this.bufferManager.acquireBuffer(\n            size, GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC, true,\n            false);\n        const arrayBuffer = stagingBuffer.getMappedRange();\n        if (tensorData.dtype === 'int32' || tensorData.dtype === 'bool') {\n          new Int32Array(arrayBuffer).set(tensorData.values as TypedArray);\n        } else {\n          new Float32Array(arrayBuffer).set(tensorData.values as Float32Array);\n        }\n        stagingBuffer.unmap();\n        this.ensureCommandEncoderReady();\n        this.endComputePassEncoder();\n        this.commandEncoder.copyBufferToBuffer(\n            stagingBuffer, 0, buffer, 0, size);\n\n        this.stagingPendingDisposal.push(stagingBuffer);\n      } else {\n        const arrayBuffer = buffer.getMappedRange();\n        if (tensorData.dtype === 'int32' || tensorData.dtype === 'bool') {\n          new Int32Array(arrayBuffer).set(tensorData.values as TypedArray);\n        } else {\n          new Float32Array(arrayBuffer).set(tensorData.values as Float32Array);\n        }\n        buffer.unmap();\n      }\n\n      // Once uploaded, don't store the values on cpu.\n      tensorData.values = null;\n    } else {\n      buffer = this.bufferManager.acquireBuffer(size, usage);\n    }\n    tensorData.resource = buffer;\n  }\n\n  private makeUniforms(programUniform: ProgramUniform): GPUBindingResource {\n    let currentOffset = 0;\n    let preLength = 0;\n    const offsets: number[] = [];\n    let maxAlignmentOfField = 1;\n    programUniform.forEach((d) => {\n      if (d.data.length === 0) {\n        d.data = [1];\n      }\n      // https://www.w3.org/TR/WGSL/#alignof\n      let baseAlignment: number;\n      switch (d.data.length) {\n        case 1:\n          baseAlignment = 4;\n          break;\n        case 2:\n          baseAlignment = 8;\n          break;\n        case 3:\n          baseAlignment = 16;\n          break;\n        case 4:\n          baseAlignment = 16;\n          break;\n        case 5:\n          baseAlignment = 16;\n          break;\n        case 6:\n          baseAlignment = 16;\n          break;\n        default:\n          util.assert(false, () => `Unsupported ${d.data.length}D shape`);\n      }\n\n      if (preLength === 5 || preLength === 6) {\n        baseAlignment = 16;\n      }\n      if (baseAlignment > maxAlignmentOfField) {\n        maxAlignmentOfField = baseAlignment;\n      }\n      currentOffset = Math.ceil(currentOffset / baseAlignment) * baseAlignment;\n      preLength = d.data.length;\n      offsets.push(currentOffset);\n      currentOffset += d.data.length * 4;\n    });\n\n    currentOffset =\n        Math.ceil(currentOffset / maxAlignmentOfField) * maxAlignmentOfField;\n    const arrayBuffer = new ArrayBuffer(currentOffset);\n    programUniform.forEach((d, i) => {\n      const offset = offsets[i];\n      if (d.type === 'int32') {\n        new Int32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      } else if (d.type === 'uint32') {\n        new Uint32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      } else {\n        new Float32Array(arrayBuffer, offset, d.data.length).set(d.data);\n      }\n    });\n\n    const uniformBuffer = this.bufferManager.acquireBuffer(\n        currentOffset, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);\n    this.queue.writeBuffer(uniformBuffer, 0, arrayBuffer, 0, currentOffset);\n    this.uniformPendingDisposal.push(uniformBuffer);\n\n    return {offset: 0, size: currentOffset, buffer: uniformBuffer};\n  }\n\n  public runWebGPUProgram(\n      program: webgpu_program.WebGPUProgram, inputs: TensorInfo[],\n      outputDtype: DataType, programDefinedUniform?: ProgramUniform,\n      output?: TensorInfo): TensorInfo {\n    if (!output) {\n      output = this.makeTensorInfo(program.outputShape, outputDtype);\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      this.tensorMap.get(output.dataId).values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n    this.uploadToGPU(output.dataId);\n    program.dispatch = reshapeDispatch(this.device, program);\n\n    const inputsData = inputs.map((input: TensorInfo, i: number) => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n      this.uploadToGPU(input.dataId);\n\n      return {\n        // Returning dtype from tensorMap because it reflects dtype\n        // of underlying buffer, rather than abstract dtype.\n        dtype: this.tensorMap.get(input.dataId).dtype,\n        shape: input.shape,\n        name: program.variableNames[i]\n      };\n    });\n\n    program.shaderKey =\n        webgpu_program.makeShaderKey(program, inputsData, output);\n\n    const parallelCompilation = env().getBool('WEBGPU_ENGINE_COMPILE_ONLY');\n    if (!(program.shaderKey in this.pipelineCache)) {\n      this.pipelineCache[program.shaderKey] = webgpu_program.compileProgram(\n          this.device, program, inputsData, output, parallelCompilation);\n    }\n    program.pipeline = this.pipelineCache[program.shaderKey];\n\n    if (!parallelCompilation) {\n      this.recordAndSubmit(program, output, inputs, programDefinedUniform);\n    }\n    return output;\n  }\n\n  private recordAndSubmit(\n      program: webgpu_program.WebGPUProgram, output: TensorInfo,\n      inputs: TensorInfo[], programDefinedUniform?: ProgramUniform) {\n    if (program.pipeline instanceof Promise) {\n      throw new Error(\n          'Please call checkCompileCompletionAsync to ensure parallel compilation is done!');\n    }\n    // There are six kinds of uniforms: NAN, INFINITY, shapes, shape strides,\n    // program size, program defined uniforms.\n    let programUniform: ProgramUniform = [];\n    let bufferShapes: number[][] = [];\n    const uniformsType = 'int32';\n    if (program.pixelsOpType == null) {\n      programUniform.push(\n          {type: 'float32', data: [NaN]}, {type: 'float32', data: [Infinity]});\n      bufferShapes = inputs.concat(output).map(d => d.shape);\n      const uniformsType = 'int32';\n      bufferShapes.map(d => {\n        programUniform.push({type: uniformsType, data: d});\n        const strides = util.computeStrides(d);\n        programUniform.push({type: uniformsType, data: strides});\n      });\n    } else {\n      const strides = util.computeStrides(output.shape);\n      programUniform.push({type: uniformsType, data: strides});\n    }\n    if (program.size) {\n      const size = util.sizeFromShape(program.outputShape);\n      programUniform.push({\n        type: uniformsType,\n        data: [program.outputComponent ? size / program.outputComponent : size]\n      });\n    }\n\n    if (programDefinedUniform) {\n      programUniform = [...programUniform, ...programDefinedUniform];\n    }\n    const bindings = [\n      this.tensorToBinding(output), ...inputs.map(t => this.tensorToBinding(t)),\n      this.makeUniforms(programUniform)\n    ];\n\n    inputs.forEach(input => {\n      this.commandQueueOwnedIds.add(input.dataId);\n    });\n    this.commandQueueOwnedIds.add(output.dataId);\n\n    const bindGroup = this.device.createBindGroup({\n      layout: program.pipeline.getBindGroupLayout(0),\n      entries: bindings.map((b, i) => ({binding: i, resource: b})),\n    });\n\n    const shouldTimeProgram = this.activeTimers != null;\n    this.ensureCommandEncoderReady();\n\n    const computePassDescriptor: GPUComputePassDescriptor = {};\n    if (shouldTimeProgram && this.supportTimestampQuery) {\n      this.endComputePassEncoder();\n      if (this.querySet == null) {\n        this.querySet = this.device.createQuerySet({\n          type: 'timestamp',\n          count: this.querySetCount,\n        });\n      }\n      computePassDescriptor.timestampWrites = [\n        {\n          querySet: this.querySet,\n          queryIndex: 0,\n          location: 'beginning',\n        },\n        {\n          querySet: this.querySet,\n          queryIndex: 1,\n          location: 'end',\n        }\n      ];\n      this.computePassEncoder =\n          this.commandEncoder.beginComputePass(computePassDescriptor);\n    } else if (!this.computePassEncoder) {\n      this.computePassEncoder =\n          this.commandEncoder.beginComputePass(computePassDescriptor);\n    }\n\n    this.computePassEncoder.setPipeline(program.pipeline);\n    this.computePassEncoder.setBindGroup(0, bindGroup);\n    this.computePassEncoder.dispatchWorkgroups(\n        program.dispatch[0], program.dispatch[1], program.dispatch[2]);\n    this.dispatchCountInPass++;\n\n    if (shouldTimeProgram ||\n        env().get('WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE') as\n            number <= this.dispatchCountInPass ||\n        program.pixelsOpType === webgpu_program.PixelsOpType.DRAW) {\n      this.endComputePassEncoder();\n      if (shouldTimeProgram) {\n        this.activeTimers.push(\n            {name: program.constructor.name, query: this.getQueryTime()});\n      } else {\n        this.submitQueue();\n      }\n    }\n  }\n\n  async getQueryTime(): Promise<number> {\n    if (!this.supportTimestampQuery) {\n      return 0;\n    }\n\n    if (this.queryResolveBuffer == null) {\n      this.queryResolveBuffer = this.bufferManager.acquireBuffer(\n          this.querySetCount * 8,\n          GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST |\n              GPUBufferUsage.QUERY_RESOLVE);\n    }\n    this.commandEncoder.resolveQuerySet(\n        this.querySet, 0, this.querySetCount, this.queryResolveBuffer, 0);\n\n    const queryStagingBuffer = this.bufferManager.acquireBuffer(\n        this.querySetCount * 8,\n        GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n    this.commandEncoder.copyBufferToBuffer(\n        this.queryResolveBuffer, 0, queryStagingBuffer, 0,\n        this.querySetCount * 8);\n\n    this.submitQueue();\n\n    await queryStagingBuffer.mapAsync(GPUMapMode.READ);\n    const arrayBuffer = new BigUint64Array(queryStagingBuffer.getMappedRange());\n    const time = Number(arrayBuffer[1] - arrayBuffer[0]) / 1000000;\n    queryStagingBuffer.unmap();\n    this.bufferManager.releaseBuffer(queryStagingBuffer);\n    return time;\n  }\n\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGPU_CPU_FORWARD') &&\n        inputs.every(\n            input => this.tensorMap.get(input.dataId).resource == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  override numDataIds() {\n    return this.tensorMap.numDataIds() - this.tensorDataPendingDisposal.length;\n  }\n\n  override dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.querySet != null) {\n      this.querySet.destroy();\n    }\n    this.bufferManager.dispose();\n    this.textureManager.dispose();\n    this.disposed = true;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport enum BinaryOpType {\n  ADD,\n  ATAN2,\n  COMPLEX_MULTIPLY_IMAG,\n  COMPLEX_MULTIPLY_REAL,\n  DIV,\n  ELU_DER,\n  EQUAL,\n  FLOOR_DIV,\n  GREATER,\n  GREATER_EQUAL,\n  LESS,\n  LESS_EQUAL,\n  LOGICAL_AND,\n  LOGICAL_OR,\n  MAX,\n  MIN,\n  MOD,\n  MUL,\n  NOT_EQUAL,\n  POW,\n  PRELU,\n  SQUARED_DIFFERENCE,\n  SUB\n}\n\nconst ADD = 'let resultTemp = a + b;';\nconst ATAN2 = 'let resultTemp = atan2(a, b);';\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nconst COMPLEX_MULTIPLY_REAL = 'let resultTemp = areal * breal - aimag * bimag;';\nconst COMPLEX_MULTIPLY_IMAG = 'let resultTemp = areal * bimag + aimag * breal;';\nconst DIV = 'let resultTemp = a / b;';\nconst ELU_DER = 'let resultTemp = select(a * (b + 1.0), a, b >= b - b);';\nconst EQUAL = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a == b);\n`;\nconst FLOOR_DIV = `\n  let remainder =\n      select(a % b, round(a % b), (round(a) == a) & (round(b) == b));\n  let quotient = (a - remainder) / b;\n  let resultTemp =\n      round(select(quotient, quotient - 1, sign(remainder) == -sign(b)));\n`;\nconst GREATER = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a > b);\n`;\nconst GREATER_EQUAL = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a >= b);\n`;\nconst LESS = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a < b);\n`;\nconst LESS_EQUAL = `\n  let zero = sign(a) * 0 + 0;\n  let one = sign(b) * 0 + 1;\n  let resultTemp = select(zero, one, a <= b);\n`;\nconst LOGICAL_AND = 'return f32(a >= 1.0 && b >= 1.0);';\nconst LOGICAL_AND_VEC4 = `return (vec4<f32>(a >= vec4<f32>(1.0)) *\n  vec4<f32>(b >= vec4<f32>(1.0)));`;\nconst LOGICAL_OR = 'return f32(a >= 1.0 || b >= 1.0);';\nconst LOGICAL_OR_VEC4 = `return min(vec4<f32>(a >= vec4<f32>(1.0)) +\n  vec4<f32>(b >= vec4<f32>(1.0)), vec4<f32>(1.0));`;\nconst MAX = 'let resultTemp = max(a, b);';\nconst MIN = 'let resultTemp = min(a, b);';\nconst MOD = `\n  let isNaN = b == 0.;\n  var resultTemp = a % b;\n  resultTemp = select((resultTemp + b) % b, resultTemp,\n      (a < 0. && b < 0.) || (a >= 0. && b > 0.));\n`;\nconst MOD_VEC4 = `\n  let isNaN = !vec4<bool>(b);\n  var resultTemp = vec4<f32>(a % b);\n  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {\n    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];\n  }\n  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {\n    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];\n  }\n  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {\n    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];\n  }\n  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {\n    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];\n  }\n`;\nconst MUL = 'let resultTemp = a * b;';\nconst NOT_EQUAL = `\n  var resultTemp = f32(a != b);\n  let valueForNaN = 1.0;\n`;\nconst NOT_EQUAL_VEC4 = `\n  var resultTemp = vec4<f32>(a != b);\n  let valueForNaN = 1.0;\n`;\n\nconst POW = `\n  let isNaN = a < 0.0 && floor(b) < b;\n  if (b == 0.0) {\n    return 1.0;\n  }\n  var resultTemp = select(sign(a) * pow(abs(a), b), pow(abs(a), b),\n      round(abs(b) % 2.0) != 1.0);\n`;\nconst POW_VEC4 = `\n  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);\n  let isModRound1 = vec4<f32>(isModRound1Bool);\n  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);\n  var resultTemp = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  let isExpZero = b == vec4<f32>(0.0);\n  if (isExpZero.r) {\n    resultTemp.r = 1.0;\n  }\n  if (isExpZero.g) {\n    resultTemp.g = 1.0;\n  }\n  if (isExpZero.b) {\n    resultTemp.b = 1.0;\n  }\n  if (isExpZero.a) {\n    resultTemp.a = 1.0;\n  }\n  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);\n`;\n\nconst PRELU = `if (a < 0.0) { return b * a; }  return a;`;\nconst PRELU_VEC4 = `\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n`;\nconst SQUARED_DIFFERENCE = 'let resultTemp = (a - b) * (a - b);';\nconst SUB = 'let resultTemp = a - b;';\n\nexport function getBinaryOpString(\n    type: BinaryOpType, useVec4?: boolean): string {\n  let doOpSnippet: string;\n\n  // Ops with NaN check\n  do {\n    switch (type) {\n      case BinaryOpType.ATAN2:\n        doOpSnippet = ATAN2;\n        break;\n      case BinaryOpType.MAX:\n        doOpSnippet = MAX;\n        break;\n      case BinaryOpType.MIN:\n        doOpSnippet = MIN;\n        break;\n      case BinaryOpType.MOD:\n        doOpSnippet = useVec4 ? MOD_VEC4 : MOD;\n        break;\n      case BinaryOpType.NOT_EQUAL:\n        doOpSnippet = useVec4 ? NOT_EQUAL_VEC4 : NOT_EQUAL;\n        break;\n      case BinaryOpType.POW:\n        doOpSnippet = useVec4 ? POW_VEC4 : POW;\n        break;\n      default:\n        continue;\n    }\n\n    let isNaN: string;\n    let dTypeN: string;\n    let boolN: string;\n    if (useVec4) {\n      isNaN = 'isnanVec4';\n      dTypeN = 'vec4<f32>';\n      boolN = 'vec4<bool>';\n    } else {\n      isNaN = 'isnan';\n      dTypeN = 'f32';\n      boolN = 'bool';\n    }\n\n    return `\n      let aIsNaN = ${isNaN}(a);\n      let aPostLegalization = select(a, ${dTypeN}(42), aIsNaN);\n      let bIsNaN = ${isNaN}(b);\n      let bPostLegalization = select(b, ${dTypeN}(42), bIsNaN);\n      let isNaN = false;\n      let valueForNaN = uniforms.NAN;\n      {\n        let a = aPostLegalization;\n        let b = bPostLegalization;\n        ${doOpSnippet}\n        return select(\n            resultTemp, ${dTypeN}(valueForNaN),\n            ${boolN}(isNaN) | aIsNaN | bIsNaN);\n      }\n    `;\n  } while (false);\n\n  // Ops without NaN check\n  switch (type) {\n    case BinaryOpType.ADD:\n      doOpSnippet = ADD;\n      break;\n    case BinaryOpType.COMPLEX_MULTIPLY_IMAG:\n      doOpSnippet = COMPLEX_MULTIPLY_IMAG;\n      break;\n    case BinaryOpType.COMPLEX_MULTIPLY_REAL:\n      doOpSnippet = COMPLEX_MULTIPLY_REAL;\n      break;\n    case BinaryOpType.DIV:\n      doOpSnippet = DIV;\n      break;\n    case BinaryOpType.ELU_DER:\n      doOpSnippet = ELU_DER;\n      break;\n    case BinaryOpType.EQUAL:\n      doOpSnippet = EQUAL;\n      break;\n    case BinaryOpType.FLOOR_DIV:\n      doOpSnippet = FLOOR_DIV;\n      break;\n    case BinaryOpType.GREATER:\n      doOpSnippet = GREATER;\n      break;\n    case BinaryOpType.GREATER_EQUAL:\n      doOpSnippet = GREATER_EQUAL;\n      break;\n    case BinaryOpType.LESS:\n      doOpSnippet = LESS;\n      break;\n    case BinaryOpType.LESS_EQUAL:\n      doOpSnippet = LESS_EQUAL;\n      break;\n    case BinaryOpType.LOGICAL_AND:\n      return useVec4 ? LOGICAL_AND_VEC4 : LOGICAL_AND;\n    case BinaryOpType.LOGICAL_OR:\n      return useVec4 ? LOGICAL_OR_VEC4 : LOGICAL_OR;\n    case BinaryOpType.MUL:\n      doOpSnippet = MUL;\n      break;\n    case BinaryOpType.PRELU:\n      return useVec4 ? PRELU_VEC4 : PRELU;\n    case BinaryOpType.SQUARED_DIFFERENCE:\n      doOpSnippet = SQUARED_DIFFERENCE;\n      break;\n    case BinaryOpType.SUB:\n      doOpSnippet = SUB;\n      break;\n    default:\n      // throw new Error(`BinaryType ${type} is not implemented!`);\n  }\n  return `\n    ${doOpSnippet}\n    return resultTemp;\n  `;\n}\n","/**\n * @license\n * Copyright 2022 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport './flags_webgpu';\n\nimport {env, registerBackend} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from './backend_webgpu';\nimport {isWebGPUSupported} from './webgpu_util';\n\nif (isWebGPUSupported()) {\n  registerBackend('webgpu', async () => {\n    const gpuDescriptor: GPURequestAdapterOptions = {\n      powerPreference: env().get('WEBGPU_USE_LOW_POWER_GPU') ?\n          'low-power' :\n          'high-performance'\n    };\n\n    const adapter = await navigator.gpu.requestAdapter(gpuDescriptor);\n    const deviceDescriptor: GPUDeviceDescriptor = {};\n\n    const requiredFeatures = [];\n    if (adapter.features.has('timestamp-query')) {\n      requiredFeatures.push('timestamp-query');\n    }\n    if (adapter.features.has('bgra8unorm-storage')) {\n      requiredFeatures.push(['bgra8unorm-storage']);\n    }\n    deviceDescriptor.requiredFeatures =\n        requiredFeatures as Iterable<GPUFeatureName>;\n\n    const adapterLimits = adapter.limits;\n    deviceDescriptor.requiredLimits = {\n      'maxComputeWorkgroupStorageSize':\n          adapterLimits.maxComputeWorkgroupStorageSize,\n      'maxComputeWorkgroupsPerDimension':\n          adapterLimits.maxComputeWorkgroupsPerDimension,\n      'maxStorageBufferBindingSize': adapterLimits.maxStorageBufferBindingSize,\n      'maxBufferSize': adapterLimits.maxBufferSize,\n      'maxComputeWorkgroupSizeX': adapterLimits.maxComputeWorkgroupSizeX,\n      'maxComputeInvocationsPerWorkgroup':\n          adapterLimits.maxComputeInvocationsPerWorkgroup,\n    };\n\n    const device: GPUDevice = await adapter.requestDevice(deviceDescriptor);\n    const adapterInfo = await adapter.requestAdapterInfo();\n    return new WebGPUBackend(device, adapterInfo);\n  }, 3 /*priority*/);\n}\n\n// Export webgpu utilities\nexport * from './webgpu';\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nexport enum UnaryOpType {\n  ABS,\n  ACOS,\n  ACOSH,\n  ASIN,\n  ASINH,\n  ATAN,\n  ATANH,\n  CEIL,\n  COS,\n  COSH,\n  ELU,\n  ERF,\n  EXP,\n  EXPM1,\n  FLOOR,\n  IS_FINITE,\n  IS_INF,\n  IS_NAN,\n  LINEAR,\n  LOG,\n  LOG1P,\n  LOGICAL_NOT,\n  NEG,\n  RELU,\n  RELU6,\n  LEAKYRELU,\n  RECIPROCAL,\n  ROUND,\n  RSQRT,\n  SELU,\n  SIGMOID,\n  SIGN,\n  SIN,\n  SINH,\n  SOFTPLUS,\n  SQRT,\n  SQUARE,\n  STEP,\n  TAN,\n  TANH,\n  TO_INT\n}\n\nconst ABS = `return abs(a);`;\nconst ACOS = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return acos(a);\n`;\nconst ACOSH = `\n  if (a < 1.) {\n    return uniforms.NAN;\n  }\n  return acosh(a);\n`;\nconst ASIN = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  return asin(a);\n`;\nconst ASINH = `return asinh(a);`;\nconst ATAN = `\n  if (isnan(a)) {\n    return uniforms.NAN;\n  }\n  return atan(a);\n`;\nconst ATANH = `\n  if (abs(a) > 1.) {\n    return uniforms.NAN;\n  }\n  if (a == 1.) {\n    return uniforms.INFINITY;\n  }\n  if (a == -1.) {\n    return -uniforms.INFINITY;\n  }\n  return atanh(a);\n`;\nconst CEIL = `return ceil(a);`;\nconst COS = `return cos(a);`;\nconst COSH = `\n  let e2x = exp(-a);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\nconst EXPM1 = `return exp(a) - 1.0;`;\nconst ELU = `if (a >= 0.0) { return a; }  return (exp(a) - 1.0);`;\nconst ELU_VEC4 = `\n  var resFloat = exp(a) - vec4<f32>(1.0);\n  if (a.r >= 0.0) {\n    resFloat.r = a.r;\n  }\n  if (a.g >= 0.0) {\n    resFloat.g = a.g;\n  }\n  if (a.b >= 0.0) {\n    resFloat.b = a.b;\n  }\n  if (a.a >= 0.0) {\n    resFloat.a = a.a;\n  }\n  return resFloat;\n`;\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  let p = ${backend_util.ERF_P};\n  let a1 = ${backend_util.ERF_A1};\n  let a2 = ${backend_util.ERF_A2};\n  let a3 = ${backend_util.ERF_A3};\n  let a4 = ${backend_util.ERF_A4};\n  let a5 = ${backend_util.ERF_A5};\n\n  let sign = sign(a);\n  let absA = abs(a);\n  let t = 1.0 / (1.0 + p * absA);\n  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));\n`;\nconst EXP = `return exp(a);`;\nconst FLOOR = `return floor(a);`;\nconst IS_FINITE = `return f32(!isnan(a) && !isinf(a));`;\nconst IS_INF = `return f32(isinf(a));`;\nconst IS_NAN = `return f32(isnan(a));`;\nconst LINEAR = `return a;`;\nconst LOG = `if (a < 0.0) { return uniforms.NAN; }\n  return log(a);`;\nconst LOG1P = `\n  if (isnan(a)) { return a; }\n  return log(1.0 + a);\n`;\nconst LOGICAL_NOT = `return f32(!(a >= 1.0));`;\nconst NEG = `return -a;`;\nconst LEAKYRELU = `if (a < 0.0) { return uniforms.alpha * a; } return a;`;\nconst LEAKYRELU_VEC4 = `\n  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));\n  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);\n`;\nconst RECIPROCAL = `return 1.0 / a;`;\nconst RELU = `return select(a, 0.0, a < 0.0);`;\nconst RELU6 = 'return clamp(a, 0.0, 6.0);';\nconst RELU6_VEC4 =\n    'return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));';\nconst RELU_VEC4 = `\n  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));\n`;\nconst ROUND = `return round(a);`;\nconst RSQRT = `return inverseSqrt(a);`;\n// Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n// See: https://arxiv.org/abs/1706.02515\nconst SELU = `\n  if (a >= 0.0) {\n    return ${backend_util.SELU_SCALE} * a;\n  } else {\n    return ${backend_util.SELU_SCALEALPHA} * (exp(a) - 1.0);\n  }\n`;\nconst SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * a));`;\nconst SIGN = `return sign(a);`;\nconst SIN = `return sin(a);`;\nconst SINH = `\n  let e2x = exp(a);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\nconst SOFTPLUS = `\n  let epsilon = 1.1920928955078125e-7;\n  let threshold = log(epsilon) + 2.0;\n\n  let too_large = a > -threshold;\n  let too_small = a < threshold;\n  let exp_a = exp(a);\n\n  if (too_large) {\n    return a;\n  } else if (too_small) {\n    return exp_a;\n  } else {\n    return log(exp_a + 1.0);\n  }\n`;\nconst SQRT = `return sqrt(a);`;\nconst SQUARE = `return a * a;`;\nconst STEP = `\n  if (isnan(a)) {\n    return a;\n  }\n\n  return select(uniforms.stepAlpha, 1.0, a > 0.0);\n`;\nconst TAN = `return tan(a);`;\nconst TANH = `\n  let e2x = exp(-2.0 * abs(a));\n  return sign(a) * (1.0 - e2x) / (1.0 + e2x);\n`;\nconst TO_INT = `return f32(i32((a)));`;\n\nexport function getUnaryOpString(type: UnaryOpType, useVec4?: boolean): string {\n  switch (type) {\n    case UnaryOpType.ABS:\n      return ABS;\n    case UnaryOpType.ACOS:\n      return ACOS;\n    case UnaryOpType.ACOSH:\n      return ACOSH;\n    case UnaryOpType.ASIN:\n      return ASIN;\n    case UnaryOpType.ASINH:\n      return ASINH;\n    case UnaryOpType.ATAN:\n      return ATAN;\n    case UnaryOpType.ATANH:\n      return ATANH;\n    case UnaryOpType.COS:\n      return COS;\n    case UnaryOpType.COSH:\n      return COSH;\n    case UnaryOpType.CEIL:\n      return CEIL;\n    case UnaryOpType.ELU:\n      return useVec4 ? ELU_VEC4 : ELU;\n    case UnaryOpType.ERF:\n      return ERF;\n    case UnaryOpType.EXP:\n      return EXP;\n    case UnaryOpType.EXPM1:\n      return EXPM1;\n    case UnaryOpType.FLOOR:\n      return FLOOR;\n    case UnaryOpType.IS_FINITE:\n      return IS_FINITE;\n    case UnaryOpType.IS_INF:\n      return IS_INF;\n    case UnaryOpType.IS_NAN:\n      return IS_NAN;\n    case UnaryOpType.LINEAR:\n      return LINEAR;\n    case UnaryOpType.LOG:\n      return LOG;\n    case UnaryOpType.LOG1P:\n      return LOG1P;\n    case UnaryOpType.LOGICAL_NOT:\n      return LOGICAL_NOT;\n    case UnaryOpType.NEG:\n      return NEG;\n    case UnaryOpType.LEAKYRELU:\n      return useVec4 ? LEAKYRELU_VEC4 : LEAKYRELU;\n    case UnaryOpType.RECIPROCAL:\n      return RECIPROCAL;\n    case UnaryOpType.RELU:\n      return useVec4 ? RELU_VEC4 : RELU;\n    case UnaryOpType.RELU6:\n      return useVec4 ? RELU6_VEC4 : RELU6;\n    case UnaryOpType.ROUND:\n      return ROUND;\n    case UnaryOpType.RSQRT:\n      return RSQRT;\n    case UnaryOpType.SELU:\n      return SELU;\n    case UnaryOpType.SIGMOID:\n      return SIGMOID;\n    case UnaryOpType.SIGN:\n      return SIGN;\n    case UnaryOpType.SIN:\n      return SIN;\n    case UnaryOpType.SINH:\n      return SINH;\n    case UnaryOpType.SOFTPLUS:\n      return SOFTPLUS;\n    case UnaryOpType.SQRT:\n      return SQRT;\n    case UnaryOpType.SQUARE:\n      return SQUARE;\n    case UnaryOpType.STEP:\n      return STEP;\n    case UnaryOpType.TAN:\n      return TAN;\n    case UnaryOpType.TANH:\n      return TANH;\n    case UnaryOpType.TO_INT:\n      return TO_INT;\n\n    default:\n      throw new Error(`BinaryType ${type} is not implemented!`);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getUnaryOpString, UnaryOpType} from './unary_op_util';\nimport {typeSnippet} from './webgpu_program';\n\nexport function activationFnSnippet(\n    activation: backend_util.Activation, hasPreluActivationWeights = false,\n    packed = false, coordsLength = 3): string {\n  if (activation === null) {\n    return '';\n  }\n\n  let activationOpSnippet = '';\n  if (activation === 'linear') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LINEAR);\n  } else if (activation === 'relu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU, packed);\n  } else if (activation === 'elu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.ELU, packed);\n  } else if (activation === 'relu6') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.RELU6, packed);\n  } else if (activation === 'prelu') {\n    activationOpSnippet = getBinaryOpString(BinaryOpType.PRELU, packed);\n  } else if (activation === 'sigmoid') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.SIGMOID, packed);\n  } else if (activation === 'leakyrelu') {\n    activationOpSnippet = getUnaryOpString(UnaryOpType.LEAKYRELU, packed);\n  } else {\n    throw new Error(`Activation ${\n        activation} has not been implemented for the WebGPU backend.`);\n  }\n  const elementSize = packed ? 4 : 1;\n  const dataType = typeSnippet(elementSize);\n  let activationFnSnippet = '';\n  if (hasPreluActivationWeights) {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${\n        dataType} {\n        let b = getPreluActivationWeightsByOutputCoords(coords);\n        ${activationOpSnippet}\n      }`;\n  } else {\n    activationFnSnippet = `\n      fn activation(a : ${dataType}, coords : vec${coordsLength}<i32>) -> ${\n        dataType} {\n        ${activationOpSnippet}\n      }`;\n  }\n  return activationFnSnippet;\n}\n\nexport function biasActivationSnippet(\n    hasBias: boolean, activation: backend_util.Activation): string {\n  return `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, typeSnippet, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkgroupInfoForMatMul} from './webgpu_util';\n\nexport function matMulReadFnSource(\n    transposeA: boolean, transposeB: boolean, fitAOuter = false,\n    fitBOuter = false, fitInner = false, component = 1) {\n  util.assert(\n      transposeA && component === 1 || !transposeA,\n      () => `transposeA ${transposeA} is not compatible with component size ${\n          component}`);\n  const sampleA = `\n      ${\n      transposeA ? `value = getA(batch, col, row);` :\n                   `value = getA(batch, row, col);`}\n\n    `;\n  const sampleB = transposeB ? `value = getB(batch, col, row);` :\n                               `value = getB(batch, row, col);`;\n\n  return `\n  fn mm_readA(batch: i32, row: i32, col: i32) -> ${typeSnippet(component)} {\n    var value = ${typeSnippet(component)}(0.0);\n    ${\n      fitAOuter && fitInner ?\n          sampleA :\n          `\n    ${\n              transposeA ?\n                  `if(row < uniforms.dimAOuter && col < uniforms.dimInner)` :\n                  `if(row < uniforms.aShape[1] && col < uniforms.aShape[2])`}\n    {\n      ${sampleA}\n    }\n    `}\n    return value;\n  }\n\n  fn mm_readB(batch: i32, row: i32, col: i32) -> ${typeSnippet(component)} {\n    var value = ${typeSnippet(component)}(0.0);\n    ${sampleB}\n    return value;\n  }\n  `;\n}\n\nexport function matMulReadWriteFnSource(\n    hasBias: boolean, activation: backend_util.Activation, transposeA: boolean,\n    transposeB: boolean, fitAOuter = false, fitBOuter = false, fitInner = false,\n    component = 1) {\n  return `\n  ${\n      matMulReadFnSource(\n          transposeA, transposeB, fitAOuter, fitBOuter, fitInner, component)}\n  fn mm_write(batch: i32, row: i32, col: i32, valueIn: ${\n      typeSnippet(component)}) {\n    ${\n      fitAOuter && fitBOuter ?\n          '' :\n          'if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)'}\n    {\n      var value = valueIn;\n      let coords = vec3<i32>(batch, row, col);\n      ${biasActivationSnippet(hasBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], value);\n    }\n  }\n  `;\n}\n\nconst writeDataToSubAVec4Snippet =\n    (transpose: boolean, innerElementSize: number) => {\n      if (transpose) {\n        return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol * ${innerElementSize});\n        `;\n\n      } else {\n        return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRow + innerRow,\n          kStart + inputCol * ${innerElementSize});\n        `;\n      }\n    };\n\nconst calculateResultSnippet =\n    (transposeA: boolean, innerElementSize: number, rowPerThread: number,\n     tileInner: number) => {\n      if (transposeA) {\n        return `\n      for (var k = 0; k < ${tileInner}; k++) {\n        let BCached0 = mm_Bsub[k][tileCol];\n        let ACached0 = mm_Asub[k][localRow];\n        for (var i = 0; i < ${rowPerThread}; i++) {\n          acc[i] = fma(BCached0, vec4<f32>(ACached0[i]), acc[i]);\n        }\n      }`;\n      } else {\n        let bCachedStr = '';\n        let accStr = '';\n        for (let i = 0; i < innerElementSize; i++) {\n          bCachedStr += `let BCached${i} = mm_Bsub[k * ${innerElementSize} + ${\n              i}][tileCol];`;\n          accStr +=\n              `acc[i] = fma(BCached${i}, vec4<f32>(ACached[${i}]), acc[i]);`;\n        }\n        return `\n      for (var k = 0; k < ${tileInner / innerElementSize}; k++) {\n        ${bCachedStr}\n        for (var i = 0; i < ${rowPerThread}; i++) {\n          let ACached = mm_Asub[tileRow + i][k];\n          ${accStr}\n        }\n      }`;\n      }\n    };\n\nexport function makeMatMulPackedVec4Source(\n    workPerThread: number[], workgroupSize: [number, number, number],\n    transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32,\n    broadcastBatch = false): string {\n  const tileAOuter = workgroupSize[1] * workPerThread[1];\n  const tileBOuter = workgroupSize[0] * workPerThread[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  const innerElementSize = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n  const rowPerThread = workPerThread[1];\n  const colPerThread = workPerThread[0];\n  util.assert(\n      ((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n       (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n          tileAWidth % workgroupSize[0] === 0 &&\n          tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4,\n      () => `If transposeA ${transposeA} is true, innerElementSize ${\n          innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n          Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n      tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n          workgroupSize[0]}. tileInner ${\n          tileInner} must be divisible by workgroupSize[1] ${\n          workgroupSize[1]}. colPerThread ${workPerThread[0]} must be 4.`);\n  return `\n  var<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${\n      tileAWidth / innerElementSize}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${\n      tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\n  ${main()} {\n    let localRow = i32(localId.y);\n    let tileRow = localRow * ${rowPerThread};\n    let tileCol = i32(localId.x);\n\n    let globalRow = i32(globalId.y) * ${rowPerThread};\n    let globalCol = i32(globalId.x) * ${colPerThread};\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let batchA = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.aShape[0]'};\n    let batchB = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.bShape[0]'};\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n    let numTiles = ${\n      splitK ? `${Math.ceil(splitedDimInner / tileInner)}` :\n               `(uniforms.dimInner - 1) / ${tileInner} + 1`};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc: array<vec4<f32>, ${rowPerThread}>;\n\n    // Loop over shared dimension.\n    let tileRowB = localRow * ${rowPerThreadB};\n    for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n            let inputRow = tileRow + innerRow;\n            let inputCol = tileCol;\n            ${writeDataToSubAVec4Snippet(transposeA, innerElementSize)}\n        }\n\n        // Load one tile of B into local memory.\n        for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow++) {\n            let inputRow = tileRowB + innerRow;\n            let inputCol = tileCol;\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB, kStart + inputRow, globalCol);\n        }\n        kStart = kStart + ${tileInner};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        ${\n      calculateResultSnippet(\n          transposeA, innerElementSize, rowPerThread, tileInner)}\n        workgroupBarrier();\n    }\n\n    for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n    }\n  }`;\n}\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          kStart + inputRow,\n          globalRowStart + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batchA,\n          globalRowStart + inputRow,\n          kStart + inputCol);\n        `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) => {\n  return transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' :\n\n                      'let ACached = mm_Asub[tileRow + innerRow][k];';\n};\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport function makeMatMulPackedSource(\n    workPerThread: number[], workgroupSize: [number, number, number],\n    transposeA = false, tileInner = 32, splitK = false, splitedDimInner = 32,\n    sequentialAccessByThreads = false, broadcastBatch = false): string {\n  const tileAOuter = workPerThread[1] * workgroupSize[1];\n  const tileBOuter = workPerThread[0] * workgroupSize[0];\n  const tileAWidth = transposeA ? tileAOuter : tileInner;\n  const tileAHight = transposeA ? tileInner : tileAOuter;\n  util.assert(\n      tileAHight % workgroupSize[1] === 0 &&\n          tileAWidth % workgroupSize[0] === 0 &&\n          tileInner % workgroupSize[1] === 0,\n      () => `tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n          workgroupSize[1]}, tileAWidth ${\n          tileAWidth} must be divisible by workgroupSize[0]${\n          workgroupSize[0]}, tileInner ${\n          tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n  const rowPerThreadA = tileAHight / workgroupSize[1];\n  const colPerThreadA = tileAWidth / workgroupSize[0];\n  const rowPerThreadB = tileInner / workgroupSize[1];\n  const rowPerThread = workPerThread[1];\n  const colPerThread = workPerThread[0];\n  const matmulSnippet = sequentialAccessByThreads ?\n      `\n      let localRow = i32(localId.y);\n      let localCol = i32(localId.x);\n      let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n      let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        for (var inputRow = localRow; inputRow < ${\n          tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${\n          tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n            ${writeDataToSubASnippet(transposeA)}\n          }\n        }\n        // Load one tile of B into local memory.\n        for (var inputRow = localRow; inputRow < ${\n          tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n              for (var inputCol = localCol; inputCol < ${\n          tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n            mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n              kStart + inputRow,\n              globalColStart + inputCol);\n          }\n        }\n        kStart = kStart + ${tileInner};\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        var BCached : array<f32, ${colPerThread}>;\n        for (var k = 0; k < ${tileInner}; k++) {\n          for (var inner = 0; inner < ${colPerThread}; inner++) {\n            BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n          }\n          for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n            let ACached = ${\n          transposeA ?\n              `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n              `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n            for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n              acc[innerRow][innerCol] =\n                  fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n            }\n          }\n        }\n        workgroupBarrier();\n      }\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n        }\n      }\n      ` :\n      `\n  let tileRow = i32(localId.y) * ${rowPerThread};\n  let tileCol = i32(localId.x) * ${colPerThread};\n\n  let globalRow = i32(globalId.y) * ${rowPerThread};\n  let globalCol = i32(globalId.x) * ${colPerThread};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let tileRowA = i32(localId.y) * ${rowPerThreadA};\n  let tileColA = i32(localId.x) * ${colPerThreadA};\n  let tileRowB = i32(localId.y) * ${rowPerThreadB};\n  // Loop over shared dimension.\n  for (var t = 0; t < numTiles; t++) {\n    // Load one tile of A into local memory.\n    for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol++) {\n        let inputRow = tileRowA + innerRow;\n        let inputCol = tileColA + innerCol;\n        ${writeDataToSubASnippet(transposeA)}\n      }\n    }\n\n    // Load one tile of B into local memory.\n    for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow++) {\n      for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n        let inputRow = tileRowB + innerRow;\n        let inputCol = tileCol + innerCol;\n        mm_Bsub[inputRow][inputCol] = mm_readB(batchB,\n          kStart + inputRow,\n          globalCol + innerCol);\n      }\n    }\n    kStart = kStart + ${tileInner};\n    workgroupBarrier();\n\n    // Compute acc values for a single thread.\n    var BCached : array<f32, ${colPerThread}>;\n    for (var k = 0; k < ${tileInner}; k++) {\n      for (var inner = 0; inner < ${colPerThread}; inner++) {\n        BCached[inner] = mm_Bsub[k][tileCol + inner];\n      }\n\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        ${readDataFromSubASnippet(transposeA)}\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          acc[innerRow][innerCol] =\n              fma(ACached, BCached[innerCol], acc[innerRow][innerCol]);\n        }\n      }\n    }\n\n    workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n    for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n      mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n          acc[innerRow][innerCol]);\n    }\n  }\n  `;\n\n  return `\n    var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n    var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n\n    ${main()} {\n      let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n      let batchA = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.aShape[0]'};\n      let batchB = ${\n      splitK || !broadcastBatch ? 'batch' : 'batch % uniforms.bShape[0]'};\n      let numTiles = ${\n      splitK ? `${Math.ceil(splitedDimInner / tileInner)}` :\n               `(uniforms.dimInner - 1) / ${tileInner} + 1`};\n      var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n      var acc : array<array<f32, ${colPerThread}>, ${rowPerThread}>;\n\n      // Without this initialization strange values show up in acc.\n      for (var innerRow = 0; innerRow < ${rowPerThread}; innerRow++) {\n        for (var innerCol = 0; innerCol < ${colPerThread}; innerCol++) {\n          acc[innerRow][innerCol] = 0.0;\n        }\n      }\n      ${matmulSnippet}\n    }\n  `;\n}\n\nconst readVectorASnippet = (transpose: boolean) => {\n  return transpose ? `\n      mm_readA(batchA, colA, globalRow),\n      mm_readA(batchA, colA + 1, globalRow),\n      mm_readA(batchA, colA + 2, globalRow),\n      mm_readA(batchA, colA + 3, globalRow)\n  ` :\n                     `\n      mm_readA(batchA, globalRow, colA),\n      mm_readA(batchA, globalRow, colA + 1),\n      mm_readA(batchA, globalRow, colA + 2),\n      mm_readA(batchA, globalRow, colA + 3)\n  `;\n};\n\nexport function makeVectorMatrixProductSource(\n    workgroupSize: [number, number, number], transposeA = false): string {\n  util.assert(\n      workgroupSize[1] === 1 && workgroupSize[2] === 1,\n      () => `A linear work group size is required. But got ${workgroupSize}.`);\n  const tileSize = workgroupSize[0] * 4;\n  return `\n    var<workgroup> mm_Asub : array<vec4<f32>, ${workgroupSize[0]}>;\n\n    ${main()} {\n      let tileCol = i32(localId.x);\n      let globalCol = i32(globalId.x);\n      let globalRow = i32(globalId.y);\n\n      let numTiles = (uniforms.dimInner - 1) / ${tileSize} + 1;\n      let batch = i32(globalId.z);\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      // Without this initialization strange values show up in acc.\n      var acc = 0.0;\n\n      // Loop over shared dimension.\n      for (var t = 0; t < numTiles; t++) {\n        // Load one tile of A into local memory.\n        let colA = t * ${tileSize} + tileCol * 4;\n        mm_Asub[tileCol] = vec4<f32>(${readVectorASnippet(transposeA)});\n        workgroupBarrier();\n\n        // Compute acc values for a single thread.\n        for (var k = 0; k < ${tileSize / 4}; k++) {\n          let rowB = t * ${tileSize} + k * 4;\n          let BCached = vec4<f32>(mm_readB(batchB, rowB, globalCol),\n                              mm_readB(batchB, rowB + 1, globalCol),\n                              mm_readB(batchB, rowB + 2, globalCol),\n                              mm_readB(batchB, rowB + 3, globalCol));\n\n          let ACached = mm_Asub[k];\n          acc = acc + dot(ACached, BCached);\n        }\n\n        workgroupBarrier();\n      }\n\n      mm_write(batch, globalRow, globalCol, acc);\n    }\n  `;\n}\n\nexport class MatMulPackedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  fitAOuter: boolean;\n  fitBOuter: boolean;\n  fitInner: boolean;\n  tileInner: number;\n  isVectorA: boolean;\n  isVec4: boolean;\n  outputComponent: number;\n  private sequentialAccessByThreads: boolean;\n\n  constructor(\n      aShape: [number, number, number], outputShape: [number, number, number],\n      transposeA = false, transposeB = false, bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null,\n      sequentialAccessByThreads = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [2], y: [1], z: [0]};\n    const dimInner = transposeA ? aShape[1] : aShape[2];\n    this.isVec4 = ((dimInner % 4 === 0 && !transposeA) ||\n                   (outputShape[1] % 4 === 0 && transposeA)) &&\n        outputShape[2] % 4 === 0 && !transposeB;\n    this.outputComponent = this.isVec4 ? 4 : 1;\n    this.isVectorA = outputShape[1] === 1 && !transposeA;\n\n    if (!this.isVec4 && this.isVectorA) {\n      // For makeVectorMatrixProductSource\n      this.elementsPerThread = [1, 1, 1];\n      this.workgroupSize = [32, 1, 1];\n    } else {\n      const workgroupInfo = computeWorkgroupInfoForMatMul(\n          outputShape[1], dimInner, outputShape[2], transposeA);\n      this.workgroupSize = workgroupInfo.workgroupSize;\n      this.elementsPerThread = workgroupInfo.elementsPerThread;\n    }\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        this.elementsPerThread);\n\n    const addBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.sequentialAccessByThreads = sequentialAccessByThreads;\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    [this.fitAOuter, this.fitBOuter, this.fitInner] =\n        this.getShapeFit(outputShape[1], outputShape[2], dimInner);\n    this.shaderKey = `matMulPacked_${this.elementsPerThread}_${transposeA}_${\n        transposeB}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${\n        this.fitInner}_${this.isVec4}_${this.isVectorA}_${\n        this.sequentialAccessByThreads}`;\n  }\n\n  getShapeFit(dimAOuter: number, dimBOuter: number, dimInner: number):\n      boolean[] {\n    const tileAOuter = this.workgroupSize[1] * this.elementsPerThread[1];\n    const tileBOuter = this.workgroupSize[0] * this.elementsPerThread[0];\n\n    if (!this.isVec4 && this.isVectorA) {\n      // For makeVectorMatrixProductSource\n      this.tileInner = this.workgroupSize[0] * 4;\n    } else {\n      this.tileInner = tileBOuter;\n    }\n\n    const fitAOuter = dimAOuter % tileAOuter === 0;\n    const fitBOuter = dimBOuter % tileBOuter === 0;\n    const fitInner = dimInner % this.tileInner === 0;\n    return [fitAOuter, fitBOuter, fitInner];\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${\n        activationFnSnippet(\n            this.activation, this.hasPreluActivationWeights, this.isVec4)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation,\n            false /* transposeA is implemented in makeMatMulPackedSource */,\n            this.transposeB, this.fitAOuter, this.fitBOuter, this.fitInner,\n            this.isVec4 ? 4 : 1)}\n      ${\n        this.isVec4 ?\n            makeMatMulPackedVec4Source(\n                this.elementsPerThread, this.workgroupSize, this.transposeA,\n                this.tileInner, false, null, true) :\n            (this.isVectorA ? makeVectorMatrixProductSource(\n                                  this.workgroupSize, this.transposeA) :\n                              makeMatMulPackedSource(\n                                  this.elementsPerThread, this.workgroupSize,\n                                  this.transposeA, this.tileInner, false, null,\n                                  this.sequentialAccessByThreads, true))}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet} from './activation_util';\nimport {matMulReadWriteFnSource} from './matmul_packed_webgpu';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport function makeMatMulReduceSource(workgroupSizeX: number): string {\n  return `\n    var<workgroup> sumValues : array<f32, ${workgroupSizeX}>;\n    ${main()} {\n      let coords = getOutputCoords();\n      let batch = coords[0];\n      let batchA = batch % uniforms.aShape[0];\n      let batchB = batch % uniforms.bShape[0];\n      let row = coords[1];\n      let col = coords[2];\n      var sum = 0.0;\n      let Length = uniforms.dimInner;\n      for (var k = i32(localId.x); k < Length; k = k + ${workgroupSizeX}) {\n        let dataA = mm_readA(batchA, row, k);\n        let dataB = mm_readB(batchB, k, col);\n        sum = sum + dataA * dataB;\n      }\n      sumValues[localId.x] = sum;\n      workgroupBarrier();\n\n      for(var currentSize = ${workgroupSizeX / 2}u; currentSize > 1u;\n          currentSize = currentSize / 2u) {\n        if (localId.x < currentSize)\n        {\n          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (localId.x == 0u) {\n        sum = sumValues[0] + sumValues[1];\n        mm_write(batch, row, col, sum);\n      }\n    }\n  `;\n}\n\nexport class MatMulReduceProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n\n  constructor(\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [], y: [1, 2], z: [0]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    const addBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.shaderKey =\n        `matMulReduce_${this.activation}_${transposeA}_${transposeB}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation, this.transposeA, this.transposeB)}\n      ${makeMatMulReduceSource(this.workgroupSize[0])}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\nimport {activationFnSnippet} from './activation_util';\nimport {matMulReadWriteFnSource} from './matmul_packed_webgpu';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\n\nexport function makeMatMulSmallOutputSizeSource(\n    workgroupSize: [number, number, number]): string {\n  const tileAOuter = workgroupSize[1];\n  const tileBOuter = workgroupSize[0];\n  const tileInner = tileAOuter > tileBOuter ? tileAOuter : tileBOuter;\n  return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileInner}>, ${tileAOuter}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n\n  // If the output size is small for matrix multiplication, avoid to use vec4\n  // and handle some elements per thread to optimally utilize the ALU.\n  // Read data from global memory to registers firstly, then store them into\n  // shared memory, so it is instruction-Level parallelism for arithmetic\n  // operations and others handle IO operations between barrier api, makes ALU\n  // and load/store units work simultaneously, could improves the performance.\n  ${main()} {\n    let tileRow = i32(localId.y);\n    let tileCol = i32(localId.x);\n    let globalRow = i32(globalId.y);\n    let globalCol = i32(globalId.x);\n    let batch = i32(globalId.z);\n    let batchA = batch % uniforms.aShape[0];\n    let batchB = batch % uniforms.bShape[0];\n\n    // uniforms.dimInner should be greater than 0.\n    let numTiles = (uniforms.dimInner - 1) / ${tileInner} + 1;\n    var acc = 0.0;\n\n    var globalColA = tileCol;\n    var globalRowB = 0;\n    var regA = mm_readA(batchA, globalRow, globalColA);\n    var regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n    var regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n    globalColA = globalColA + ${tileInner};\n    globalRowB = globalRowB + ${tileInner};\n\n    for (var t = 0; t < numTiles; t = t + 1) {\n      mm_Asub[tileRow][tileCol] = regA;\n      mm_Bsub[2 * tileRow][tileCol] = regB0;\n      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;\n\n      workgroupBarrier();\n\n      regA = mm_readA(batchA, globalRow, globalColA);\n      regB0 = mm_readB(batchB, globalRowB + 2 * tileRow, globalCol);\n      regB1 = mm_readB(batchB, globalRowB + 2 * tileRow + 1, globalCol);\n      globalColA = globalColA + ${tileInner};\n      globalRowB = globalRowB + ${tileInner};\n\n      for (var k = 0; k < ${tileInner}; k = k + 1) {\n        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];\n      }\n      workgroupBarrier();\n    }\n\n    mm_write(batch, globalRow, globalCol, acc);\n  }\n  `;\n}\n\nexport class MatMulSmallOutputSizeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number] = [16, 8, 1];\n  transposeA: boolean;\n  transposeB: boolean;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n\n    this.dispatchLayout = {x: [2], y: [1], z: [0]};\n    this.dispatch = [\n      Math.ceil(outputShape[2] / this.workgroupSize[0]),\n      Math.ceil(outputShape[1] / this.workgroupSize[1]), outputShape[0]\n    ];\n\n    const addBias = bias != null;\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n    this.shaderKey =\n        `matMulSmallOutputSize_${this.activation}_${transposeA}_${transposeB}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n      ${\n        matMulReadWriteFnSource(\n            this.addBias, this.activation, this.transposeA, this.transposeB)}\n      ${makeMatMulSmallOutputSizeSource(this.workgroupSize)}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source, matMulReadFnSource} from './matmul_packed_webgpu';\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, typeSnippet, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MatMulSplitKProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A', 'B'];\n  uniforms = `dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number] = [8, 8, 1];\n  elementsPerThread: [number, number, number];\n  transposeA: boolean;\n  transposeB: boolean;\n  atomic = true;\n  outputComponent: number;\n  splitedDimInner = 128;\n\n  constructor(\n      outputShape: [number, number, number], dimInner: number,\n      transposeA = false, transposeB = false) {\n    util.assert(\n        outputShape[0] === 1,\n        () => 'MatMulSplitKProgram only supports batch = 1.');\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [2], y: [1], z: [0, 3]};\n    const isVec4 = (transposeA && this.outputShape[1] % 4 === 0 ||\n                    !transposeA && dimInner % 4 === 0) &&\n        this.outputShape[2] % 4 === 0;\n    this.elementsPerThread = [4, 4, this.splitedDimInner];\n    this.outputComponent = isVec4 ? 4 : 1;\n    if (!isVec4) {\n      if (this.outputShape[1] < 16) {\n        this.elementsPerThread[1] = 1;\n      }\n      if (this.outputShape[2] < 16) {\n        this.elementsPerThread[0] = 1;\n      }\n    }\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout,\n        [\n          this.outputShape[0], this.outputShape[1], this.outputShape[2],\n          dimInner\n        ],\n        this.workgroupSize, this.elementsPerThread);\n\n    this.transposeA = transposeA;\n    this.transposeB = transposeB;\n    this.shaderKey = `matMulSplitK_${transposeA}_${transposeB}_${\n        this.elementsPerThread}_${this.outputComponent}`;\n  }\n\n  getUserCode(): string {\n    const component = this.outputComponent;\n    const userCode = `\n      ${\n        matMulReadFnSource(\n            false, this.transposeB, false, false, false, component)}\n      fn mm_write(batch: i32, row : i32, col : i32, value : ${\n        typeSnippet(component)}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n          let coords = vec3<i32>(batch, row, col);\n          let flatIndex = getOutputIndexFromCoords(coords);\n          // The problem is that we should initialize output to zero before using.\n          // Otherwise, the original value will be added to the result.\n          for (var i = 0; i < ${component}; i = i + 1) {\n            ${\n        atomicAddSnippet(\n            '&result[flatIndex + i]', `${component > 1 ? 'value[i]' : 'value'}`,\n            'float32')}\n          }\n        }\n      }\n      ${\n        component === 4 ? makeMatMulPackedVec4Source(\n                              this.elementsPerThread, this.workgroupSize,\n                              this.transposeA, 32, true, this.splitedDimInner) :\n                          makeMatMulPackedSource(\n                              this.elementsPerThread, this.workgroupSize,\n                              this.transposeA, 32, true, this.splitedDimInner)}\n    `;\n    return userCode;\n  }\n}\n\nexport class BiasActivationProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  uniforms = '';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  private addBias: boolean;\n  private activation: backend_util.Activation;\n  private hasPreluActivationWeights: boolean;\n\n  constructor(\n      outputShape: number[], bias: TensorInfo = null,\n      activation: backend_util.Activation = null,\n      preluActivationWeights: TensorInfo = null) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.addBias = bias != null;\n    this.hasPreluActivationWeights = preluActivationWeights != null;\n    this.activation = activation;\n    if (this.addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (this.hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.shaderKey = `biasActivation_${activation}`;\n  }\n\n  getUserCode(): string {\n    return `\n    ${activationFnSnippet(this.activation, this.hasPreluActivationWeights)}\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        var value = getXByOutputIndex(index);\n        ${biasActivationSnippet(this.addBias, this.activation)}\n        setOutputAtIndex(index, value);\n      }\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FillProgram implements WebGPUProgram {\n  variableNames: string[] = [];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'value : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'fill';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        setOutputAtIndex(index, uniforms.value);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FillProgram} from '../fill_webgpu';\n\nexport function fill(args: {backend: WebGPUBackend, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape);\n    const uniformData = [{type: 'float32', data: [value as number]}];\n    return backend.runWebGPUProgram(program, [], dtype, uniformData);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgpu',\n  kernelFunc: fill as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function reshape(\n    args: {inputs: ReshapeInputs, backend: WebGPUBackend, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  // Backend needs to track refCount for the dataId for reshape op\n  args.backend.incRef(x.dataId);\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgpu',\n  kernelFunc: reshape as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcast_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MatMulPackedProgram} from '../matmul_packed_webgpu';\nimport {MatMulReduceProgram} from '../matmul_reduce_webgpu';\nimport {MatMulSmallOutputSizeProgram} from '../matmul_small_output_size_webgpu';\nimport {BiasActivationProgram, MatMulSplitKProgram} from '../matmul_splitK_webgpu';\nimport {WebGPUProgram} from '../webgpu_program';\nimport {MatMulProgramType} from '../webgpu_util';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: WebGPUBackend,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(\n      a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const inputs: TensorInfo[] = [a3d, b3d];\n  const dimensions = [\n    {type: 'int32', data: [outerShapeA]}, {type: 'int32', data: [outerShapeB]},\n    {type: 'int32', data: [innerShapeA]}\n  ];\n\n  let program: WebGPUProgram;\n  let out: TensorInfo;\n  const outputShape: [number, number, number] =\n      [batchDim, outerShapeA, outerShapeB];\n  let matmulProgramType = env().get('WEBGPU_MATMUL_PROGRAM_TYPE') as number;\n  if (matmulProgramType < 0) {\n    // Usually increasing workgroups is a good way to gain more performance for\n    // few workgroups by tiling 32x32 (default matmul algorithm). Currently,\n    // there are three ways to increase workgroups. 1) MatMulReduceProgram,\n    // which is used only when the output size is very small (128 for now). 2)\n    // MatMulSplitKProgram, increasing workgroups by spliting K. 3)\n    // MatMulSmallOutputSizeProgram, increasing workgroups by small tile size.\n    // For different devices, the minimum optimal workgroups may be different.\n    // So here we set a |thresholdToIncreaseWorkgroups| to indicate whether we\n    // need to increase workgroups. And the literal number is an empirical\n    // value.\n    const thresholdFlagValue =\n        env().getNumber('WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL');\n    const thresholdToIncreaseWorkgroups = thresholdFlagValue > 0 ?\n        thresholdFlagValue :\n        backend.thresholdToIncreaseWorkgroups;\n    const workgroupsBy32x32 =\n        batchDim * Math.ceil(outerShapeA / 32) * Math.ceil(outerShapeB / 32);\n    const hasFewWorkgroups =\n        workgroupsBy32x32 <= thresholdToIncreaseWorkgroups ||\n        (outerShapeA <= 8 &&\n         workgroupsBy32x32 <= thresholdToIncreaseWorkgroups * 2);\n    if (hasFewWorkgroups) {\n      if (batchDim * outerShapeA * outerShapeB <= 128) {\n        matmulProgramType = MatMulProgramType.MatMulReduceProgram;\n      } else if (batchDim === 1 && innerShapeB >= 2000) {\n        matmulProgramType = MatMulProgramType.MatMulSplitKProgram;\n      } else {\n        matmulProgramType = MatMulProgramType.MatMulSmallOutputSizeProgram;\n      }\n    } else {\n      matmulProgramType = MatMulProgramType.MatMulPackedProgram;\n    }\n  }\n\n  switch (matmulProgramType) {\n    case MatMulProgramType.MatMulReduceProgram:\n      program = new MatMulReduceProgram(\n          outputShape, transposeA, transposeB, bias, activation,\n          preluActivationWeights);\n      break;\n    case MatMulProgramType.MatMulSplitKProgram: {\n      // The output buffer must be initailzed to zero before using since we\n      // use atomicAdd in MatMulSplitKProgram.\n      out = fill(\n          {backend, attrs: {shape: outputShape, value: 0, dtype: a.dtype}});\n      program = new MatMulSplitKProgram(\n          outputShape, innerShapeB, transposeA, transposeB);\n      if (bias || activation) {\n        out =\n            backend.runWebGPUProgram(program, inputs, a.dtype, dimensions, out);\n        const biasActivationProgram = new BiasActivationProgram(\n            out.shape, bias, activation, preluActivationWeights);\n        let uniformData = null;\n        const activationInputs: TensorInfo[] = [out];\n        if (bias) {\n          activationInputs.push(bias);\n        }\n        if (preluActivationWeights) {\n          activationInputs.push(preluActivationWeights);\n        }\n        if (activation === 'leakyrelu') {\n          uniformData = [{type: 'float32', data: [leakyreluAlpha]}];\n          biasActivationProgram.uniforms += ' alpha : f32,';\n        }\n        const outActivated = backend.runWebGPUProgram(\n            biasActivationProgram, activationInputs, out.dtype, uniformData);\n        intermediates.push(out);\n        const outReshaped = reshape(\n            {inputs: {x: outActivated}, backend, attrs: {shape: outShape}});\n        intermediates.push(outActivated);\n        for (const i of intermediates) {\n          backend.disposeData(i.dataId);\n        }\n        return outReshaped;\n      }\n      break;\n    }\n    case MatMulProgramType.MatMulSmallOutputSizeProgram:\n      program = new MatMulSmallOutputSizeProgram(\n          a3dShape, b3dShape, outputShape, transposeA, transposeB, bias,\n          activation, preluActivationWeights);\n      break;\n    case MatMulProgramType.MatMulPackedProgram:\n      // Experiments show that sequential access is more friendly for Intel\n      // GPUs.\n      const sequentialAccessByThreads = backend.adapterInfo.isIntel();\n      program = new MatMulPackedProgram(\n          a3dShape, outputShape, transposeA, transposeB, bias, activation,\n          preluActivationWeights, sequentialAccessByThreads);\n      break;\n    default:\n      throw new Error(`Unsupported MatMulProgramType ${matmulProgramType}.`);\n  }\n\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (preluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  out = backend.runWebGPUProgram(program, inputs, a.dtype, dimensions, out);\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgpu',\n  kernelFunc: _fusedMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BinaryOpComplexProgram implements WebGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  op: BinaryOpType;\n  size = true;\n\n  constructor(op: BinaryOpType, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `binaryOpComplex_${op}`;\n    this.op = op;\n  }\n\n  getUserCode(): string {\n    const opStr = getBinaryOpString(this.op, false);\n    const userCode = `\n      fn binaryOpComplex(\n          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {\n        ${opStr}\n      }\n\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let areal = getARealByOutputIndex(index);\n          let aimag = getAImagByOutputIndex(index);\n          let breal = getBRealByOutputIndex(index);\n          let bimag = getBImagByOutputIndex(index);\n          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType, getBinaryOpString} from './binary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BinaryOpProgram implements WebGPUProgram {\n  dispatch: [number, number, number];\n  dispatchLayout: {x: number[]};\n  outputComponent: number;\n  op: BinaryOpType;\n  outputShape: number[];\n  shaderKey: string;\n  size = true;\n  variableNames = ['A', 'B'];\n  workgroupSize: [number, number, number];\n  variableComponents: number[];\n\n  private lastDimensionSize: number;\n  private useSharedMemoryWithA: boolean;\n  private useSharedMemoryWithB: boolean;\n  private type: string;\n\n  constructor(op: BinaryOpType, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.op = op;\n\n    this.useSharedMemoryWithA =\n        aShape.length <= 1 && bShape.length > 1 && aShape[0] < 128;\n    this.useSharedMemoryWithB =\n        bShape.length <= 1 && aShape.length > 1 && bShape[0] < 128;\n\n    if (this.useSharedMemoryWithA || this.useSharedMemoryWithB) {\n      this.outputComponent = 1;\n      this.variableComponents = [1, 1];\n      // lastDimensionSize is used as sharedBuf array size, so can not be\n      // used as uniform.\n      this.lastDimensionSize =\n          this.useSharedMemoryWithB ? bShape[0] : aShape[0];\n      this.shaderKey = `binary_${op}_${this.lastDimensionSize}`;\n      this.type = 'shared';\n      // This is an experimental value when using shared memory.\n      // Note that the maximum of workgroup X dimension is 256.\n      this.workgroupSize = [256, 1, 1];\n    } else {\n      const aDivisibleBy4 =\n          aShape.length > 0 && aShape[aShape.length - 1] % 4 === 0;\n      const bDivisibleBy4 =\n          bShape.length > 0 && bShape[bShape.length - 1] % 4 === 0;\n      if (aDivisibleBy4 && bDivisibleBy4) {\n        this.outputComponent = 4;\n        this.variableComponents = [4, 4];\n      } else if (\n          (aDivisibleBy4 &&\n           (util.isScalarShape(bShape) || bShape[bShape.length - 1] === 1)) ||\n          (bDivisibleBy4 &&\n           (util.isScalarShape(aShape) || aShape[aShape.length - 1] === 1))) {\n        this.outputComponent = 4;\n        this.variableComponents = aDivisibleBy4 ? [4, 1] : [1, 4];\n      } else {\n        this.outputComponent = 1;\n        this.variableComponents = [1, 1];\n      }\n      this.type = 'nonshared';\n      this.shaderKey = `binary_${op}_${this.variableComponents}`;\n      // TODO(jiajia.qin@intel.com): Heuristically select a good work group\n      // size.\n      this.workgroupSize = [128, 1, 1];\n    }\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.outputComponent, 1, 1]);\n  }\n\n  getUserCode(): string {\n    let userCode;\n    const dType = this.outputComponent === 4 ? 'vec4<f32>' : 'f32';\n    const opFnStr = `\n    fn binaryOperation(a : ${dType}, b : ${dType}) -> ${dType} {\n      ${getBinaryOpString(this.op, this.outputComponent === 4)}\n    };\n    `;\n\n    if (this.type === 'shared') {\n      const sharedIndexSnippet = this.lastDimensionSize > 1 ?\n          `coords[${this.outputShape.length - 1}]` :\n          '0';\n      const accessDataSnippet = this.useSharedMemoryWithB ?\n          `let a = getAByOutputIndex(index);\n          let b = sharedBuf[${sharedIndexSnippet}];` :\n          `let a = sharedBuf[${sharedIndexSnippet}];\n          let b = getBByOutputIndex(index);`;\n      userCode = `\n        ${opFnStr}\n        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;\n        ${main('index')} {\n          // Fill in the shared memory buffer.\n          let localIndex = i32(localId.x);\n          if(localIndex < ${this.lastDimensionSize}) {\n            sharedBuf[localIndex] = f32(${\n          this.useSharedMemoryWithB ? 'B' : 'A'}[localIndex]);\n          }\n          workgroupBarrier();\n\n          if(index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            ${accessDataSnippet}\n            setOutputAtIndex(index, binaryOperation(a, b));\n          }\n        }\n        `;\n    } else {\n      userCode = `\n       ${opFnStr}\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index * ${this.outputComponent});\n           let a = ${dType}(getAByOutputCoords(coords));\n           let b = ${dType}(getBByOutputCoords(coords));\n           setOutputAtIndex(index, binaryOperation(a, b));\n         }\n       }\n       `;\n    }\n\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs} = args;\n  const {x} = inputs;\n\n  args.backend.incRef(x.dataId);\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgpu',\n  kernelFunc: identity as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\n/**\n * Complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(args: {inputs: ComplexInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.tensorMap.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgpu',\n  kernelFunc: complex as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getUnaryOpString, UnaryOpType} from './unary_op_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class UnaryOpProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['A'];\n  workgroupSize: [number, number, number];\n  op: UnaryOpType;\n  uniforms?: string;\n  size = true;\n\n  constructor(outputShape: number[], op: UnaryOpType, uniforms = '') {\n    // TODO(jiajia.qin@intel.com): Heuristically select a good work group size.\n    const workgroupSizeX = 128;\n    this.workgroupSize = [workgroupSizeX, 1, 1];\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.op = op;\n    if (uniforms !== '') {\n      this.uniforms = uniforms;\n    }\n    this.shaderKey = `unary_${op}`;\n  }\n\n  getUserCode(): string {\n    return `\n      fn unaryOperation(a : f32) -> f32 {\n        ${getUnaryOpString(this.op, false)}\n      }\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let a = getAByOutputIndex(index);\n          setOutputAtIndex(index, unaryOperation(a));\n        }\n      }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TensorInfo, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BinaryOpComplexProgram} from '../binary_op_complex_webgpu';\nimport {BinaryOpType} from '../binary_op_util';\nimport {BinaryOpProgram} from '../binary_op_webgpu';\nimport {complex} from '../kernels/Complex';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\ntype UnaryKernelFuncConfig = {\n  opType: UnaryOpType,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opType Op type to create `UnaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opType, cpuKernelImpl, dtype}: UnaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webgpuBackend = backend as WebGPUBackend;\n\n    const $dtype = dtype || x.dtype;\n    if (webgpuBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webgpuBackend.tensorMap.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webgpuBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const program: UnaryOpProgram = new UnaryOpProgram(x.shape, opType);\n    return webgpuBackend.runWebGPUProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opType: BinaryOpType,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  supportsComplex?: boolean,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opType Op type to create `BinaryOpProgram`.\n * @param cpuKernelImpl Optional. Shared functionality from tfjs-backend-cpu, it\n *     will be involved when necessary.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    {opType, cpuKernelImpl, supportsComplex = false, dtype}:\n        BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webgpuBackend = backend as WebGPUBackend;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webgpuBackend.tensorMap.get(a.dataId);\n      const bData = webgpuBackend.tensorMap.get(b.dataId);\n      let real: TensorInfo, imag: TensorInfo;\n      if (opType !== BinaryOpType.MUL) {\n        [real, imag] = [\n          [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n          [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n        ].map(complexParts => {\n          const [aPart, bPart] = complexParts;\n\n          const aHandle = {\n            dataId: aPart.dataId,\n            dtype: aPart.dtype,\n            shape: a.shape\n          };\n          const bHandle = {\n            dataId: bPart.dataId,\n            dtype: bPart.dtype,\n            shape: b.shape\n          };\n\n          const program = new BinaryOpProgram(opType, a.shape, b.shape);\n          return webgpuBackend.runWebGPUProgram(\n              program, [aHandle, bHandle],\n              upcastType(aPart.dtype, bPart.dtype));\n        });\n      } else {\n        const realProgram = new BinaryOpComplexProgram(\n            BinaryOpType.COMPLEX_MULTIPLY_REAL, a.shape, b.shape);\n        const imagProgram = new BinaryOpComplexProgram(\n            BinaryOpType.COMPLEX_MULTIPLY_IMAG, a.shape, b.shape);\n\n        const inputs = [\n          {\n            dataId: aData.complexTensorInfos.real.dataId,\n            dtype: aData.complexTensorInfos.real.dtype,\n            shape: a.shape\n          },\n          {\n            dataId: aData.complexTensorInfos.imag.dataId,\n            dtype: aData.complexTensorInfos.imag.dtype,\n            shape: a.shape\n          },\n          {\n            dataId: bData.complexTensorInfos.real.dataId,\n            dtype: bData.complexTensorInfos.real.dtype,\n            shape: b.shape\n          },\n          {\n            dataId: bData.complexTensorInfos.imag.dataId,\n            dtype: bData.complexTensorInfos.imag.dtype,\n            shape: b.shape\n          }\n        ];\n\n        real = webgpuBackend.runWebGPUProgram(realProgram, inputs, 'float32');\n        imag = webgpuBackend.runWebGPUProgram(imagProgram, inputs, 'float32');\n      }\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webgpuBackend});\n\n      webgpuBackend.disposeData(real.dataId);\n      webgpuBackend.disposeData(imag.dataId);\n\n      // TODO: Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webgpuBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aData = webgpuBackend.tensorMap.get(a.dataId).values as TypedArray;\n      const bData = webgpuBackend.tensorMap.get(b.dataId).values as TypedArray;\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aData as any as Uint8Array[]) :\n          aData;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bData as any as Uint8Array[]) :\n          bData;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return webgpuBackend.makeTensorInfo(outShape, $dtype, outValues);\n    }\n    const program = new BinaryOpProgram(opType, a.shape, b.shape);\n    return webgpuBackend.runWebGPUProgram(program, [a, b], $dtype);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BitwiseAnd, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const bitwiseAndImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a & b));\n\nexport const bitwiseAnd = binaryKernelFunc(BitwiseAnd, bitwiseAndImpl);\n\nexport const bitwiseAndConfig: KernelConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'cpu',\n  kernelFunc: bitwiseAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl<I extends number | string = number,\n  O extends number | string = number>(op: SimpleUnaryOperation<I, O>):\n    SimpleUnaryImpl<I, O> {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getArrayFromDType(dtype, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction validateIndices(\n    indices: TypedArray, indicesShape: number[], numParams: number) {\n  indices.forEach((index: number, i: number) => {\n    if (index < 0 || index >= numParams) {\n      const locString =\n          util.indexToLoc(\n                  i, indicesShape.length, util.computeStrides(indicesShape))\n              .join(',');\n      throw new Error(\n          `indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\n\nfunction validateSplits(\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = (dim === paramsNestedSplits.length - 1) ?\n        numParamsDenseValues :\n        paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(\n    indices: TypedArray, indicesShape: number[],\n    paramsNestedSplits: TypedArray[], numParamsDenseValues: number) {\n  const valueSlices: Array<[number, number]> = [];\n  let numValues = 0;\n\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta =\n            outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n\n  return {outSplits, valueSlices, numValues};\n}\n\nfunction getSplits(outSplits: number[][]) {\n  const splitsOut: TypedArray[] = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits) as TypedArray;\n    splitsOut.push(splits);\n\n    outSplits[i].forEach((value, j: number) => splits[j] = value);\n  }\n\n  return splitsOut;\n}\n\nfunction computeFlatOuterDims(orig: number[], numOutDims: number) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    valueSlices: Array<[number, number]>, valueSize: number, values: TypedArray,\n    valuesShape: number[]) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\n\nfunction getValues(\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, valueSlices: Array<[number, number]>,\n    numValues: number): [TypedArray, number[]] {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n\n  const valuesOut = util.getArrayFromDType(\n                        paramsDenseValuesDType,\n                        util.sizeFromShape(valuesShape)) as TypedArray;\n\n  const numElements = paramsDenseValues.length;\n  const valueSize =\n      numElements === 0 ? 0 : (numElements / paramsDenseValuesShape[0]);\n  writeValueSlices(\n      paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize,\n      valuesOut, valuesShape);\n\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(\n    paramsNestedSplits: TypedArray[], paramsNestedSplitsShapes: number[][],\n    paramsDenseValues: TypedArray, paramsDenseValuesShape: number[],\n    paramsDenseValuesDType: DataType, indices: TypedArray,\n    indicesShape: number[],\n    outputRaggedRank: number): [TypedArray[], TypedArray, number[]] {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {outSplits, valueSlices, numValues} = makeSplits(\n      indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(\n      paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType,\n      valueSlices, numValues);\n\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst INT32_MAX = 2147483647;\n\nexport function raggedRangeImpl(\n    starts: TypedArray, startsShape: number[], startsDType: DataType,\n    limits: TypedArray, limitsShape: number[], deltas: TypedArray,\n    deltasShape: number[]): [TypedArray, TypedArray] {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes: number[] = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits =\n      util.getArrayFromDType('int32', nRows + 1) as TypedArray;\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size: number;  // The number of elements in the specified range.\n    if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n\n  const nVals = rtNestedSplits[nRows];\n\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues =\n      util.getArrayFromDType(startsDType, nVals) as TypedArray;\n\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n\n  return [rtNestedSplits, rtDenseValues];\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, broadcastTo, DataType, reshape, tidy, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  private readonly rowPartitionTypes: RowPartitionType[];\n  private readonly raggedRank: number;\n  constructor(\n      private shape: TypedArray, private shapeShape: number[],\n      private values: TypedArray, private valuesShape: number[],\n      private valuesDType: DataType, private defaultValue: TypedArray,\n      private defaultValueShape: number[],\n      private readonly rowPartitionValues: TypedArray[],\n      private readonly rowPartitionValuesShapes: number[][],\n      rowPartitionTypeStrings: string[]) {\n    this.rowPartitionTypes =\n        backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n\n  private getRowPartitionTypeByDimension(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n\n  // Returns the relationship between dimension and dimension + 1.\n  private getRowPartitionTensor(dimension: number) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n\n  private getMaxWidth(dimension: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${\n            RowPartitionType[this.getRowPartitionTypeByDimension(\n                dimension - 1)]}`);\n    }\n  }\n\n  static getMaxWidthRowSplit(rowSplit: TypedArray) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n\n  static getMaxWidthValueRowID(valueRowIds: TypedArray) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n\n  private tensorShapeFromTensor(\n      t: TypedArray, tShape: number[], isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(\n          `The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n\n  private calculateOutputSize(firstDim: number) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(\n        this.raggedRank, shape, valueShape);\n\n    const result = outputShape;\n\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  private calculateFirstParentOutputIndex(\n      firstDimension: number, outputIndexMultiplier: number,\n      firstDimensionOutput: number) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result: number[] = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension;\n         ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(\n        result.length === firstDimension,\n        () => 'Final length of result must be equal to firstDimension.');\n\n    return result;\n  }\n\n  private calculateOutputIndexRowSplit(\n      rowSplit: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowSplitSize = rowSplit.length;\n    const result: number[] = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n\n    return result;\n  }\n\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  private calculateOutputIndexValueRowID(\n      valueRowIds: TypedArray, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const indexSize = valueRowIds.length;\n    const result: number[] = [];\n    if (indexSize === 0) {\n      return [];\n    }\n\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(\n          `Got currentValueRowId=${currentValueRowId}, which is not less than ${\n              parentOutputIndex.length}`);\n    }\n\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(\n              `Got nextValueRowId=${nextValueRowId} which is not less than ${\n                  parentOutputIndex.length}`);\n        }\n\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n\n    return result;\n  }\n\n  private calculateOutputIndex(\n      dimension: number, parentOutputIndex: number[],\n      outputIndexMultiplier: number, outputSize: number) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${\n              rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(\n            rowPartitionTensor, parentOutputIndex, outputIndexMultiplier,\n            outputSize);\n      default:\n        throw new Error(\n            `Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n\n  private getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(\n            `Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n\n  compute(): [number[], TypedArray] {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error(\n          'Invalid first partition input. ' +\n          'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier: number[] = new Array(this.raggedRank + 1);\n\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape: number[] = makeShape(outputSize, false);\n    const outputTensor =\n        util.getArrayFromDType(\n            this.valuesDType, util.sizeFromShape(outputShape)) as TypedArray;\n\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(\n          firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(\n            i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n\n    return [outputShape, outputTensor];\n  }\n  setOutput(\n      raggedRank: number, outputIndex: number[], outputTensor: TypedArray,\n      outputShape: number[]) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0;  // Start of contiguous region (in values)\n    let dstStart = 0;  // Destination for contiguous region (in output)\n    let dstEnd = 0;    // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase\n              .subarray(dstEnd * valueElementSize, dstI * valueElementSize)\n              .fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\n\nfunction copyArray(dst: TypedArray, src: TypedArray, size: number) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\n\nfunction makeShape(shape: number[]|TypedArray, isPartial: boolean) {\n  const out: number[] = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n\n  return out;\n}\n\nexport function raggedTensorToTensorImpl(\n    shape: TypedArray, shapesShape: number[], values: TypedArray,\n    valuesShape: number[], valuesDType: DataType, defaultValue: TypedArray,\n    defaultValueShape: number[], rowPartitionValues: TypedArray[],\n    rowPartitionValuesShapes: number[][],\n    rowPartitionTypes: string[]): [number[], TypedArray] {\n  return new RaggedTensorToTensorOp(\n             shape, shapesShape, values, valuesShape, valuesDType, defaultValue,\n             defaultValueShape, rowPartitionValues, rowPartitionValuesShapes,\n             rowPartitionTypes)\n      .compute();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, StaticRegexReplace, StaticRegexReplaceAttrs} from '@tensorflow/tfjs-core';\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const staticRegexReplaceImpl = createSimpleUnaryImpl<string,\n  string>((x: string, attrs) => {\n    const {pattern, replaceGlobal, rewrite} =\n      attrs as unknown as StaticRegexReplaceAttrs;\n    // TODO(mattSoulanille): Don't create a regex each time.\n    return x.replace(new RegExp(pattern, replaceGlobal ? 'g' : ''), rewrite);\n});\n\nconst staticRegexReplace =\n  unaryKernelFuncFromImpl(StaticRegexReplace, staticRegexReplaceImpl);\n\nexport const staticRegexReplaceConfig: KernelConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'cpu',\n  kernelFunc: staticRegexReplace,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, DataType, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function castImpl(\n    values: TypedArray, shape: number[], inputType: DataType,\n    dtype: DataType): [number[], DataType, TypedArray] {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(shape, [], values, zero, 'bool');\n\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const [resultShape, resultType, resultData] =\n      castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as unknown as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\ninterface DefaultValueTypeMap {\n  bool: boolean;\n  int32: number;\n  float32: number;\n  string: string;\n}\n\nexport function\nscatterImpl<R extends Rank, D extends 'float32'|'int32'|'bool'|'string'>(\n    indices: TensorBuffer<R, 'int32'>, updates: TensorBuffer<R, D>,\n    shape: number[], outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[],\n    defaultValue: TensorBuffer<R, D>|DefaultValueTypeMap[D],\n    sumDupeIndices: boolean): TensorBuffer<R, D> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = (defaultValue instanceof TensorBuffer) ?\n      defaultValue :\n      buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    (outBuf.values as string[]).fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    (outBuf.values as TypedArray).fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    (outBuf.values as TypedArray).fill(+defaultValue);\n  }\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        (outBuf.values as TypedArray)[flattenIndex * sliceSize + k] +=\n            (updatesData as TypedArray)[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(\n        backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util\n            .getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(\n          backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(\n              outIndex, outputRows));\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(\n            backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(\n                i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements = new Map<string, number>();\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    const existingIndex = uniqueElements.get(element);\n    if (existingIndex != null) {\n      indices[i] = existingIndex;\n    } else {\n      const uniqueIndex = uniqueElements.size;\n      uniqueElements.set(element, uniqueIndex);\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = uniqueElements.size;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  floorDivImpl: floorDivImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  greaterImpl: greaterImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  lessImpl: lessImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  castImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  floorDivImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  prodImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  scatterImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const abs =\n    unaryKernelFunc({opType: UnaryOpType.ABS, cpuKernelImpl: simpleAbsImplCPU});\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgpu',\n  kernelFunc: abs\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const acos = unaryKernelFunc({opType: UnaryOpType.ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgpu',\n  kernelFunc: acos\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const acosh = unaryKernelFunc({opType: UnaryOpType.ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgpu',\n  kernelFunc: acosh\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nexport const addKernelFunc = binaryKernelFunc(\n    {opType: BinaryOpType.ADD, cpuKernelImpl: cpuAdd, supportsComplex: true});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgpu',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class AddNPackedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shapes: number[][]) {\n    this.outputShape = shapes[0];\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n    this.shaderKey = 'addN';\n  }\n\n  getUserCode(): string {\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`let v${variable} = get${variable}ByOutputCoords(coords);`);\n    });\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    const userCode = `\n      ${main('index')} {\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if (flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            ${snippets.join('\\n        ')}\n            setOutputAtIndex(flatIndex, ${operation});\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {AddNPackedProgram} from '../addn_packed_webgpu';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  const program = new AddNPackedProgram(shapes);\n  return backend.runWebGPUProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgpu',\n  kernelFunc: addN as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class TransposeSharedProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[]};\n  dispatch: [number, number, number];\n  // Note that the maximum number of workgroup invocations by webgpu is 256.\n  workgroupSize: [number, number, number] = [16, 16, 1];\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [0], y: [1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize, [1, 1, 1]);\n\n    this.shaderKey = 'transposeShared';\n  }\n\n  getUserCode(): string {\n    util.assert(\n        this.workgroupSize[0] === this.workgroupSize[1],\n        () => `Must be a square tile, current tile shape is ${\n            this.workgroupSize[0]} x ${this.workgroupSize[1]}`);\n    const tileSize = this.workgroupSize[0];\n    const userCode = `\n      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0] + 1}>, ${\n        this.workgroupSize[0]}>;\n      ${main()} {\n        var x = i32(workgroupId.x) * ${tileSize} + i32(localId.x);\n        var y = i32(workgroupId.y) * ${tileSize} + i32(localId.y);\n        let width = uniforms.outShape[0];\n        let height = uniforms.outShape[1];\n        if (x < width && y < height) {\n          tile[localId.y][localId.x] = f32(A[y * width + x]);\n        }\n        workgroupBarrier();\n\n        x = i32(workgroupId.y) * ${tileSize} + i32(localId.x);\n        y = i32(workgroupId.x) * ${tileSize} + i32(localId.y);\n        if (x < height && y < width) {\n          setOutputAtIndex((y * height + x), tile[localId.x]\n            [localId.y]);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TransposeProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  shaderKey: string;\n  outputShape: number[];\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  newDim: number[];\n  size = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.newDim = newDim;\n    this.shaderKey = `transpose_${newDim}`;\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            setOutputAtIndex(flatIndex, A[getIndexFromCoords${\n        this.outputShape.length}D(\n              ${dtype}(${switched}), uniforms.aShape)]);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nexport function getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = `coords.${getCoordsXYZ(i)}`;\n  }\n\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Transpose, TransposeAttrs, TransposeInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {transposeImplCPU as cpuTranspose} from '../kernel_utils/shared';\n\nimport {TransposeSharedProgram} from '../transpose_shared_webgpu';\nimport {TransposeProgram} from '../transpose_webgpu';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webgpuBackend = backend;\n\n  const xRank = x.shape.length;\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = webgpuBackend.tensorMap.get(x.dataId);\n    const values = xData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  if (x.shape.length === 2 && util.arraysEqual(perm, [1, 0])) {\n    const program = new TransposeSharedProgram(x.shape, perm);\n    return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n  const program = new TransposeProgram(x.shape, perm);\n  return webgpuBackend.runWebGPUProgram(program, [x], x.dtype);\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgpu',\n  kernelFunc: transpose as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ReduceProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'reduceSize : i32,';\n  reduceType: 'all'|'any'|'max'|'mean'|'min'|'prod'|'sum';\n  inputShape: number[];\n  size = true;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'mean'|'min'|'prod'|'sum',\n      maxComputeWorkgroupSizeX: number) {\n    this.inputShape = [reduceInfo.batchSize, reduceInfo.inSize];\n    const [outputShape, ] =\n        backend_util.computeOutAndReduceShapes(this.inputShape, [1]);\n    this.outputShape = outputShape.length === 0 ? [1] : outputShape;\n    // If reduceSize |reduceInfo.inSize| is very large, the I/O accessing will\n    // become the bottleneck. Increasing workgroupSize can reduce the times of\n    // accessing global memory. The threshold value is just to make sure the\n    // reduceSize is large enough for a bigger workgroupSize.\n    if (reduceInfo.inSize >= 32768 && maxComputeWorkgroupSizeX >= 512) {\n      this.workgroupSize = [512, 1, 1];\n    } else if (reduceInfo.inSize >= 4096) {\n      this.workgroupSize = [256, 1, 1];\n    } else {\n      this.workgroupSize = [64, 1, 1];\n    }\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    // A work group only outputs a data, so we transfer [1, 1, 1] to compute\n    // dispatch size.\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, this.outputShape, [1, 1, 1]);\n\n    this.reduceType = reduceType;\n    this.shaderKey = `reduce_${reduceType}`;\n  }\n\n  getUserCode(): string {\n    let reduceOp = ``;\n    let initValue = '0.0';\n    const workgroupSizeX = this.workgroupSize[0];\n    if (this.reduceType === 'min' || this.reduceType === 'max') {\n      reduceOp = `\n         if (isnan(candidate)) {\n          bestValue = uniforms.NAN;\n         } else if (!isnan(bestValue) && candidate ${\n          this.reduceType === 'min' ? '<' : '>'} bestValue)\n           {  bestValue = candidate; }`;\n      initValue = 'f32(x[offset])';\n    } else if (this.reduceType === 'sum' || this.reduceType === 'mean') {\n      reduceOp = ' bestValue = bestValue + candidate; ';\n    } else if (this.reduceType === 'prod') {\n      reduceOp = ' bestValue = bestValue * candidate; ';\n      initValue = '1.0';\n    } else if (this.reduceType === 'all') {\n      reduceOp = ' bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ';\n      initValue = '1.0';\n    } else if (this.reduceType === 'any') {\n      reduceOp = ' bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ';\n      initValue = '0.0';\n    }\n\n    const outputSnippet = this.reduceType === 'mean' ?\n        // tslint:disable-next-line:max-line-length\n        `setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));` :\n        `setOutputAtIndex(outputIndex, bestValue);`;\n\n    const sharedMemorySnippet = `\n         var<workgroup> xBestValues : array<f32, ${workgroupSizeX}>;\n       `;\n\n    const userCode = `\n       fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n       }\n\n       ${sharedMemorySnippet}\n       fn getOffset(outputIndex : i32) -> i32 {\n         let outputCoords = getCoordsFromIndex(outputIndex);\n         let offset = ${\n        this.outputShape.length === 1 ?\n            'outputCoords' :\n            'outputCoords[0]'} * uniforms.reduceSize;\n          return offset;\n       }\n       ${main('index')} {\n         let outputIndex = index / ${workgroupSizeX};\n         let offset = getOffset(outputIndex);\n         var bestValue = ${initValue};\n         let Length = uniforms.reduceSize;\n         let WorkPerThread = DIV_CEIL(u32(Length), ${workgroupSizeX}u);\n         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;\n             k = k + ${workgroupSizeX}) {\n           let candidate = f32(x[offset + k]);\n           ${reduceOp}\n         }\n         xBestValues[localId.x] = bestValue;\n         workgroupBarrier();\n\n         var reduceSize = min(u32(Length), ${workgroupSizeX}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            ${reduceOp}\n            xBestValues[localId.x] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (localId.x == 0u && outputIndex < uniforms.size) {\n          ${outputSnippet}\n        }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reshape} from '../kernels/Reshape';\nimport {transpose} from '../kernels/Transpose';\nimport {ReduceProgram} from '../reduce_webgpu';\n\nimport {maxImplCPU} from './shared';\nimport {prodImplCPU} from './shared';\n\ntype ReduceTypes = 'all'|'any'|'max'|'mean'|'min'|'prod'|'sum';\nconst RETURN_TYPES: {[key in ReduceTypes]?: DataType} = {\n  'mean': 'float32',\n  'all': 'bool',\n  'any': 'bool',\n};\n\nexport function reduce(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    reduceType: ReduceTypes, backend: WebGPUBackend): TensorInfo {\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n\n  let input = x;\n  if (permutedAxes != null) {\n    input = transpose({inputs: {x}, attrs: {perm: permutedAxes}, backend});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(input);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(reduceType, axes, xRank);\n\n  const [reduceOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(input.shape, axes);\n  let resOutShape = reduceOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    resOutShape = backend_util.expandShapeToKeepDim(reduceOutShape, origAxes);\n  }\n\n  let res;\n  if ((reduceType === 'max' || reduceType === 'prod') &&\n      backend.shouldExecuteOnCPU([input])) {\n    const xVals = backend.tensorMap.get(input.dataId).values as TypedArray;\n    switch (reduceType) {\n      case 'max':\n        const outValues = maxImplCPU(\n            xVals, util.sizeFromShape(reduceShape), resOutShape, x.dtype);\n        res = backend.makeTensorInfo(resOutShape, x.dtype, outValues);\n        break;\n      case 'prod':\n        const {outVals, outShape, outDtype} =\n            prodImplCPU(input.shape, input.dtype, xVals, axes);\n        res = backend.makeTensorInfo(outShape, outDtype, outVals);\n        break;\n      default:\n        throw new Error(\n            `${reduceType} CPU implementation is not yet supported.`);\n    }\n  } else {\n    const inSize = util.sizeFromShape(reduceShape);\n    const xSize = util.sizeFromShape(input.shape);\n    const batchSize = xSize / inSize;\n\n    const reduceInfo = {windowSize: inSize, inSize, batchSize, outSize: 1};\n    const dtype = RETURN_TYPES[reduceType] || sumOutType(x.dtype);\n    const uniformData = [\n      {type: 'int32', data: [inSize]},\n    ];\n    const program = new ReduceProgram(\n        reduceInfo, reduceType, backend.device.limits.maxComputeWorkgroupSizeX);\n    const reduced =\n        backend.runWebGPUProgram(program, [input], dtype, uniformData);\n    toDispose.push(reduced);\n\n    res = reshape({inputs: {x: reduced}, attrs: {shape: resOutShape}, backend});\n  }\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return res;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function all(\n    args: {inputs: AllInputs, attrs: AllAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {keepDims, axis} = attrs;\n\n  return reduce(x, axis, keepDims, 'all', backend);\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgpu',\n  kernelFunc: all as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function any(\n    args: {inputs: AnyInputs, attrs: AnyAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {keepDims, axis} = attrs;\n\n  return reduce(x, axis, keepDims, 'any', backend);\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgpu',\n  kernelFunc: any as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ArgMinMaxProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  variableNames = ['x'];\n  uniforms = 'infinityValue : f32,';\n  inputShape: number[];\n  reductionFactor: number;\n  op: string;\n  size = true;\n  private type: string;\n\n  constructor(inputShape: number[], axis: number, reduceType: 'min'|'max') {\n    const axes = [axis];\n\n    this.op = reduceType === 'min' ? '<' : '>';\n\n    // |outShape| is the shape with the removed axis\n    const [outputShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(inputShape, axes);\n\n    this.outputShape = outputShape.length === 0 ? [1] : outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    // The shared algorithm is mainly used for large reduce size. It fully\n    // utilizes the threads in one workgroup to do the reduction. However,\n    // when the reduce size is very small, it's better to use the plain\n    // algorithm to reduce the number of workgroups to speedup. The threthold\n    // can be further tuned.\n    if (util.sizeFromShape(reduceShape) < 32) {\n      this.type = 'plain';\n      this.dispatch = computeDispatch(\n          this.dispatchLayout, this.outputShape, this.workgroupSize);\n    } else {\n      this.type = 'shared';\n      // A work group only outputs a data, so we transfer [1, 1, 1] to compute\n      // dispatch size.\n      this.dispatch =\n          computeDispatch(this.dispatchLayout, this.outputShape, [1, 1, 1]);\n    }\n\n    this.inputShape = inputShape;\n    this.shaderKey = `argMinMax_${this.op}_${this.type}`;\n  }\n\n  getUserCode(): string {\n    const workgroupSizeX = this.workgroupSize[0];\n    const getInputShapeLastDim = () => {\n      if (this.inputShape.length === 1) {\n        return 'uniforms.xShape';\n      } else {\n        return `uniforms.xShape.${getCoordsXYZ(this.inputShape.length - 1)}`;\n      }\n    };\n\n    const splitOutputCoords = () => {\n      let snippet = '';\n      if (this.outputShape.length === 1) {\n        if (this.inputShape.length !== 1) {\n          snippet += 'outputCoords,';\n        }\n      } else {\n        for (let i = 0; i < this.outputShape.length; i++) {\n          snippet += `outputCoords.${getCoordsXYZ(i)},`;\n        }\n      }\n      return snippet;\n    };\n\n    if (this.type === 'shared') {\n      const sharedMemorySnippet = `\n      var<workgroup> xBestIndices : array<i32, ${workgroupSizeX}>;\n      var<workgroup> xBestValues : array<f32, ${workgroupSizeX}>;\n    `;\n      const userCode = `\n      fn DIV_CEIL(a : u32, b : u32) -> u32 {\n        return ((a - 1u) / b + 1u);\n      }\n\n      ${sharedMemorySnippet}\n\n      ${main('index')} {\n        let outputIndex = index / ${workgroupSizeX};\n        let reduceLength = ${getInputShapeLastDim()};\n\n        var bestIndex = i32(localId.x);\n        var bestValue = uniforms.infinityValue;\n        let outputCoords = getCoordsFromIndex(outputIndex);\n        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;\n            k = k + ${workgroupSizeX}) {\n          let candidate = getX(${splitOutputCoords()} k);\n          if (!isnan(candidate) && candidate ${this.op} bestValue) {\n            bestValue = candidate;\n            bestIndex = k;\n          }\n        }\n        xBestValues[localId.x] = bestValue;\n        xBestIndices[localId.x] = bestIndex;\n        workgroupBarrier();\n\n        var reduceSize = min(u32(reduceLength), ${workgroupSizeX}u);\n        for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n            currentSize = reduceSize / 2u) {\n          let interval = DIV_CEIL(reduceSize, 2u);\n          if (localId.x < currentSize) {\n            let candidate = xBestValues[localId.x + interval];\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              xBestValues[localId.x] = bestValue;\n              xBestIndices[localId.x] = xBestIndices[localId.x + interval];\n            }\n          }\n          reduceSize = interval;\n          workgroupBarrier();\n        }\n\n        if (localId.x == 0u && outputIndex < uniforms.size) {\n          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);\n        }\n      }\n    `;\n      return userCode;\n    } else {\n      const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let outputCoords = getCoordsFromIndex(index);\n          var bestIndex = 0;\n          var bestValue = getX(${splitOutputCoords()} 0);\n          let reduceLength = ${getInputShapeLastDim()};\n          for (var i = 1; i < reduceLength; i++) {\n            let candidate = getX(${splitOutputCoords()} i);\n            if (candidate ${this.op} bestValue) {\n              bestValue = candidate;\n              bestIndex = i;\n            }\n          }\n          setOutputAtIndexI32(index, bestIndex);\n        }\n      }\n      `;\n      return userCode;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: WebGPUBackend, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'max');\n  const uniformData = [{type: 'float32', data: [Number.NEGATIVE_INFINITY]}];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgpu',\n  kernelFunc: argMax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: WebGPUBackend, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n  const program = new ArgMinMaxProgram($x.shape, axes[0], 'min');\n  const uniformData = [{type: 'float32', data: [Number.POSITIVE_INFINITY]}];\n  const out = backend.runWebGPUProgram(program, [$x], 'int32', uniformData);\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgpu',\n  kernelFunc: argMin as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const asin = unaryKernelFunc({opType: UnaryOpType.ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgpu',\n  kernelFunc: asin\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const asinh = unaryKernelFunc({opType: UnaryOpType.ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgpu',\n  kernelFunc: asinh\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const atan = unaryKernelFunc({opType: UnaryOpType.ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgpu',\n  kernelFunc: atan\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const atan2 = binaryKernelFunc({opType: BinaryOpType.ATAN2});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgpu',\n  kernelFunc: atan2\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const atanh = unaryKernelFunc({opType: UnaryOpType.ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgpu',\n  kernelFunc: atanh\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class PoolWithFilterSizeEqualsOneProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = `strides : vec2<i32>,`;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'poolWithFilterSizeEqualsOne';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n\n          let xRCCorner = coords.yz * uniforms.strides;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          let value = getX(batch, xRCorner, xCCorner, d);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Pool2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms =\n      `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,`;\n  // TODO(jiajia.qin@intel.com): Dynamically choose different workgroupSize for\n  // different output shapes.\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  poolType: 'max'|'avg';\n  size = true;\n  computePositions: boolean;\n  flattenPositions: boolean;\n  includeBatchIndex: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions = false, flattenPositions = false,\n      includeBatchIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.poolType = poolType;\n    this.computePositions = computePositions;\n    this.flattenPositions = flattenPositions;\n    this.includeBatchIndex = includeBatchIndex;\n    this.shaderKey = `pool2D_${poolType}_${computePositions}_${\n        flattenPositions}_${includeBatchIndex}`;\n  }\n\n  getUserCode(): string {\n    let updateSnippet: string;\n    if (this.poolType === 'avg') {\n      updateSnippet = `resultValue = resultValue + value; count = count + 1.0;`;\n    } else if (this.computePositions) {\n      const positionStr = this.flattenPositions ?\n          (this.includeBatchIndex ?\n               `((batch * uniforms.xShape[1] + xR) * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d` :\n               `(xR * uniforms.xShape[2] + xC) * uniforms.xShape[3] + d`) :\n          `wR * uniforms.filterDims.y + wC`;\n      updateSnippet = `let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${positionStr};\n      }`;\n    } else {\n      updateSnippet = `resultValue = max(value, resultValue);`;\n    }\n\n    let returnValue = `resultValue`;\n    if (this.poolType === 'avg') {\n      returnValue = `resultValue / max(count, 1.0)`;\n    }\n\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let batch = coords[0];\n          let d = coords[3];\n          let xRCCorner = vec2<i32>(coords.yz) * uniforms.strides - uniforms.pads;\n          let xRCorner = xRCCorner.x;\n          let xCCorner = xRCCorner.y;\n\n          ${\n        this.computePositions ?\n            `var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;` :\n            `var resultValue = ${\n                this.poolType === 'avg' ? '0.0' : '-1.0 / pow(10.0, -20.0)'};`}\n\n          var count = 0.0;\n          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilations.x) {\n            let xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilations.y) {\n              let xC = xCCorner + wC;\n              if (xC < 0 || xC >= uniforms.convDims.y) {\n                continue;\n              }\n\n              let value = getX(batch, xR, xC, d);\n              ${updateSnippet}\n            }\n          }\n\n          ${\n        this.computePositions ? `setOutputAtIndexI32(index, maxPosition);` :\n                                `setOutputAtIndex(index, ${returnValue});`}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nexport class Pool3DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms =\n      `strides : vec3<i32>, pads : vec3<i32>, convDims : vec3<i32>, filterDims : vec3<i32>,`;\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  poolType: 'max'|'avg';\n  size = true;\n  computePositions: boolean;\n  flattenPositions: boolean;\n  includeBatchIndex: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions = false, flattenPositions = false,\n      includeBatchIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.poolType = poolType;\n    this.computePositions = computePositions;\n    this.flattenPositions = flattenPositions;\n    this.includeBatchIndex = includeBatchIndex;\n    this.shaderKey = `pool3D_${poolType}_${computePositions}_${\n        flattenPositions}_${includeBatchIndex}`;\n  }\n\n  getUserCode(): string {\n    let updateSnippet: string;\n    if (this.poolType === 'avg') {\n      updateSnippet = `resultValue += value; count += 1.0;`;\n    } else if (this.computePositions) {\n      const positionStr = this.flattenPositions ?\n          (this.includeBatchIndex ?\n               `(((batch * uniforms.xShape.y + xD) * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch` :\n               `((xD * uniforms.xShape.z + xR) * uniforms.xShape.w + xC) * uniforms.xShape.u + ch`) :\n          `wD * uniforms.filterDims.y * uniforms.filterDims.y + wR * uniforms.filterDims.z + wC`;\n      updateSnippet = `let currMaxValue = mix(value, maxValue, maxValueFound);\n      if (value >= currMaxValue) {\n        maxValue = value;\n        maxValueFound = 1.0;\n        maxPosition = ${positionStr};\n      }`;\n    } else {\n      updateSnippet = `resultValue = max(value, resultValue);`;\n    }\n\n    let returnValue = `resultValue`;\n    if (this.poolType === 'avg') {\n      returnValue = `resultValue / max(count, 1.0)`;\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let batch = coords.x;\n          let ch = coords.u;\n\n          let xCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n          let xDCorner = xCorner.x;\n          let xRCorner = xCorner.y;\n          let xCCorner = xCorner.z;\n\n          ${\n        this.computePositions ?\n            `var maxValue = 0.0;\n            var maxValueFound = 0.0;\n            var maxPosition = 0;` :\n            `var resultValue = ${\n                this.poolType === 'avg' ? '0.0' : '-1.0 / pow(10.0, -20.0)'};`}\n\n          var count = 0.0;\n          for (var wD = 0; wD < uniforms.filterDims.x; wD++) {\n            let xD = xDCorner + wD;\n            if (xD < 0 || xD >= uniforms.convDims.x) {\n              continue;\n            }\n\n            for (var wR = 0; wR < uniforms.filterDims.y; wR++) {\n              let xR = xRCorner + wR;\n              if (xR < 0 || xR >= uniforms.convDims.y) {\n                continue;\n              }\n\n              for (var wC = 0; wC < uniforms.filterDims.z; wC++) {\n                let xC = xCCorner + wC;\n                if (xC < 0 || xC >= uniforms.convDims.z) {\n                  continue;\n                }\n\n                let value = getX(batch, xD, xR, xC, ch);\n                ${updateSnippet}\n              }\n            }\n          }\n\n          ${\n        this.computePositions ? `setOutputAtIndexI32(index, maxPosition);` :\n                                `setOutputAtIndex(index, ${returnValue});`}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: WebGPUBackend, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  return reduce(x, reductionIndices, keepDims, 'max', backend);\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgpu',\n  kernelFunc: max as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function mean(\n    args: {inputs: MeanInputs, attrs: MeanAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {keepDims, axis} = attrs;\n\n  return reduce(x, axis, keepDims, 'mean', backend);\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgpu',\n  kernelFunc: mean as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {PoolWithFilterSizeEqualsOneProgram} from '../pool_filtersizeone_webgpu';\nimport {Pool2DProgram} from '../pool_webgpu';\n\nimport {identity} from './Identity';\nimport {max} from './Max';\nimport {mean} from './Mean';\nimport {reshape} from './Reshape';\n\ntype PoolType = 'max'|'avg';\nexport function poolImpl(\n    x: TensorInfo, convInfo: backend_util.Conv2DInfo, poolType: PoolType,\n    backend: WebGPUBackend): TensorInfo {\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n\n  if (convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.filterHeight === convInfo.inHeight && convInfo.batchSize === 1 &&\n      convInfo.padInfo.type === 'VALID') {\n    const length = x.shape.length;\n    const reshapeX = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: [\n          x.shape[length - 3] * x.shape[length - 2] /* height * width */,\n          x.shape[length - 1] /* channel */\n        ]\n      }\n    });\n    let reduceX;\n    if (poolType === 'avg') {\n      reduceX = mean(\n          {inputs: {x: reshapeX}, backend, attrs: {axis: 0, keepDims: false}});\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      reduceX = max({\n        inputs: {x: reshapeX},\n        backend,\n        attrs: {reductionIndices: 0, keepDims: false}\n      });\n    }\n\n    const result = reshape(\n        {inputs: {x: reduceX}, backend, attrs: {shape: convInfo.outShape}});\n    backend.disposeData(reshapeX.dataId);\n    backend.disposeData(reduceX.dataId);\n    return result;\n  }\n\n  let program: Pool2DProgram|PoolWithFilterSizeEqualsOneProgram;\n  const dimensions =\n      [{type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}];\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1) {\n    program = new PoolWithFilterSizeEqualsOneProgram(convInfo);\n  } else {\n    if (poolType === 'avg') {\n      program = new Pool2DProgram(convInfo, 'avg');\n    } else {\n      util.assert(poolType === 'max', () => `Invalid pool type ${poolType}`);\n      program = new Pool2DProgram(convInfo, 'max');\n    }\n\n    dimensions.push(\n        {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        },\n        {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]}, {\n          type: 'int32',\n          data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n        });\n  }\n\n  return backend.runWebGPUProgram(program, [x], x.dtype, dimensions);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {poolImpl} from './Pool_impl';\n\nexport function avgPool(\n    args: {inputs: AvgPoolInputs, backend: WebGPUBackend, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  return poolImpl(x, convInfo, 'avg', backend);\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgpu',\n  kernelFunc: avgPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Pool3DProgram} from '../pool_webgpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: WebGPUBackend,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg');\n  const dimensions = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data:\n          [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    }\n  ];\n  return backend.runWebGPUProgram(avgPoolProgram, [x], x.dtype, dimensions);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgpu',\n  kernelFunc: avgPool3D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class AvgPool2DBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy'];\n  uniforms =\n      `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, avgMultiplier : f32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `avgPool2DBackprop`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR = wR + uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC = wC + uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n\n            dotProd = dotProd + dyValue * uniforms.avgMultiplier;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy'];\n  uniforms = `strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n       outDepth : i32, outHeight : i32, outWidth : i32, avgMultiplier : f32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `avgPool3DBackprop`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              dotProd += dyValue * uniforms.avgMultiplier;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: WebGPUBackend,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const program = new AvgPool3DBackpropProgram(convInfo);\n  const avgMultiplier =\n      1 / (convInfo.filterDepth * convInfo.filterHeight * convInfo.filterWidth);\n  const uniformData = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth - 1 - convInfo.padInfo.front,\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    },\n    {type: 'int32', data: [convInfo.outDepth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'float32', data: [avgMultiplier]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], x.dtype, uniformData);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgpu',\n  kernelFunc: avgPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_webgpu';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {assertNotComplex} from '../webgpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: WebGPUBackend,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const program = new AvgPool2DBackpropProgram(convInfo);\n  const avgMultiplier = 1 / (convInfo.filterHeight * convInfo.filterWidth);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    },\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'float32', data: [avgMultiplier]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], x.dtype, uniformData);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgpu',\n  kernelFunc: avgPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgpu',\n  kernelFunc: batchMatMul as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getCoordsXYZ, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SliceProgram implements WebGPUProgram {\n  variableNames = ['source'];\n  uniforms: string;\n  outputShape: number[];\n  shaderKey: string;\n  rank: number;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  start: number[];\n  size = true;\n\n  constructor(start: number[], destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.start = start;\n    this.uniforms = `start : ${getCoordsDataType(start.length)}, `;\n    this.shaderKey = 'slice';\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getCoords(this.rank);\n    let coordSum;\n    if (this.start.length === 1) {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc = uniforms.start + coords;`;\n      });\n    } else {\n      coordSum = this.outputShape.map((_, i) => {\n        return `sourceLoc.${coords[i]} = uniforms.start.${\n            getCoordsXYZ(i)} + coords.${coords[i]};`;\n      });\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          var sourceLoc : ${dtype};\n          let coords = getCoordsFromIndex(index);\n          ${coordSum.join('\\n')}\n          setOutputAtIndex(index, getSource(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(coord => `sourceLoc.${coord}`).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_webgpu';\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: WebGPUBackend, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTensorData = backend.tensorMap.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTensorData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // TODO(xing.xu): Add shadow slice support.\n  const program = new SliceProgram($begin, $size);\n  const uniformData = [{type: 'int32', data: $begin}];\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgpu',\n  kernelFunc: slice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: WebGPUBackend,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGPU backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgpu',\n  kernelFunc: batchToSpaceND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nconst writeSnippet = `\n  fn bincount_write(index: i32, value: f32) {\n    ${atomicAddSnippet('&result[index]', 'value', 'float32')}\n  }\n`;\n\nconst binaryWriteSnippet = `\n  fn bincount_write(index: i32, value: f32) {\n    atomicStore(&result[index], bitcast<i32>(value));\n  }\n`;\n\nexport class BincountProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'binCountSize : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  hasWeights = true;\n  binaryOutput = false;\n  rank: number;\n\n  constructor(\n      shape: [number]|[number, number], hasWeights: boolean,\n      binaryOutput = false) {\n    this.outputShape = shape;\n    this.rank = shape.length;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.binaryOutput = binaryOutput;\n    if (binaryOutput) {\n      this.atomic = false;\n    }\n    this.hasWeights = hasWeights;\n    if (this.hasWeights) {\n      this.variableNames.push('w');\n    }\n    this.shaderKey =\n        `bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${this.binaryOutput ? binaryWriteSnippet : writeSnippet}\n  ${main('index')} {\n    ${\n        this.rank === 1 ?\n            `if (index < uniforms.xShape) {\n      let indexVal = i32(getX(index));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${\n                this.binaryOutput ? 1. :\n                                    (this.hasWeights ? 'getW(index)' : '1.')};\n        bincount_write(indexVal, value);\n      }\n    }` :\n            `let coord = getCoordsFromIndex(index);\n    if (coordsInBounds2D(coord, uniforms.xShape)) {\n      let indexVal = i32(getX(coord[0], coord[1]));\n      if (indexVal < uniforms.binCountSize) {\n        let value = ${\n                this.binaryOutput ?\n                    1. :\n                    (this.hasWeights ? 'getW(coord[0], coord[1])' : '1.')};\n        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);\n      }\n    }`}\n  }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BincountProgram} from '../bincount_webgpu';\n\nimport {fill} from './Fill';\n\nexport function bincount(\n    args:\n        {inputs: BincountInputs, backend: WebGPUBackend, attrs: BincountAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const outputSize: [number] = [size];\n  const dtype = weights.dtype;\n\n  const output = fill({backend, attrs: {shape: outputSize, value: 0, dtype}});\n  const program = new BincountProgram([xSize], hasWeights);\n  const uniformData = [{type: 'int32', data: [size]}];\n  const bincountInputs: TensorInfo[] = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(\n      program, bincountInputs, dtype, uniformData, output);\n\n  return res;\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgpu',\n  kernelFunc: bincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BroadcastArgsProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['s0', 's1'];\n  uniforms = 's0Size : i32, s1Size : i32, ';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shape: number) {\n    this.outputShape = [shape];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'broadcastArgs';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n  ${main('index')} {\n    if (index < uniforms.size) {\n      var s0 = 1.0;\n      var s1 = 1.0;\n      let indexS0 = index - uniforms.size + uniforms.s0Size;\n      let indexS1 = index - uniforms.size + uniforms.s1Size;\n      if (indexS0 >= 0) {\n        s0 = getS0(indexS0);\n      }\n      if (indexS1 >= 0) {\n        s1 = getS1(indexS1);\n      }\n\n      if (s0 == 1.0) {\n        setOutputAtIndex(index, s1);\n      } else if (s1 == 1.0) {\n        setOutputAtIndex(index, s0);\n      } else if (s0 != s1) {\n        setOutputAtIndex(index, uniforms.NAN);\n      } else {\n        setOutputAtIndex(index, s0);\n      }\n    }\n  }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BroadcastArgsProgram} from '../broadcast_args_webgpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: WebGPUBackend,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  if (backend.shouldExecuteOnCPU([s0, s1])) {\n    const s0TensorInfo = backend.tensorMap.get(s0.dataId);\n    const s1TensorInfo = backend.tensorMap.get(s1.dataId);\n    const s0Vals = s0TensorInfo.values as TypedArray;\n    const s1Vals = s1TensorInfo.values as TypedArray;\n    const broadcastShape = backend_util.assertAndGetBroadcastShape(\n        Array.from(s0Vals), Array.from(s1Vals));\n    return backend.makeTensorInfo(\n        [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n  }\n\n  const s0Size = util.sizeFromShape(s0.shape);\n  const s1Size = util.sizeFromShape(s1.shape);\n  const outputSize = Math.max(s0Size, s1Size);\n\n  const program = new BroadcastArgsProgram(outputSize);\n  const uniformData =\n      [{type: 'int32', data: [s0Size]}, {type: 'int32', data: [s1Size]}];\n  return backend.runWebGPUProgram(program, [s0, s1], 'int32', uniformData);\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgpu',\n  kernelFunc: broadcastArgs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU as cpuNotEqual} from '../kernel_utils/shared';\n\nexport const notEqual = binaryKernelFunc({\n  opType: BinaryOpType.NOT_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuNotEqual\n});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.tensorMap.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgpu',\n  kernelFunc: real as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {castImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: WebGPUBackend, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO: Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeData(floatX.dataId);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeData(realPart.dataId);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.tensorMap.get(x.dataId).values as TypedArray;\n    const [resultShape, resultType, resultData] =\n        castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeData(zerosTensorInfo.dataId);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgpu',\n  kernelFunc: cast as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nexport function int(input: TensorInfo, backend: WebGPUBackend): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, UnaryOpType.TO_INT);\n  const output = backend.runWebGPUProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const ceil =\n    unaryKernelFunc({opType: UnaryOpType.CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgpu',\n  kernelFunc: ceil\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ClipVec4Program implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  variableNames = ['A'];\n  uniforms = 'minVal : f32, maxVal : f32,';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workPerThread = 4;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  outputComponent = 4;\n  size = true;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n    this.shaderKey = 'clipVec4';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          var clampedValue = clamp(\n              value, vec4<f32>(uniforms.minVal), vec4<f32>(uniforms.maxVal));\n          clampedValue = select(clampedValue, value, isnanVec4(value));\n          setOutputAtIndex(index, clampedValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ClipProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  variableNames = ['A'];\n  uniforms = 'minVal : f32, maxVal : f32,';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  minVal: number;\n  maxVal: number;\n  size = true;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'clip';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let value = getAByOutputIndex(index);\n          if (isnan(value)) {\n            setOutputAtIndex(index, value);\n            return;\n          }\n          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {ClipVec4Program} from '../clip_vec4_webgpu';\nimport {ClipProgram} from '../clip_webgpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: WebGPUBackend,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program: ClipProgram|ClipVec4Program;\n  const uniformData = [\n    {type: 'float32', data: [clipValueMin]},\n    {type: 'float32', data: [clipValueMax]}\n  ];\n  if (util.sizeFromShape(x.shape) % 4 === 0) {\n    program = new ClipVec4Program(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgpu',\n  kernelFunc: clipByValue as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ComplexAbsProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['real', 'imag'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'complexAbs';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let re = abs(getRealByOutputIndex(index));\n        let im = abs(getImagByOutputIndex(index));\n        let mx = max(re, im);\n\n        // The length function in wgsl may be not underflow-safe on some GPUs.\n        // So the safe solution is to ensure underflow-safety in all cases.\n        setOutputAtIndex(index, select(mx * length(vec2<f32>(1, min(re, im)/mx)), 0.0, mx == 0.0));\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ComplexAbsProgram} from '../complex_abs_webgpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.tensorMap.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGPUProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgpu',\n  kernelFunc: complexAbs as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ConcatProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  uniforms = '';\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  offsetLength: number;\n\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape =\n        backend_util.computeOutShape(shapes, 1 /* axis */) as [number, number];\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    this.offsetLength = shapes.length - 1;\n    for (let i = 0; i < this.offsetLength; i++) {\n      this.uniforms += `offset${i} : i32,`;\n    }\n    this.shaderKey = 'concat';\n  }\n\n  getUserCode(): string {\n    const snippets: string[] = [];\n    if (this.offsetLength > 0) {\n      snippets.push(\n          `if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }`);\n      for (let i = 1; i < this.offsetLength; i++) {\n        snippets.push(\n            `else if (yC < uniforms.offset${[i]}){ ` +\n            `setOutputAtCoords(coords.x, coords.y, getT${\n                i}(yR, yC - uniforms.offset${i - 1})); }`);\n      }\n      const lastIndex = this.offsetLength;\n      const lastShiftIndex = this.offsetLength - 1;\n      snippets.push(`else { setOutputAtCoords(coords.x, coords.y, getT${\n          lastIndex}(yR, yC - uniforms.offset${lastShiftIndex})); }`);\n    } else {\n      snippets.push(`setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));`);\n    }\n\n    const userCode = `\n      ${main('index')} {\n        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let flatIndex = index * ${this.workPerThread} + i;\n          if(flatIndex < uniforms.size) {\n            let coords = getCoordsFromIndex(flatIndex);\n            let yR = coords.x;\n            let yC = coords.y;\n\n            ${snippets.join('\\n        ')}\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.tensorMap.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgpu',\n  kernelFunc: imag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ConcatProgram} from '../concat_webgpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: WebGPUBackend): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeData(r.dataId));\n    imags.forEach(i => backend.disposeData(i.dataId));\n    backend.disposeData(realConcated.dataId);\n    backend.disposeData(imagConcated.dataId);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgpu doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeData(t.dataId));\n\n    return outInfo;\n  }\n\n  // There is a storage buffer limitation in compute stage, one for output so\n  // the maximum for input is limits.maxStorageBuffersPerShaderStage - 1\n  const maxInputNum = backend.device.limits.maxStorageBuffersPerShaderStage - 1;\n  if (inputs.length > maxInputNum) {\n    const reducedInputs = [];\n    for (let i = 0; i < inputs.length; i += maxInputNum) {\n      const subArray = inputs.slice(i, i + maxInputNum);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n\n    for (const i of reducedInputs) {\n      backend.disposeData(i.dataId);\n    }\n\n    return result;\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const shapes = (tensors2D).map(t => t.shape as [number, number]);\n  const program = new ConcatProgram(shapes);\n\n  const uniformData: Array<{type: string; data: number[]}> = [];\n  const offsets: number[] = new Array(shapes.length - 1);\n  if (offsets.length > 0) {\n    offsets[0] = shapes[0][1];\n    uniformData.push({type: 'int32', data: [offsets[0]]});\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n      uniformData.push({type: 'int32', data: [offsets[i]]});\n    }\n  }\n\n  const res = backend.runWebGPUProgram(\n      program, tensors2D, tensors2D[0].dtype, uniformData);\n  tensors2D.forEach(r => backend.disposeData(r.dataId));\n\n  const reshapedResult =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n  backend.disposeData(res.dataId);\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: WebGPUBackend) {\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(t => reshape({\n                                 inputs: {x: t},\n                                 backend,\n                                 attrs: {\n                                   shape: [\n                                     util.sizeFromShape(t.shape.slice(0, axis)),\n                                     util.sizeFromShape(t.shape.slice(axis))\n                                   ]\n                                 }\n                               }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args: {inputs: ConcatInputs, attrs: ConcatAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgpu',\n  kernelFunc: concat as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\nimport {typeSnippet, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkgroupSizeForConv2d, computeWorkPerThreadForConv2d} from './webgpu_util';\n\nfunction conv2dCommonSnippet(\n    isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean,\n    fitInner: boolean, addBias = false,\n    activation: backend_util.Activation = null,\n    hasPreluActivationWeights = false, innerElementSizeX = 4,\n    innerElementSizeW = 4, innerElementSize = 4) {\n  const getXSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'resData = f32(x[xIndex]);';\n      case 3:\n        return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n      case 4:\n        return 'resData = vec4<f32>(x[xIndex / 4]);';\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const getWSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return f32(W[row * uniforms.wShape[3] + col]);';\n      case 4:\n        return 'return vec4<f32>(W[(row * uniforms.wShape[3] + col) / 4]);';\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n  const coordASnippet = isChannelsLast ? `\n      let coord = vec4<i32>(batch, xRow, xCol, xCh);\n      ` :\n                                         `\n      let coord = vec4<i32>(batch, xCh, xRow, xCol);\n      `;\n\n  const coordResSnippet = isChannelsLast ? `\n      let coords = vec4<i32>(\n        batch,\n        row / outWidth,\n        row % outWidth,\n        col);\n      ` :\n                                           `\n      let coords = vec4<i32>(\n        batch,\n        row,\n        col / outWidth,\n        col % outWidth);\n      `;\n\n  const xHight = isChannelsLast ? 'uniforms.xShape[1]' : 'uniforms.xShape[2]';\n  const xWidth = isChannelsLast ? 'uniforms.xShape[2]' : 'uniforms.xShape[3]';\n  const row = isChannelsLast ? 'row' : 'col';\n  const col = isChannelsLast ? 'col' : 'row';\n  const readXSnippet = `\n      let inChannels = uniforms.wShape[2];\n      let outWidth = ${\n      isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};\n      let outRow = ${row} / outWidth;\n      let outCol = ${row} % outWidth;\n\n      let WRow = ${col} / (uniforms.filterDims[1] * inChannels);\n      let WCol = ${col} / inChannels % uniforms.filterDims[1];\n      let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * WRow - uniforms.pads[0];\n      let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * WCol - uniforms.pads[1];\n      let xCh = ${col} % inChannels;\n      var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n      // The bounds checking is always needed since we use it to pad zero for\n      // the 'same' padding type.\n      if (xRow >= 0 && xRow < ${xHight} && xCol >= 0 && xCol < ${xWidth}) {\n        ${coordASnippet}\n        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);\n        ${getXSnippet(innerElementSizeX)}\n      }\n      return resData;`;\n\n  const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n      ${readXSnippet}` :\n                                                            `\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${readXSnippet}\n      }\n      return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                   (fitInner && fitBOuter ? `\n      ${readXSnippet}` :\n                                                            `\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${readXSnippet}\n      }\n      return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n  const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n  const resType = typeSnippet(innerElementSize);\n  const aType = isChannelsLast ? typeSnippet(innerElementSizeX) :\n                                 typeSnippet(innerElementSizeW);\n  const bType = isChannelsLast ? typeSnippet(innerElementSizeW) :\n                                 typeSnippet(innerElementSizeX);\n  const userCode = `\n      ${\n      activationFnSnippet(\n          activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n      fn mm_readA(batch: i32, row : i32, col : i32) -> ${aType} {\n        ${isChannelsLast ? sampleX : sampleW}\n      }\n\n      fn mm_readB(batch: i32, row : i32, col : i32) -> ${bType} {\n        ${isChannelsLast ? sampleW : sampleX}\n      }\n\n      fn mm_write(batch: i32, row : i32, col : i32, valueIn : ${resType}) {\n        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n        {\n        var value = valueIn;\n        let outWidth = ${\n      isChannelsLast ? 'uniforms.outShape[2]' : 'uniforms.outShape[3]'};\n        ${coordResSnippet}\n        ${biasActivationSnippet(addBias, activation)}\n        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }`;\n  return userCode;\n}\n\nexport class Conv2DMMProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  variableComponents: number[];\n  uniforms =\n      `filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,`;\n  workgroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  isChannelsLast: boolean;\n  fitAOuter: boolean;\n  fitBOuter: boolean;\n  fitInner: boolean;\n  tileAOuter: number;\n  tileBOuter: number;\n  tileInner: number;\n  innerElementSize: number;\n  isVec4?: boolean;\n  outputComponent: number;\n  private sequentialAccessByThreads: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, dimAOuter: number, dimBOuter: number,\n      dimInner: number, addBias = false,\n      activation: backend_util.Activation = null,\n      hasPreluActivationWeights = false, sequentialAccessByThreads = false) {\n    this.outputShape = convInfo.outShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.isVec4 =\n        (((convInfo.inChannels % 4 === 0 || convInfo.inChannels % 3 === 0) &&\n          this.isChannelsLast) ||\n         (convInfo.outWidth % 4 === 0 && !this.isChannelsLast)) &&\n        convInfo.outChannels % 4 === 0;\n    this.dispatchLayout = this.isChannelsLast ? {x: [3], y: [1, 2], z: [0]} :\n                                                {x: [2, 3], y: [1], z: [0]};\n    this.workgroupSize = computeWorkgroupSizeForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n    this.elementsPerThread = computeWorkPerThreadForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        this.elementsPerThread);\n\n    if (this.isVec4) {\n      this.outputComponent = 4;\n      if (this.isChannelsLast && convInfo.inChannels % 4 !== 0) {\n        this.innerElementSize = 3;\n        this.variableComponents = [1, 4];\n      } else {\n        this.innerElementSize = 4;\n        this.variableComponents = [4, 4];\n      }\n\n      if (addBias) {\n        this.variableNames.push('bias');\n        this.variableComponents.push(4);\n      }\n\n      if (hasPreluActivationWeights) {\n        this.variableNames.push('preluActivationWeights');\n        this.variableComponents.push(4);\n      }\n    } else {\n      this.innerElementSize = this.elementsPerThread[0];\n      if (addBias) {\n        this.variableNames.push('bias');\n      }\n\n      if (hasPreluActivationWeights) {\n        this.variableNames.push('preluActivationWeights');\n      }\n    }\n\n    this.sequentialAccessByThreads = sequentialAccessByThreads;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n\n    this.tileAOuter = this.workgroupSize[1] * this.elementsPerThread[1];\n    this.tileBOuter = this.workgroupSize[0] * this.elementsPerThread[0];\n    this.tileInner = Math.max(\n        this.workgroupSize[0] * this.innerElementSize, this.workgroupSize[1]);\n\n    this.fitAOuter = dimAOuter % this.tileAOuter === 0;\n    this.fitBOuter = dimBOuter % this.tileBOuter === 0;\n    this.fitInner = dimInner % this.tileInner === 0;\n\n    this.shaderKey = `conv2DMM_${this.elementsPerThread}_${this.activation}}_${\n        this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${\n        this.innerElementSize}_${this.isChannelsLast}_${\n        this.sequentialAccessByThreads}`;\n  }\n\n  getUserCode(): string {\n    const matMulSource = this.isVec4 ?\n        makeMatMulPackedVec4Source(\n            this.elementsPerThread, this.workgroupSize, !this.isChannelsLast,\n            this.tileInner) :\n        makeMatMulPackedSource(\n            this.elementsPerThread, this.workgroupSize, !this.isChannelsLast,\n            this.tileInner, false, null, this.sequentialAccessByThreads);\n    const elementsSize =\n        this.isVec4 ? [this.innerElementSize, 4, 4] : [1, 1, 1];\n    const userCode = `\n    ${\n        conv2dCommonSnippet(\n            this.isChannelsLast, this.fitAOuter, this.fitBOuter, this.fitInner,\n            this.addBias, this.activation, this.hasPreluActivationWeights,\n            elementsSize[0], elementsSize[1], elementsSize[2])}\n    ${matMulSource}\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class Conv2DNaiveProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms =\n      'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>,';\n  workgroupSize: [number, number, number] = [4, 4, 8];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivationWeights: boolean;\n  isChannelsLast: boolean;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null,\n      hasPreluActivationWeights = false) {\n    this.outputShape = convInfo.outShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.dispatchLayout = this.isChannelsLast ? {x: [2], y: [1], z: [0, 3]} :\n                                                {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivationWeights = hasPreluActivationWeights;\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.shaderKey = `conv2dnaive_${this.activation}_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n       ${\n        activationFnSnippet(\n            this.activation, this.hasPreluActivationWeights, false, 4)}\n       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{\n         let coords = vec4<i32>(batch, row, col, chan);\n         if (coordsInBounds4D(coords, uniforms.xShape)) {\n           return  getX(batch, row, col, chan);\n         } else {\n          return 0.0;\n         }\n       }\n       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{\n         let coords = vec4<i32>(row, col, xChannel, outChannel);\n         if(coordsInBounds4D(coords, uniforms.wShape)) {\n           return getW(row, col, xChannel, outChannel);\n          } else {\n            return 0.0;\n          }\n       }\n       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {\n         let coords = ${\n        this.isChannelsLast ? `vec4<i32>(batch, row, col, chan);` :\n                              `vec4<i32>(batch, chan, row, col);`}\n         if (coordsInBounds4D(coords, uniforms.outShape)) {\n           var value = valueIn;\n           ${biasActivationSnippet(this.addBias, this.activation)}\n           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);\n         }\n       }\n       ${main('index')} {\n         let coords = getOutputCoords();\n         let batch = coords[0];\n         let outChannel = ${this.isChannelsLast ? `coords[3];` : `coords[1];`}\n         let outRow = ${this.isChannelsLast ? `coords[1];` : `coords[2];`}\n         let outCol = ${this.isChannelsLast ? `coords[2];` : `coords[3];`}\n         var acc : f32 = 0.0;\n         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {\n           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {\n             let xRow = outRow * uniforms.strides[0] + uniforms.dilations[0] * row - uniforms.pads[0];\n             let xCol = outCol * uniforms.strides[1] + uniforms.dilations[1] * col - uniforms.pads[1];\n             for (var xChannel = 0; xChannel < ${\n        this.isChannelsLast ? `uniforms.xShape[3];` :\n                              `uniforms.xShape[1];`} xChannel = xChannel + 1) {\n               ${\n        this.isChannelsLast ? `let v = readInp(batch, xRow, xCol, xChannel);` :\n                              `let v = readInp(batch, xChannel, xRow, xCol);`}\n               let f = readFilt(row, col, xChannel, outChannel);\n               acc = acc + v * f;\n             }\n           }\n         }\n         writeResult(batch, outRow, outCol, outChannel, acc);\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Im2ColProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  uniforms =\n      `pads : vec2<i32>, strides : vec2<i32>, dilations : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,\n       inChannels : i32,`;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(outputShape: number[], isChannelsLast: boolean) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = isChannelsLast;\n    this.shaderKey = `im2col_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const rowDim = this.isChannelsLast ? 1 : 2;\n    const colDim = this.isChannelsLast ? 2 : 3;\n\n    const row = this.isChannelsLast ? 'coords[1]' : 'coords[2]';\n    const col = this.isChannelsLast ? 'coords[2]' : 'coords[1]';\n    const getXSnippet = this.isChannelsLast ? 'getX(batch, xRow, xCol, ch)' :\n                                              'getX(batch, ch, xRow, xCol)';\n\n    const userCode = `\n    ${main('index')} {\n      let coords = getCoordsFromIndex(index);\n      if(index < uniforms.size) {\n        let batch = coords[0];\n        let row = ${row};\n        let col = ${col};\n        let offsetY = (row / uniforms.outWidth) * uniforms.strides[0] - uniforms.pads[0];\n        let xRow = offsetY + uniforms.dilations[0] * (col / uniforms.itemsPerBlockRow);\n        var value = 0.0;\n        if(xRow < uniforms.xShape[${rowDim}] && xRow >= 0) {\n          let offsetX = (row % uniforms.outWidth) * uniforms.strides[1] -\n              uniforms.pads[1];\n          let xCol = offsetX + uniforms.dilations[1] * ((col %\n              uniforms.itemsPerBlockRow) / uniforms.inChannels);\n          let ch = col % uniforms.inChannels;\n          if(xCol < uniforms.xShape[${colDim}] && xCol >= 0) {\n            value = ${getXSnippet};\n          }\n        }\n        setOutputAtIndex(index, value);\n      }\n    }\n   `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DMMProgram} from '../conv2d_mm_webgpu';\nimport {Conv2DNaiveProgram} from '../conv2d_naive_webgpu';\nimport {Im2ColProgram} from '../im2col_webgpu';\nimport {WebGPUProgram} from '../webgpu_program';\n\nimport {batchMatMulImpl} from './BatchMatMul_impl';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: WebGPUBackend,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// conv2dByMatMul fuses height and width into one dimension to compute\n// batchMatMul, so bias and activation weights are also supposed to fuse the two\n// dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\nfunction getShapeForBatchMatMul(\n    shape: number[], isChannelsLast: boolean): number[] {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ?\n        [\n          ...shape.slice(0, -3) /* batch */,\n          shape[length - 3] * shape[length - 2] /* height * width */,\n          shape[length - 1] /* channel */\n        ] :\n        [\n          ...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */,\n          shape[length - 2] * shape[length - 1] /* height * width */\n        ];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nfunction conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = isChannelsLast ? false : true;\n  const transposeB = false;\n\n  const sameSize = isChannelsLast &&\n      convInfo.filterHeight === convInfo.inHeight &&\n      convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.padInfo.type === 'VALID';\n  const intermediates: TensorInfo[] = [];\n  let xReshaped;\n  let filterReshaped;\n\n  if (sameSize) {\n    const sharedDim =\n        convInfo.inHeight * convInfo.inWidth * convInfo.inChannels;\n    xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {shape: [1, convInfo.batchSize, sharedDim]}\n    });\n    filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, sharedDim, convInfo.outChannels]}\n    });\n  } else {\n    xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {\n        shape: isChannelsLast ?\n            [\n              convInfo.batchSize, convInfo.inHeight * convInfo.inWidth,\n              convInfo.inChannels\n            ] :\n            [\n              convInfo.batchSize, convInfo.inChannels,\n              convInfo.inHeight * convInfo.inWidth\n            ]\n      }\n    });\n    filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n  }\n  intermediates.push(xReshaped);\n  intermediates.push(filterReshaped);\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const result = batchMatMulImpl({\n    a: isChannelsLast ? xReshaped : filterReshaped,\n    b: isChannelsLast ? filterReshaped : xReshaped,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    activation,\n    preluActivationWeights,\n    leakyreluAlpha\n  });\n  const out = reshape(\n      {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n  intermediates.push(result);\n\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n\n  return out;\n}\n\n// Implements the im2col algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nfunction conv2dWithIm2Col({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // row of a new matrix with shape [outHeight * outWidth,\n  // filterWidth * filterHeight * inChannels]. The filter is also rearranged so\n  // each output channel forms a col of a new matrix with shape [\n  // filterWidth * filterHeight * inChannels, outChannels]. The convolution is\n  // then computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    strideWidth,\n    strideHeight,\n    padInfo,\n    outWidth,\n    outHeight,\n    dilationWidth,\n    dilationHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = isChannelsLast ? [convInfo.batchSize, numCols, sharedDim] :\n                                      [convInfo.batchSize, sharedDim, numCols];\n\n  const im2ColProgram = new Im2ColProgram(x2ColShape, isChannelsLast);\n  const dimensions = [\n    {type: 'int32', data: [padInfo.top, padInfo.left]},      // Padding.\n    {type: 'int32', data: [strideHeight, strideWidth]},      // Stride.\n    {type: 'int32', data: [dilationHeight, dilationWidth]},  // Dilation.\n    {type: 'int32', data: [outWidth]},\n    {type: 'int32', data: [inChannels * filterWidth]},  // itemsPerBlockRow.\n    {type: 'int32', data: [inChannels]}\n  ];\n  const x2Col =\n      backend.runWebGPUProgram(im2ColProgram, [x], x.dtype, dimensions);\n\n  const intermediates: TensorInfo[] = [];\n  intermediates.push(x2Col);\n\n  const filterReshaped = reshape(\n      {inputs: {x: filter}, backend, attrs: {shape: [1, sharedDim, -1]}});\n  intermediates.push(filterReshaped);\n\n  if (preluActivationWeights != null) {\n    const targetShape =\n        getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: targetShape}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({inputs: {x: bias}, backend, attrs: {shape: targetShape}});\n      intermediates.push(bias);\n    }\n  }\n\n  const transposeA = isChannelsLast ? false : true;\n  const transposeB = false;\n  const result = batchMatMulImpl({\n    a: isChannelsLast ? x2Col : filterReshaped,\n    b: isChannelsLast ? filterReshaped : x2Col,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    activation,\n    preluActivationWeights,\n    leakyreluAlpha\n  });\n  const out = reshape(\n      {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n  intermediates.push(result);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n\n  return out;\n}\n\nexport function conv2DImpl({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const sameSize = isChannelsLast &&\n      convInfo.filterHeight === convInfo.inHeight &&\n      convInfo.filterWidth === convInfo.inWidth &&\n      convInfo.padInfo.type === 'VALID';\n  const useNaiveConv2d = env().getBool('WEBGPU_USE_NAIVE_CONV2D_DEBUG');\n\n  if (!useNaiveConv2d &&\n      (sameSize ||\n       (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n        convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n        convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n        (convInfo.padInfo.type === 'SAME' ||\n         convInfo.padInfo.type === 'VALID')))) {\n    return conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  }\n\n  const thresholdFlagValue =\n      env().getNumber('WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL');\n  const thresholdToIncreaseWorkgroups = thresholdFlagValue > -1 ?\n      thresholdFlagValue :\n      backend.thresholdToIncreaseWorkgroups;\n  const workgroupsBy32x32 = convInfo.batchSize *\n      Math.ceil((convInfo.outHeight * convInfo.outWidth) / 32) *\n      Math.ceil(convInfo.outChannels / 32);\n  if (env().getBool('WEBGPU_CONV_SEPARATE_IM2COL_SHADER') ||\n      workgroupsBy32x32 <= thresholdToIncreaseWorkgroups) {\n    return conv2dWithIm2Col({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      preluActivationWeights,\n      leakyreluAlpha,\n      activation\n    });\n  }\n\n  let program: WebGPUProgram;\n  const padInfo = [convInfo.padInfo.top, convInfo.padInfo.left];\n  const dimensions = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [...padInfo]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}\n  ];\n  if (useNaiveConv2d) {\n    program = new Conv2DNaiveProgram(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n  } else {\n    const dimAOuter = isChannelsLast ? convInfo.outHeight * convInfo.outWidth :\n                                       convInfo.outChannels;\n    const dimBOuter = isChannelsLast ? convInfo.outChannels :\n                                       convInfo.outHeight * convInfo.outWidth;\n    const dimInner =\n        convInfo.filterHeight * convInfo.filterWidth * convInfo.inChannels;\n    dimensions.push(\n        {type: 'int32', data: [dimAOuter]}, {type: 'int32', data: [dimBOuter]},\n        {type: 'int32', data: [dimInner]});\n\n    // Experiments show that sequential access is more friendly for Intel GPUs.\n    const sequentialAccessByThreads = backend.adapterInfo.isIntel();\n    program = new Conv2DMMProgram(\n        convInfo, dimAOuter, dimBOuter, dimInner, hasBias, activation,\n        hasPreluActivationWeights, sequentialAccessByThreads);\n  }\n\n  const intermediates: TensorInfo[] = [];\n  const inputVar: TensorInfo[] = [x, filter];\n  if (hasBias) {\n    if (!isChannelsLast && bias.shape.length === 1) {\n      bias = reshape(\n          {inputs: {x: bias}, backend, attrs: {shape: [bias.shape[0], 1, 1]}});\n      intermediates.push(bias);\n    }\n    inputVar.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    if (!isChannelsLast && preluActivationWeights.shape.length === 1) {\n      preluActivationWeights = reshape({\n        inputs: {x: preluActivationWeights},\n        backend,\n        attrs: {shape: [preluActivationWeights.shape[0], 1, 1]}\n      });\n      intermediates.push(preluActivationWeights);\n    }\n    inputVar.push(preluActivationWeights);\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  const out = backend.runWebGPUProgram(program, inputVar, x.dtype, dimensions);\n  for (const i of intermediates) {\n    backend.disposeData(i.dataId);\n  }\n  return out;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {conv2DImpl} from './Conv2D_impl';\n\nexport function conv2d(\n    args: {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: WebGPUBackend}) {\n  const {inputs, attrs, backend} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  return conv2DImpl({x, filter, convInfo, backend});\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgpu',\n  kernelFunc: conv2d as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Conv2DDerInputProgram implements WebGPUProgram {\n  variableNames = ['dy', 'W'];\n  uniforms =\n      'filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>,';\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  isChannelsLast: boolean;\n  size = false;\n  isVec4 = false;\n  workPerThread = 1;\n  outputComponent: number;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.isVec4 = this.isChannelsLast && convInfo.outChannels % 4 === 0 &&\n        convInfo.inChannels % 4 === 0;\n    if (this.isVec4) {\n      // TODO: Expand to any value.\n      this.workPerThread = 2;\n      this.outputComponent = 4;\n      this.workgroupSize = [4, 4, 4];\n      this.dispatchLayout = {x: [3], y: [2], z: [0, 1]};\n      this.dispatch = computeDispatch(\n          this.dispatchLayout, this.outputShape, this.workgroupSize,\n          [4, this.workPerThread, 1]);\n    } else {\n      this.size = true;\n      this.workPerThread = 1;\n      this.workgroupSize = [64, 1, 1];\n      this.dispatchLayout = flatDispatchLayout(this.outputShape);\n      this.dispatch = computeDispatch(\n          this.dispatchLayout, this.outputShape, this.workgroupSize);\n    }\n    this.shaderKey = `conv2DDerInput_${this.isChannelsLast}_${this.isVec4}_${\n        this.workPerThread}`;\n  }\n\n  getUserCode(): string {\n    const rowDim = this.isChannelsLast ? 1 : 2;\n    const colDim = this.isChannelsLast ? 2 : 3;\n    const channelDim = this.isChannelsLast ? 3 : 1;\n\n    const vec4Snippet = `\n    ${main()} {\n      let batch = i32(globalId.z) / uniforms.outShape[1];\n      let r = i32(globalId.z) % uniforms.outShape[1];\n      let c = i32(globalId.y) * ${this.workPerThread};\n      let d1 = i32(globalId.x) * 4;\n\n      let dyCorner = vec2<i32>(r, c) - uniforms.pads;\n\n      // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n      // ? = to be determined. : = across all values in that axis.\n      var dotProd: array<vec4<f32>, ${this.workPerThread}>;\n      for (var i = 0; i < ${this.workPerThread}; i++) {\n        dotProd[i] = vec4<f32>(0.0);\n      }\n      for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n        let dyR = f32(dyCorner.x + wR) / f32(uniforms.strides.x);\n        let wRPerm = uniforms.filterDims.x - 1 - wR;\n        if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) ||\n            fract(dyR) > 0.0) {\n          continue;\n        }\n        let idyR = i32(dyR);\n\n        for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n          let dyC = f32(dyCorner.y + wC) / f32(uniforms.strides.y);\n          let dyC2 = f32(dyCorner.y + 1 + wC) / f32(uniforms.strides.y);\n          let wCPerm = uniforms.filterDims.y - 1 - wC;\n          var bDyCVal = true;\n          var bDyCVal2 = true;\n          if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC) > 0.0) {\n            bDyCVal = false;\n          }\n          if (dyC2 < 0.0 || dyC2 >= f32(uniforms.outBackprop[2]) ||\n              fract(dyC2) > 0.0) {\n            bDyCVal2 = false;\n          }\n\n          let idyC = i32(dyC);\n          let idyC2 = i32(dyC2);\n          if (bDyCVal && bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n              xValue = getDy(batch, idyR, idyC2, d2);\n              dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),\n                                                  dot(xValue, wValue1),\n                                                  dot(xValue, wValue2),\n                                                  dot(xValue, wValue3));\n            }\n          } else if (bDyCVal) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[0] = dotProd[0] + tmpval;\n            }\n          } else if (bDyCVal2) {\n            let d2Length = uniforms.outBackprop[3];\n            for (var d2 = 0; d2 < d2Length; d2 = d2 + 4) {\n              let wValue0 = getW(wRPerm, wCPerm, d1, d2);\n              let wValue1 = getW(wRPerm, wCPerm, d1 + 1, d2);\n              let wValue2 = getW(wRPerm, wCPerm, d1 + 2, d2);\n              let wValue3 = getW(wRPerm, wCPerm, d1 + 3, d2);\n              var xValue =  getDy(batch, idyR, idyC2, d2);\n              let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                     dot(xValue, wValue1),\n                                     dot(xValue, wValue2),\n                                     dot(xValue, wValue3));\n              dotProd[1] = dotProd[1] + tmpval;\n            }\n          }\n        }\n      }\n\n      for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n        let coords = vec4<i32>(batch, r, c + i, d1);\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], dotProd[i]);\n        }\n      }\n    }\n    `;\n    return this.isVec4 ?\n        `\n    ${vec4Snippet}\n    ` :\n        `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[${channelDim}];\n\n        let dyCorner = vec2<i32>(coords[${rowDim}], coords[${\n            colDim}]) - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {\n          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.strides.x);\n          let wRPerm = uniforms.filterDims.x - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||\n              wRPerm < 0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {\n            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.strides.y);\n            let wCPerm = uniforms.filterDims.y - 1 - wC;\n            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||\n                fract(dyC) > 0.0 || wCPerm < 0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {\n              let xValue = ${\n            this.isChannelsLast ? 'getDy(batch, idyR, idyC, d2)' :\n                                  'getDy(batch, d2, idyR, idyC)'};\n              let wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd = dotProd + xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n\nexport class Conv2DDerFilterProgram implements WebGPUProgram {\n  variableNames = ['x', 'dy'];\n  uniforms =\n      'pads : vec2<i32>, strides : vec2<i32>, batchSize : i32, outHeight : i32, outWidth : i32, inHeight : i32, inWidth : i32,';\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.shaderKey = `conv2DDerFilter_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let d2 = coords[3];\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b = b + 1) {\n          for (var yR = 0; yR < uniforms.outHeight; yR = yR + 1) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC = yC + 1) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              if (${this.isChannelsLast}) {\n                let dyValue = getDy(b, yR, yC, d2);\n                let xValue = getX(b, xR, xC, d1);\n                dotProd = dotProd + xValue * dyValue;\n              } else {\n                let dyValue = getDy(b, d2, yR, yC);\n                let xValue = getX(b, d1, xR, xC);\n                dotProd = dotProd + xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements WebGPUProgram {\n  variableNames = ['x', 'dy'];\n  uniforms =\n      `pads : vec3<i32>, strides : vec3<i32>, batchSize : i32, outDepth : i32,\n       outHeight : i32, outWidth : i32, inDepth : i32, inHeight : i32, inWidth : i32,`;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `conv3DDerFilter`;\n  }\n\n  getUserCode(): string {\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wF = coords.x;\n        let wR = coords.y;\n        let wC = coords.z;\n        let d1 = coords.w;\n        let d2 = coords.u;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yF = 0; yF < uniforms.outDepth; yF++) {\n            let xF = wF + yF * uniforms.strides[0] - uniforms.pads[0];\n            if (xF < 0 || xF >= uniforms.inDepth) {\n              continue;\n            }\n\n            for (var yR = 0; yR < uniforms.outHeight; yR++) {\n              let xR = wR + yR * uniforms.strides[1] - uniforms.pads[1];\n              if (xR < 0 || xR >= uniforms.inHeight) {\n                continue;\n              }\n\n              for (var yC = 0; yC < uniforms.outWidth; yC++) {\n                let xC = wC + yC * uniforms.strides[2] - uniforms.pads[2];\n                if (xC < 0 || xC >= uniforms.inWidth) {\n                  continue;\n                }\n\n                let dyValue = getDy(b, yF, yR, yC, d2);\n                let xValue = getX(b, xF, xR, xC, d1);\n                dotProd += xValue * dyValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements WebGPUProgram {\n  variableNames = ['dy', 'W'];\n  uniforms = `filterDims : vec3<i32>, pads : vec3<i32>, strides : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32, outChannels : i32,`;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `conv3DDerInput`;\n  }\n\n  getUserCode(): string {\n    return `\n    ${main('index')} {\n      if(index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let d1 = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyFCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let dyF = f32(dyFCorner + wF) / f32(uniforms.strides[0]);\n          if (dyF < 0.0 || dyF >= f32(uniforms.outDepth) || fract(dyF) > 0.0) {\n            continue;\n          }\n          let idyF = i32(dyF);\n\n          let wFPerm = uniforms.filterDims[0] - 1 - wF;\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            let wRPerm = uniforms.filterDims[1] - 1 - wR;\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let wCPerm = uniforms.filterDims[2] - 1 - wC;\n\n              for (var d2 = 0; d2 < uniforms.outChannels; d2++) {\n                let xValue = getDy(batch, idyF, idyR, idyC, d2);\n                let wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n  `;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_webgpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: WebGPUBackend,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.batchSize]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.inHeight]},\n    {type: 'int32', data: [convInfo.inWidth]}\n  ];\n  return backend.runWebGPUProgram(program, [x, dy], x.dtype, uniformData);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: conv2DBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\nimport {typeSnippet, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, computeWorkgroupSizeForConv2d, computeWorkPerThreadForConv2d} from './webgpu_util';\n\nfunction conv2dTransposeCommonSnippet(innerElementSize = 4) {\n  const getWSnippet = (innerElementSize: number) => {\n    switch (innerElementSize) {\n      case 1:\n        return 'return W[getIndexFromCoords4D(coord, uniforms.wShape)];';\n      case 4:\n        return `\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];\n            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];\n            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];\n            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;\n      default:\n        throw new Error(\n            `innerElementSize ${innerElementSize} is not supported.`);\n    }\n  };\n\n  const readASnippet = `\n      let outRow = row / uniforms.outShape[2];\n      let outCol = row % uniforms.outShape[2];\n\n      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];\n      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {\n        return ${typeSnippet(innerElementSize)}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {\n        return ${typeSnippet(innerElementSize)}(0.0);\n      }\n      let coord = vec4<i32>(\n          batch,\n          i32(xR),\n          i32(xC),\n          col % uniforms.outBackprop[3]);\n      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${\n      innerElementSize}];`;\n\n  const sampleA = `if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${readASnippet}\n      }\n      return ${typeSnippet(innerElementSize)}(0.0);`;\n\n  const userCode = `\n  fn mm_readA(batch: i32, row : i32, col : i32) -> ${\n      typeSnippet(innerElementSize)} {\n    ${sampleA}\n  }\n\n  fn mm_readB(batch: i32, row : i32, col : i32) -> ${\n      typeSnippet(innerElementSize)} {\n    let coordX = uniforms.filterDims.x - 1 -\n        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);\n    let coordY = uniforms.filterDims.y - 1 -\n        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&\n        coordX >= 0 && coordY >= 0) {\n      let rowInner = row % uniforms.outBackprop[3];\n      let coord = vec4<i32>(coordX, coordY, col, rowInner);\n      ${getWSnippet(innerElementSize)}\n    }\n    return ${typeSnippet(innerElementSize)}(0.0);\n  }\n\n  fn mm_write(batch: i32, row : i32, col : i32, valueInput : ${\n      typeSnippet(innerElementSize)}) {\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outCoord = vec4<i32>(\n          batch,\n          row / uniforms.outShape[2],\n          row % uniforms.outShape[2],\n          col);\n      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${\n      innerElementSize}] = value;\n    }\n  }`;\n  return userCode;\n}\n\nexport class Conv2DDerInputMMProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  variableComponents: number[];\n  uniforms =\n      'filterDims : vec2<i32>, pads : vec2<i32>, strides : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,';\n  workgroupSize: [number, number, number];\n  elementsPerThread: [number, number, number];\n  isVec4?: boolean;\n  outputComponent: number;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    util.assert(\n        convInfo.dataFormat === 'channelsLast',\n        () => 'TODO: NCHW is unimplemented');\n    this.isVec4 =\n        convInfo.inChannels % 4 === 0 && convInfo.outChannels % 4 === 0;\n    this.dispatchLayout = {x: [3], y: [1, 2], z: [0]};\n    this.workgroupSize = computeWorkgroupSizeForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n    this.elementsPerThread = computeWorkPerThreadForConv2d(\n        this.dispatchLayout, this.outputShape, this.isVec4);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        this.elementsPerThread);\n\n    if (this.isVec4) {\n      this.outputComponent = 4;\n      this.variableComponents = [4, 1];\n    }\n\n    this.shaderKey =\n        `conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`;\n  }\n\n  getUserCode(): string {\n    const matMulSource = this.isVec4 ?\n        makeMatMulPackedVec4Source(this.elementsPerThread, this.workgroupSize) :\n        makeMatMulPackedSource(this.elementsPerThread, this.workgroupSize);\n    const userCode = `\n    ${conv2dTransposeCommonSnippet(this.isVec4 ? 4 : 1)}\n    ${matMulSource}\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv2DDerInputMMProgram} from '../conv_backprop_mm_webgpu';\nimport {Conv2DDerInputProgram} from '../conv_backprop_webgpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dimensions = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {\n      type: 'int32',\n      data: [\n        convInfo.filterHeight - 1 - convInfo.padInfo.top,\n        convInfo.filterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {\n      type: 'int32',\n      data: [\n        convInfo.batchSize, convInfo.outHeight, convInfo.outWidth,\n        convInfo.outChannels\n      ]\n    },\n  ];\n  let program: Conv2DDerInputProgram|Conv2DDerInputMMProgram;\n  // TODO: Experiment when to use Conv2DDerInputMMProgram algorithm.\n  if (env().getBool('WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE') ||\n      convInfo.dataFormat !== 'channelsLast') {\n    program = new Conv2DDerInputProgram(convInfo);\n  } else {\n    program = new Conv2DDerInputMMProgram(convInfo);\n    const dimAOuter = convInfo.inHeight * convInfo.inWidth;\n    const dimBOuter = convInfo.inChannels;\n    const dimInner =\n        convInfo.filterHeight * convInfo.filterWidth * convInfo.outChannels;\n    dimensions.push(\n        {type: 'uint32', data: [dimAOuter]},\n        {type: 'uint32', data: [dimBOuter]},\n        {type: 'uint32', data: [dimInner]});\n  }\n  return backend.runWebGPUProgram(program, [dy, filter], 'float32', dimensions);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: conv2DBackpropInput as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Conv3DNaiveProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms =\n      'filterDims: vec3<i32>, pads: vec3<i32>, strides: vec3<i32>, dilations: vec3<i32>,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `conv3dnaive`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords.x;\n        let d2 = coords.u;\n\n        let xFRCCorner = vec3<i32>(coords.y, coords.z, coords.w) * uniforms.strides - uniforms.pads;\n        let xFCorner = xFRCCorner.x;\n        let xRCorner = xFRCCorner.y;\n        let xCCorner = xFRCCorner.z;\n\n        let inputDepthNearestVec4 = (uniforms.xShape.u / 4) * 4;\n        let inputDepthVec4Remainder = uniforms.xShape.u % 4;\n\n        var dotProd = 0.0;\n        for (var wF = 0; wF < uniforms.filterDims[0]; wF++) {\n          let xF = xFCorner + wF * uniforms.dilations[0];\n          if (xF < 0 || xF >= uniforms.xShape.y) {\n            continue;\n          }\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let xR = xRCorner + wR * uniforms.dilations[1];\n            if (xR < 0 || xR >= uniforms.xShape.z) {\n              continue;\n            }\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let xC = xCCorner + wC * uniforms.dilations[2];\n              if (xC < 0 || xC >= uniforms.xShape.w) {\n                continue;\n              }\n\n              for (var d1 = 0; d1 < inputDepthNearestVec4; d1 += 4) {\n                let xValues = vec4<f32>(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                let wValues = vec4<f32>(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (inputDepthVec4Remainder == 1) {\n                dotProd += getX(batch, xF, xR, xC, inputDepthNearestVec4) *\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2);\n              } else if (inputDepthVec4Remainder == 2) {\n                let xValues = vec2<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1)\n                );\n                let wValues = vec2<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (inputDepthVec4Remainder == 3) {\n                let xValues = vec3<f32>(\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                  getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2)\n                );\n                let wValues = vec3<f32>(\n                  getW(wF, wR, wC, inputDepthNearestVec4, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 1, d2),\n                  getW(wF, wR, wC, inputDepthNearestVec4 + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }`;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv3DNaiveProgram} from '../conv3d_naive_webgpu';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: WebGPUBackend}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const padInfo =\n      [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left];\n  const dimensions = [\n    {\n      type: 'int32',\n      data: [convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth]\n    },\n    {type: 'int32', data: [...padInfo]}, {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.dilationDepth, convInfo.dilationHeight, convInfo.dilationWidth\n      ]\n    }\n  ];\n  const program = new Conv3DNaiveProgram(convInfo);\n  const dtype = upcastType(x.dtype, filter.dtype);\n  return backend.runWebGPUProgram(program, [x, filter], dtype, dimensions);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgpu',\n  kernelFunc: conv3D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_webgpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: WebGPUBackend,\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  const uniformData = [\n    {\n      type: 'int32',\n      data:\n          [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {type: 'int32', data: [convInfo.batchSize]},\n    {type: 'int32', data: [convInfo.outDepth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.inDepth]},\n    {type: 'int32', data: [convInfo.inHeight]},\n    {type: 'int32', data: [convInfo.inWidth]}\n  ];\n  return backend.runWebGPUProgram(program, [x, dy], dy.dtype, uniformData);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgpu',\n  kernelFunc: conv3DBackpropFilterV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Conv3DDerInputProgram} from '../conv_backprop_webgpu';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, pad, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  const uniformData = [\n    {\n      type: 'int32',\n      data: [convInfo.filterDepth, convInfo.filterHeight, convInfo.filterWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.filterDepth - 1 - convInfo.padInfo.front,\n        convInfo.filterHeight - 1 - convInfo.padInfo.top,\n        convInfo.filterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {type: 'int32', data: [convInfo.outDepth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.outChannels]}\n  ];\n\n  return backend.runWebGPUProgram(program, [dy, filter], dy.dtype, uniformData);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgpu',\n  kernelFunc: conv3DBackpropInputV2 as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const cos = unaryKernelFunc({opType: UnaryOpType.COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgpu',\n  kernelFunc: cos\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const cosh = unaryKernelFunc({opType: UnaryOpType.COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgpu',\n  kernelFunc: cosh\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class CropAndResizeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  uniforms = 'extrapolationValue : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  methodId: number;\n  cropHeightBiggerThan1: boolean;\n  cropWidthBiggerThan1: boolean;\n  size = true;\n\n  constructor(\n      channnel: number, boxShape: [number, number], cropSize: [number, number],\n      method: 'bilinear'|'nearest') {\n    const [numBoxes, ] = boxShape;\n    this.outputShape = [numBoxes, cropSize[0], cropSize[1], channnel];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.methodId = method === 'bilinear' ? 1 : 0;\n    this.cropHeightBiggerThan1 = this.outputShape[1] > 1;\n    this.cropWidthBiggerThan1 = this.outputShape[2] > 1;\n    this.shaderKey = `cropAndResize_${this.methodId}_${\n        this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`;\n  }\n\n  getUserCode(): string {\n    const [inputHeightFloat, inputWidthFloat] =\n        [`f32(uniforms.imageShape[1] - 1)`, `f32(uniforms.imageShape[2] - 1)`];\n\n    const [heightRatio, heightScale, inY] = this.cropHeightBiggerThan1 ?\n        [\n          `(${inputHeightFloat} / f32(uniforms.outShape[1] - 1))`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + f32(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = this.cropWidthBiggerThan1 ?\n        [\n          `(${inputWidthFloat} / f32(uniforms.outShape[2] - 1))`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + f32(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let height_ratio = f32(${heightRatio});\n        let width_ratio = f32(${widthRatio});\n        let b = coords[0];\n        let y = coords[1];\n        let x = coords[2];\n        let d = coords[3];\n        // get box vals\n        let y1 = getBoxes(b, 0);\n        let x1 = getBoxes(b, 1);\n        let y2 = getBoxes(b, 2);\n        let x2 = getBoxes(b, 3);\n        // get image in batch index\n        let bInd = i32(round(getBoxInd(b)));\n        if(bInd < 0 || bInd >= uniforms.outShape[0]) {\n          return;\n        }\n        let height_scale = ${heightScale};\n        let width_scale = ${widthScale};\n        let in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutputAtIndex(index, uniforms.extrapolationValue);\n          return;\n        }\n        let sourceFracIndexCR = vec2<f32>(in_x,in_y);\n        if(${this.methodId} == 1) {\n          // Compute the four integer indices.\n          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);\n          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));\n          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);\n          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);\n          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);\n          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);\n          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);\n          let top = topLeft + (topRight - topLeft) * fracCR.x;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          let newValue = top + (bottom - top) * fracCR.y;\n          setOutputAtIndex(index, newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          let sourceNearestCR = vec2<i32>(floor(\n            sourceFracIndexCR + vec2<f32>(0.5,0.5)));\n          let newValue = getImage(\n            bInd, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CropAndResizeProgram} from '../crop_and_resize_webgpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: WebGPUBackend,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape[3], boxes.shape as [number, number], cropSize, method);\n  const uniformData = [{type: 'float32', data: [extrapolationValue]}];\n  return backend.runWebGPUProgram(\n      program, [image, boxes, boxInd], 'float32', uniformData);\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgpu',\n  kernelFunc: cropAndResize as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport enum CumOpType {\n  Prod = '*',\n  Sum = '+',\n}\n\nexport class CumProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number];\n  // pow(i32, i32) is not supported, use pow(f32, f32) instead.\n  uniforms = 'index : f32,';\n  size = true;\n  exclusive: boolean;\n  reverse: boolean;\n  op: CumOpType;\n\n  constructor(\n      op: CumOpType, shape: number[], exclusive: boolean, reverse: boolean) {\n    this.workgroupSize = [128, 1, 1];\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.exclusive = exclusive;\n    this.reverse = reverse;\n    this.op = op;\n    this.shaderKey = `cum_${this.op}_${this.exclusive}_${this.reverse}`;\n  }\n\n  getUserCode(): string {\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val = this.exclusive ? initVal :\n                                 `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (this.exclusive) {\n      condition = this.reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = this.reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = this.reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (this.reverse ? 'end + pow2' : 'end - pow2');\n    }\n    return `\n      ${main('index')} {\n       if (index < uniforms.size) {\n         var coords = getCoordsFromIndex(index);\n\n         let end = ${getFinalCoord(rank, 'coords', this.op)};\n         var val = ${val};\n         let pow2 = i32(pow(2.0, uniforms.index));\n         if (${condition}) {\n           let idx = ${idxString};\n           ${getFinalCoord(rank, 'coords', this.op)} = idx;\n           val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n         }\n         setOutputAtIndex(index, val);\n       }\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string, op: CumOpType): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType, CumProgram} from '../cum_webgpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumImpl(\n    op: CumOpType, x: TensorInfo, backend: WebGPUBackend, axis: number,\n    exclusive: boolean, reverse: boolean): TensorInfo {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGPU cumprod shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const prevResult = result;\n    const uniformData = [{type: 'float32', data: [i]}];\n    result =\n        backend.runWebGPUProgram(program, [result], result.dtype, uniformData);\n    backend.disposeData(prevResult.dataId);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    const uniformData = [{type: 'float32', data: [0]}];\n    result =\n        backend.runWebGPUProgram(program, [result], result.dtype, uniformData);\n    backend.disposeData(prevResult.dataId);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeData(result.dataId);\n    backend.disposeData(permutedX.dataId);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumprod, CumprodAttrs, CumprodInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType} from '../cum_webgpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumprod(\n    args: {inputs: CumprodInputs, backend: WebGPUBackend, attrs: CumprodAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumprodConfig: KernelConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgpu',\n  kernelFunc: cumprod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {CumOpType} from '../cum_webgpu';\nimport {cumImpl} from './Cum_impl';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: WebGPUBackend, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgpu',\n  kernelFunc: cumsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BincountProgram} from '../bincount_webgpu';\n\nimport {fill} from './Fill';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: WebGPUBackend,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  const xRankOne = x.shape.length === 1;\n  const weightsSize = util.sizeFromShape(weights.shape);\n  const hasWeights = weightsSize > 0;\n  const dtype = weights.dtype;\n  const xSize: [number]|[number, number] =\n      xRankOne ? [x.shape[0]] : [x.shape[0], x.shape[1]];\n  const outputSize: [number]|[number, number] =\n      xRankOne ? [size] : [x.shape[0], size];\n\n  const output = fill({backend, attrs: {shape: outputSize, value: 0, dtype}});\n  const program = new BincountProgram(xSize, hasWeights, binaryOutput);\n  const uniformData = [{type: 'int32', data: [size]}];\n  const bincountInputs: TensorInfo[] = hasWeights ? [x, weights] : [x];\n  const res = backend.runWebGPUProgram(\n      program, bincountInputs, dtype, uniformData, output);\n\n  return res;\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgpu',\n  kernelFunc: denseBincount as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthToSpaceProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  dataFormat: string;\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  uniforms = 'blockSize : i32,';\n\n  constructor(outputShape: number[], dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `depthToSpace_${dataFormat}`;\n    this.dataFormat = dataFormat;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let h = ${this.getHeightCoordString()};\n          let w = ${this.getWidthCoordString()};\n          let d = ${this.getDepthCoordString()};\n\n          let in_h = h / uniforms.blockSize;\n          let offset_h = h % uniforms.blockSize;\n          let in_w = w / uniforms.blockSize;\n          let offset_w = w % uniforms.blockSize;\n          let offset_d = (offset_h * uniforms.blockSize + offset_w) *\n            ${this.getOutputDepthSize()};\n          let in_d = d + offset_d;\n\n          let rlt = ${this.getInputSamplingString()};\n          setOutputAtIndex(index, rlt);\n        }\n      }`;\n    return userCode;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `uniforms.outShape[3]`;\n    } else {\n      return `uniforms.outShape[1]`;\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthToSpaceProgram} from '../depth_to_space_webgpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: WebGPUBackend,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const uniformData = [\n    {type: 'int32', data: [blockSize]},\n  ];\n\n  const program = new DepthToSpaceProgram(outputShape, dataFormat);\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgpu',\n  kernelFunc: depthToSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch} from './webgpu_util';\n\nexport class DepthwiseConv2DNCHWSharedProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = `pads : vec2<i32>, inDims : vec2<i32>,`;\n  workgroupSize: [number, number, number] = [16, 16, 1];\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  filterHeight: number;\n  filterWidth: number;\n\n  constructor(\n      outputShape: number[], filterHeight: number, filterWidth: number,\n      addBias = false, activation: backend_util.Activation = null,\n      hasPreluActivation = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.filterHeight = filterHeight;\n    this.filterWidth = filterWidth;\n    this.shaderKey = `depthwiseNCHW_${this.activation}_${this.filterHeight}_${\n        this.filterWidth}`;\n  }\n\n  getUserCode(): string {\n    const filterSize = this.filterWidth * this.filterHeight;\n    const flatWorkgroupSize =\n        this.workgroupSize[0] * this.workgroupSize[1] * this.workgroupSize[2];\n    const tileAHeight = this.workgroupSize[1] + this.filterHeight - 1;\n    const tileAWidth = this.workgroupSize[0] + this.filterWidth - 1;\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, false, 4)}\n\n      var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHeight}>;\n      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${\n        this.filterHeight}>;\n      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {\n        var value = 0.0;\n        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])\n        {\n          value = getX(batch, channel, row, col);\n        }\n        return value;\n      }\n\n      ${main()} {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pads;\n        let channelMul = uniforms.wShape[3];\n        let d1 = coords[1] / channelMul;\n        let q = coords[1] % channelMul;\n\n        let inputRowStart = xRCCorner.x;\n        let inputColStart = xRCCorner.y;\n\n        let localRow = i32(localId.y);\n        let localCol = i32(localId.x);\n\n        // Load one tile of X into local memory.\n        for (var inputRow = localRow; inputRow < ${\n        tileAHeight}; inputRow = inputRow + ${this.workgroupSize[1]}) {\n          for (var inputCol = localCol; inputCol < ${\n        tileAWidth}; inputCol = inputCol + ${this.workgroupSize[0]}) {\n            let rowOffset = inputRow - localRow;\n            let colOffset = inputCol - localCol;\n            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);\n          }\n        }\n\n        // Load one tile of W into local memory.\n        var wIndex = i32(localIndex);\n        ${\n        filterSize < flatWorkgroupSize ?\n            `if (wIndex < ${filterSize})` :\n            `for(; wIndex < ${filterSize}; wIndex = wIndex + ${\n                flatWorkgroupSize})`}\n\n        {\n          let wRow = wIndex / ${this.filterWidth};\n          let wCol = wIndex % ${this.filterWidth};\n          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);\n        }\n\n        workgroupBarrier();\n\n        var value = 0.0;\n        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {\n          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {\n            let xVal = mm_Asub[localRow + wR][localCol + wC];\n            let wVal = mm_Bsub[wR][wC];\n            value = fma(xVal, wVal, value);\n          }\n        }\n        ${biasActivationSnippet(this.addBias, this.activation)}\n        if (coordsInBounds4D(coords, uniforms.outShape)) {\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthwiseConv2DVec4Program implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = 'pads : vec2<i32>, inDims : vec2<i32>, virtualWidth : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  workPerThread = 4;\n  convInfo: backend_util.Conv2DInfo;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  outputComponent = 4;\n  virtualWidth: number;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n    this.virtualWidth = Math.ceil(this.outputShape[2] / this.workPerThread) *\n        this.workPerThread;\n    const virtualOutputShape = [\n      this.outputShape[0], this.outputShape[1], this.virtualWidth,\n      this.outputShape[3]\n    ];\n    this.dispatchLayout = flatDispatchLayout(virtualOutputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, virtualOutputShape, this.workgroupSize,\n        [this.outputComponent * this.workPerThread, 1, 1]);\n\n    util.assert(\n        convInfo.dataFormat === 'channelsLast',\n        () => 'TODO: NCHW is unimplemented');\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n\n    this.shaderKey =\n        `depthwiseVec4_${activation}_${this.convInfo.filterHeight}_${\n            this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${\n            this.convInfo.strideWidth}_${this.workPerThread}`;\n  }\n\n  getUserCode(): string {\n    const xNumber = (this.workPerThread - 1) * this.convInfo.strideWidth +\n        this.convInfo.filterWidth;\n    const strideHeight = this.convInfo.strideHeight;\n    const strideWidth = this.convInfo.strideWidth;\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, true, 4)}\n      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {\n        var value = vec4<f32>(0.0);\n        if (col >=0 && col < uniforms.inDims[1]) {\n          value = getX(batch, row, col, channel);\n        }\n        return value;\n      }\n\n      ${main('index')} {\n        let width0 = uniforms.outShape[3] / ${this.outputComponent};\n        let d1 = (index % width0) * ${this.outputComponent};\n        var index1 = index / width0;\n        let width1 = uniforms.virtualWidth / ${this.workPerThread};\n        let c = (index1 % width1) * ${this.workPerThread};\n        index1 = index1 / width1;\n        let r = index1 % uniforms.outShape[1];\n        let batch = index1 / uniforms.outShape[1];\n\n        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(${strideHeight}, ${\n        strideWidth}) - uniforms.pads;\n\n        let xRCorner = xRCCorner.x;\n        let xCCorner = xRCCorner.y;\n        var xVals : array<vec4<f32>, ${xNumber}>;\n        var dotProd : array<vec4<f32>, ${this.workPerThread}>;\n        for (var i = 0; i < ${this.workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n\n        // Use constant instead of uniform can give better performance.\n        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {\n          let xR = xRCorner + wR;\n          if (xR >=0 && xR < uniforms.inDims[0]) {\n            for (var i = 0; i < ${xNumber}; i++) {\n              xVals[i] = readX(batch, xR, xCCorner + i, d1);\n            }\n            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {\n              let wValue = getW(wR, wC, d1, 0);\n              for (var i = 0; i < ${this.workPerThread}; i++) {\n                dotProd[i] = fma(xVals[i * ${\n        strideWidth} + wC], wValue, dotProd[i]);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {\n          let coords = vec4<i32>(batch, r, c + i, d1);\n          if (coordsInBounds4D(coords, uniforms.outShape)) {\n            var value = dotProd[i];\n            ${biasActivationSnippet(this.addBias, this.activation)}\n            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {activationFnSnippet, biasActivationSnippet} from './activation_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthwiseConv2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'W'];\n  uniforms = `pads : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,\n      filterWidth : i32, strides : vec2<i32>, dilations : vec2<i32>,`;\n  // This is an experimental value.\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  convInfo: backend_util.Conv2DInfo;\n  addBias: boolean;\n  activation: backend_util.Activation;\n  hasPreluActivation: boolean;\n  isChannelsLast: boolean;\n  size = true;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: backend_util.Activation = null, hasPreluActivation = false) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    this.convInfo = convInfo;\n    this.addBias = addBias;\n    this.activation = activation;\n    this.hasPreluActivation = hasPreluActivation;\n    this.shaderKey = `depthwise_${this.activation}_${this.isChannelsLast}`;\n  }\n\n  getUserCode(): string {\n    const getXSnippet = this.isChannelsLast ? 'getX(batch, xR, xC, d1);' :\n                                              'getX(batch, d1, xR, xC);';\n\n    const userCode = `\n      ${activationFnSnippet(this.activation, this.hasPreluActivation, false, 4)}\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let batch = coords[0];\n          let xRCCorner = vec2<i32>(coords.${\n        this.isChannelsLast ? 'yz' : 'zw'}) * uniforms.strides - uniforms.pads;\n          let d2 = coords[${this.isChannelsLast ? 3 : 1}];\n          let channelMul = uniforms.wShape[3];\n          let d1 = d2 / channelMul;\n          let q = d2 % channelMul;\n\n          let inputRowStart = xRCCorner.x;\n          let inputColStart = xRCCorner.y;\n          let inputRowEnd = inputRowStart + uniforms.filterHeight *\n              uniforms.dilations[0];\n          let inputColEnd = inputColStart + uniforms.filterWidth *\n              uniforms.dilations[1];\n\n          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get\n          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all\n          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.\n          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.\n          var value = 0.0;\n\n          // Extract if checking out of for loop for performance.\n          if (inputRowStart >= 0 && inputColStart >= 0 &&\n            inputRowEnd < uniforms.inDims[0] &&\n                inputColEnd < uniforms.inDims[1]) {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  let xVal = ${getXSnippet};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            } else {\n              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {\n                let xR = inputRowStart + wR * uniforms.dilations[0];\n\n                if (xR < 0 || xR >= uniforms.inDims[0]) {\n                  continue;\n                }\n\n                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {\n                  let xC = inputColStart + wC * uniforms.dilations[1];\n\n                  if (xC < 0 || xC >= uniforms.inDims[1]) {\n                    continue;\n                  }\n\n                  let xVal = ${getXSnippet};\n                  let wVal = getW(wR, wC, d1, q);\n                  value = value + xVal * wVal;\n                }\n              }\n            }\n            ${biasActivationSnippet(this.addBias, this.activation)}\n          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DNCHWSharedProgram} from '../depthwise_conv2d_nchw_shared_webgpu';\nimport {DepthwiseConv2DVec4Program} from '../depthwise_conv2d_vec4_webgpu';\nimport {DepthwiseConv2DProgram} from '../depthwise_conv2d_webgpu';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */, $dataFormat);\n  const dimensions = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]},\n  ];\n\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  let program: DepthwiseConv2DProgram|DepthwiseConv2DVec4Program|\n      DepthwiseConv2DNCHWSharedProgram;\n  if (!isChannelsLast && convInfo.inHeight > 16 && convInfo.inWidth > 16 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      convInfo.dilationWidth === 1 && convInfo.dilationHeight === 1 &&\n      convInfo.inChannels === convInfo.outChannels) {\n    program = new DepthwiseConv2DNCHWSharedProgram(\n        convInfo.outShape, convInfo.filterHeight, convInfo.filterWidth);\n  } else if (\n      isChannelsLast && convInfo.outHeight > 4 && convInfo.outWidth > 4 &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.inChannels === convInfo.outChannels &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(convInfo);\n    dimensions.push({type: 'int32', data: [program.virtualWidth]});\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n    dimensions.push(\n        {type: 'int32', data: [convInfo.filterHeight]},\n        {type: 'int32', data: [convInfo.filterWidth]},\n        {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        });\n  }\n\n  return backend.runWebGPUProgram(program, [x, filter], x.dtype, dimensions);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNative as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DepthwiseConv2DDerFilterProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'dy'];\n  uniforms =\n      `strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>, outHeight : i32,\n      outWidth : i32, inHeight : i32, inWidth : i32, batchSize : i32, channelMul : i32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `depthwise_conv2d_backprop_filter`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let wR = coords[0];\n        let wC = coords[1];\n        let d1 = coords[2];\n        let dm = coords[3];\n        let d2 = d1 * uniforms.channelMul + dm;\n\n        var dotProd = 0.0;\n        for (var b = 0; b < uniforms.batchSize; b++) {\n          for (var yR = 0; yR < uniforms.outHeight; yR++) {\n            let xR = wR + yR * uniforms.strides[0] - uniforms.pads[0];\n\n            if (xR < 0 || xR >= uniforms.inHeight) {\n              continue;\n            }\n\n            for (var yC = 0; yC < uniforms.outWidth; yC++) {\n              let xC = wC + yC * uniforms.strides[1] - uniforms.pads[1];\n\n              if (xC < 0 || xC >= uniforms.inWidth) {\n                continue;\n              }\n\n              let dyValue = getDy(b, yR, yC, d2);\n              let xValue = getX(b, xR, xC, d1);\n              dotProd += xValue * dyValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy', 'W'];\n  uniforms = `strides : vec2<i32>, pads : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32, channelMul : i32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `depthwise_conv2d_backprop_input`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d1 = coords[3];\n        let dyCorner = coords.yz - uniforms.pads;\n        let dyRCorner = dyCorner.x;\n        let dyCCorner = dyCorner.y;\n\n        var dotProd = 0.0;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n\n          let idyR = i32(dyR);\n          let wRPerm = uniforms.filterDims[0] - 1 - wR;\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n\n            let idyC = i32(dyC);\n            let wCPerm = uniforms.filterDims[1] - 1 - wC;\n\n            for (var dm = 0; dm < uniforms.channelMul; dm++) {\n              let d2 = d1 * uniforms.channelMul + dm;\n              let xValue = getDy(batch, idyR, idyC, d2);\n              let wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_depthwise_webgpu';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.inHeight]},\n    {type: 'int32', data: [convInfo.inWidth]},\n    {type: 'int32', data: [convInfo.batchSize]},\n    {type: 'int32', data: [convInfo.outChannels / convInfo.inChannels]}\n  ];\n  return backend.runWebGPUProgram(program, [x, dy], 'float32', uniformData);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_depthwise_webgpu';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n      type: 'int32',\n      data: [\n        convInfo.filterHeight - 1 - convInfo.padInfo.top,\n        convInfo.filterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]},\n    {type: 'int32', data: [convInfo.outChannels / convInfo.inChannels]}\n  ];\n  return backend.runWebGPUProgram(program, [dy, filter], dy.dtype, uniformData);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DiagProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'diag';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let value = select(0.0, getX(coords[0]), coords[0] == coords[1]);\n          setOutputAtIndex(index, value);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DiagProgram} from '../diag_webgpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGPUProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeData(flat.dataId);\n  backend.disposeData(res.dataId);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgpu',\n  kernelFunc: diag as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Dilation2DProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'w'];\n  uniforms =\n      'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'dilation2d';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let neg_infinity = -3.4e38;\n           let coords = getOutputCoords();\n           let batch = coords.x;\n           let d1 = coords.w;\n           let outTopLeftCorner = coords.yz * uniforms.strides - uniforms.pads;\n           let hBeg = outTopLeftCorner.x;\n           let wBeg = outTopLeftCorner.y;\n\n           var curVal = neg_infinity;\n           for (var h = 0; h < uniforms.filterDims[0]; h = h + 1) {\n             let hIn = hBeg + h * uniforms.dilations[0];\n\n             if (hIn >= 0 && hIn < uniforms.xShape[1]) {\n               for (var w = 0; w < uniforms.filterDims[1]; w = w + 1) {\n                 let wIn = wBeg + w * uniforms.dilations[1];\n\n                 if (wIn >= 0 && wIn < uniforms.xShape[2]) {\n                   let val = getX(batch, hIn, wIn, d1) + getW(h, w, d1);\n                   if (val > curVal) {\n                     curVal = val;\n                   }\n                 }\n               }\n             }\n           }\n\n           setOutputAtIndex(index, curVal);\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Dilation2DProgram} from '../dilation_webgpu';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  const padInfo = [convInfo.padInfo.top, convInfo.padInfo.left];\n  const uniformData = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [...padInfo]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}\n  ];\n\n  const program = new Dilation2DProgram(convInfo);\n  const out =\n      backend.runWebGPUProgram(program, [x, filter], x.dtype, uniformData);\n\n  return out;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgpu',\n  kernelFunc: dilation2D as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType} from '@tensorflow/tfjs-core';\n\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class Dilation2DBackpropInputProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'w', 'dy'];\n  uniforms =\n      'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  type: DataType;\n\n  constructor(convInfo: backend_util.Conv2DInfo, outputDtype: DataType) {\n    this.outputShape = convInfo.inShape;\n    this.dispatchLayout = flatDispatchLayout(convInfo.outShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, convInfo.outShape, this.workgroupSize);\n\n    if (outputDtype !== 'float32' && outputDtype !== 'int32') {\n      throw new Error(`Dilation2DBackpropInput only supports float32 and int32\n          types, does not support ${outputDtype} type.`);\n    }\n    this.type = outputDtype;\n    this.shaderKey = 'dilation2DBackpropInput';\n  }\n\n  getUserCode(): string {\n    // This implementation follows the TF c++ cuda implementation:\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/dilation_ops_gpu.cu.cc\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var xRMax = 0;\n           var xCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     xRMax = xR;\n                     xCMax = xC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.xShape[3] *\n               (xCMax + uniforms.xShape[2] * (xRMax + uniforms.xShape[1] * b));\n           let value = getDy(b, r, c, d);\n           ${\n        atomicAddSnippet(\n            '&result[flatIndexIn]', 'value', this.type as 'float32' | 'int32')}\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n\nexport class Dilation2DBackpropFilterProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'w', 'dy'];\n  uniforms =\n      'filterDims: vec2<i32>, pads: vec2<i32>, strides: vec2<i32>, dilations: vec2<i32>, dySize: i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  type: DataType;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, shape: number[],\n      outputDtype: DataType) {\n    this.outputShape = convInfo.filterShape;\n    this.dispatchLayout = flatDispatchLayout(convInfo.outShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, convInfo.outShape, this.workgroupSize);\n\n    if (outputDtype !== 'float32' && outputDtype !== 'int32') {\n      throw new Error(`Dilation2DBackpropFilter only supports float32 and int32\n          types, does not support ${outputDtype} type.`);\n    }\n    this.type = outputDtype;\n    this.shaderKey = 'dilation2DBackpropFilter';\n  }\n\n  getUserCode(): string {\n    // This implementation follows the TF c++ cuda implementation:\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/dilation_ops_gpu.cu.cc\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.dySize) {\n           let coords = getDyCoordsFromIndex(index);\n           let b = coords[0];\n           let r = coords[1];\n           let c = coords[2];\n           let d = coords[3];\n\n           let dyCorner = vec2<i32>(r, c) * uniforms.strides - uniforms.pads;\n           var curVal = -3.4e38;  // neg_infinity\n           var wRMax = 0;\n           var wCMax = 0;\n\n           // In the case of multiple argmax branches, we only back-propagate\n           // along the last branch, i.e., the one with largest value of\n           // 'wR * uniforms.filterDims[1] + wC', similarly to the max-pooling\n           // backward routines.\n           for (var wR = 0; wR < uniforms.filterDims[0]; wR++) {\n             let xR = dyCorner.x + wR * uniforms.dilations[0];\n\n             if (xR >= 0 && xR < uniforms.xShape[1]) {\n               for (var wC = 0; wC < uniforms.filterDims[1]; wC++) {\n                 let xC = dyCorner.y + wC * uniforms.dilations[1];\n\n                 if (xC >= 0 && xC < uniforms.xShape[2]) {\n                   let val = getX(b, xR, xC, d) + getW(wR, wC, d);\n                   if (val > curVal) {\n                     curVal = val;\n                     wRMax = wR;\n                     wCMax = wC;\n                   }\n                 }\n               }\n             }\n           }\n\n           let flatIndexIn = d + uniforms.wShape[2] * (wCMax + wRMax * uniforms.wShape[1]);\n           let value = getDy(b, r, c, d);\n           ${\n        atomicAddSnippet(\n            '&result[flatIndexIn]', 'value', this.type as 'float32' | 'int32')}\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Dilation2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Dilation2DBackpropFilterProgram} from '../dilation_backprop_webgpu';\nimport {fill} from './Fill';\n\nexport function dilation2DBackpropFilter(args: {\n  inputs: Dilation2DBackpropFilterInputs,\n  attrs: Dilation2DAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, dy} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n\n  const dtype = filter.dtype;\n  const program =\n      new Dilation2DBackpropFilterProgram(convInfo, filter.shape, dtype);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]},\n    {type: 'int32', data: [util.sizeFromShape(convInfo.outShape)]}\n  ];\n  const output = fill({backend, attrs: {shape: filter.shape, value: 0, dtype}});\n  return backend.runWebGPUProgram(\n      program, [x, filter, dy], dtype, uniformData, output);\n}\n\nexport const dilation2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'webgpu',\n  kernelFunc: dilation2DBackpropFilter as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Dilation2DBackpropInputInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Dilation2DBackpropInputProgram} from '../dilation_backprop_webgpu';\nimport {fill} from './Fill';\n\nexport function dilation2DBackpropInput(args: {\n  inputs: Dilation2DBackpropInputInputs,\n  attrs: Dilation2DAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, dy} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n\n  const dtype = x.dtype;\n  const program = new Dilation2DBackpropInputProgram(convInfo, dtype);\n  const uniformData = [\n    {type: 'int32', data: [convInfo.filterHeight, convInfo.filterWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]},\n    {type: 'int32', data: [util.sizeFromShape(convInfo.outShape)]}\n  ];\n  const output =\n      fill({backend, attrs: {shape: convInfo.inShape, value: 0, dtype}});\n  return backend.runWebGPUProgram(\n      program, [x, filter, dy], dtype, uniformData, output);\n}\n\nexport const dilation2DBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'webgpu',\n  kernelFunc: dilation2DBackpropInput as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {getMainHeaderString as main, PixelsOpType, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class DrawProgram implements WebGPUProgram {\n  variableNames = ['Image'];\n  uniforms = 'alpha: f32,';\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  type: DataType;\n  textureFormat: GPUTextureFormat;\n  pixelsOpType = PixelsOpType.DRAW;\n  size = true;\n\n  constructor(\n      outShape: number[], type: DataType, textureFormat: GPUTextureFormat) {\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.type = type;\n    this.textureFormat = textureFormat;\n    this.shaderKey = `draw_${type}_${textureFormat}`;\n  }\n\n  getUserCode(): string {\n    let calculateResult;\n    const value = this.type === 'float32' ? 'value' : 'value / 255.0';\n    calculateResult = `\n      if (uniforms.numChannels == 1) {\n        rgba[0] = ${value};\n        rgba[1] = ${value};\n        rgba[2] = ${value};\n      } else {\n        rgba[d] = ${value};\n      }`;\n\n    const userCode = `\n       @group(0) @binding(0) var outImage : texture_storage_2d<${\n        this.textureFormat}, write>;\n       ${main('index')} {\n         if (index < uniforms.size) {\n           var rgba = vec4<f32>(0.0, 0.0, 0.0, uniforms.alpha);\n           for (var d = 0; d < uniforms.numChannels; d = d + 1) {\n             let value = f32(inBuf[index * uniforms.numChannels + d]);\n             ${calculateResult}\n           }\n           rgba.x = rgba.x * rgba.w;\n           rgba.y = rgba.y * rgba.w;\n           rgba.z = rgba.z * rgba.w;\n           let coords = getCoordsFromIndex(index);\n           textureStore(outImage, vec2<i32>(coords.yx), rgba);\n         }\n       }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use backend file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {Draw, DrawAttrs, DrawInputs,} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DrawProgram} from '../draw_webgpu';\n\nexport function draw(\n    args: {inputs: DrawInputs, backend: WebGPUBackend, attrs: DrawAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image} = inputs;\n  const {canvas, options} = attrs;\n  const [height, width] = image.shape.slice(0, 2);\n  const {imageOptions} = options || {};\n  const alpha = imageOptions ?.alpha || 1;\n\n  //  'rgba8unorm' should work on macOS according to\n  //  https://bugs.chromium.org/p/chromium/issues/detail?id=1298618. But\n  //  failed on macOS/M2. So use 'bgra8unorm' first when available.\n  const format = backend.device.features.has('bgra8unorm-storage') ?\n      'bgra8unorm' :\n      'rgba8unorm';\n  const outShape = [height, width];\n  const program = new DrawProgram(outShape, image.dtype, format);\n  canvas.width = width;\n  canvas.height = height;\n  const backendName = 'webgpu';\n  let gpuContext = canvas.getContext(backendName);\n  let canvasWebGPU;\n  if (!gpuContext) {\n    canvasWebGPU = new OffscreenCanvas(width, height);\n    gpuContext = canvasWebGPU.getContext(backendName);\n  }\n  const numChannels = image.shape.length === 3 ? image.shape[2] : 1;\n  gpuContext.configure({\n    device: backend.device,\n    format,\n    usage: GPUTextureUsage.STORAGE_BINDING,\n    alphaMode: 'premultiplied'\n  });\n\n  const outputDtype = 'int32';\n  const output = backend.makeTensorInfo(outShape, outputDtype);\n  const info = backend.tensorMap.get(output.dataId);\n  info.resource = gpuContext.getCurrentTexture();\n  info.external = true;\n\n  const uniformData =\n      [{type: 'uint32', data: [numChannels]}, {type: 'float32', data: [alpha]}];\n  backend.runWebGPUProgram(program, [image], outputDtype, uniformData, output);\n\n  if (canvasWebGPU) {\n    const canvas2dContext = canvas.getContext('2d');\n    if (!canvas2dContext) {\n      throw new Error(\n          `Please make sure this canvas has only been used for 2d or webgpu context!`);\n    }\n    canvas2dContext.drawImage(canvasWebGPU, 0, 0);\n  }\n  backend.disposeData(output.dataId);\n  return image;\n}\n\nexport const drawConfig: KernelConfig = {\n  kernelName: Draw,\n  backendName: 'webgpu',\n  kernelFunc: draw as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nexport const multiplyKernelFunc = binaryKernelFunc({\n  opType: BinaryOpType.MUL,\n  cpuKernelImpl: cpuMultiply,\n  supportsComplex: true\n});\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgpu',\n  kernelFunc: multiplyKernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: WebGPUBackend, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'sum', backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgpu',\n  kernelFunc: sum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {multiplyKernelFunc} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: WebGPUBackend, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out =\n            multiplyKernelFunc({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeData(tensorInfo.dataId);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgpu',\n  kernelFunc: einsum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const elu = unaryKernelFunc({opType: UnaryOpType.ELU});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgpu',\n  kernelFunc: elu\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {BinaryOpType} from '../binary_op_util';\nimport {BinaryOpProgram} from '../binary_op_webgpu';\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: WebGPUBackend}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program =\n          new BinaryOpProgram(BinaryOpType.ELU_DER, dy.shape, y.shape);\n      return backend.runWebGPUProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgpu',\n  kernelFunc: eluGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU as cpuEqual} from '../kernel_utils/shared';\n\nexport const equal = binaryKernelFunc(\n    {opType: BinaryOpType.EQUAL, dtype: 'bool', cpuKernelImpl: cpuEqual});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const erf = unaryKernelFunc({opType: UnaryOpType.ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgpu',\n  kernelFunc: erf\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const exp = unaryKernelFunc({\n  opType: UnaryOpType.EXP,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgpu',\n  kernelFunc: exp\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: WebGPUBackend\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgpu',\n  kernelFunc: expandDims as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const expm1 =\n    unaryKernelFunc({opType: UnaryOpType.EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgpu',\n  kernelFunc: expm1\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FFTProgram implements WebGPUProgram {\n  variableNames: string[] = ['real', 'imag'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'exponentMultiplier : f32, denominator: f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  component: string;\n\n  constructor(component: 'real'|'imag', shape: [number, number]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.component = component;\n    this.shaderKey = `fft_${component}`;\n  }\n\n  getUserCode(): string {\n    const opString = this.component === 'real' ?\n        'return real * expR - imag * expI;' :\n        'return real * expI + imag * expR;';\n    const userCode = `\n    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {\n      ${opString}\n    }\n\n    fn mulMatDFT(batch: i32, index: i32) -> f32 {\n      let indexRatio = f32(index) / f32(uniforms.realShape[1]);\n      let exponentMultiplierTimesIndexRatio =\n          uniforms.exponentMultiplier * indexRatio;\n\n      var result = 0.0;\n\n      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {\n        // x = (-2|2 * PI / N) * index * i;\n        let x = exponentMultiplierTimesIndexRatio * f32(i);\n        let expR = cos(x);\n        let expI = sin(x);\n        let real = getReal(batch, i);\n        let imag = getImag(batch, i);\n\n        result = result +\n            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;\n      }\n\n      return result;\n    }\n\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FFTProgram} from '../fft_webgpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: WebGPUBackend): TensorInfo {\n  const xData = backend.tensorMap.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const toDispose = [];\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n  toDispose.push(input2D);\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape);\n  const imagProgram = new FFTProgram('imag', xShape);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const exponentMultiplier = inverse ? 2.0 * Math.PI : -2.0 * Math.PI;\n  const denominator = inverse ? xShape[1] : 1.0;\n  const uniformData = [\n    {type: 'float32', data: [exponentMultiplier]},\n    {type: 'float32', data: [denominator]}\n  ];\n\n  const realPart =\n      backend.runWebGPUProgram(realProgram, inputs, 'float32', uniformData);\n  toDispose.push(realPart);\n  const imagPart =\n      backend.runWebGPUProgram(imagProgram, inputs, 'float32', uniformData);\n  toDispose.push(imagPart);\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n  toDispose.push(complexOutput);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgpu',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FlipLeftRightProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(imageShape: [number, number, number, number]) {\n    this.outputShape = imageShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'flipLeftRight';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let coordX = uniforms.xShape[2] - coords[2] - 1;\n          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);\n          setOutputAtIndex(index, outputValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FlipLeftRightProgram} from '../flip_left_right_webgpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n    kernelName: FlipLeftRight,\n    backendName: 'webgpu',\n    kernelFunc: ({inputs, backend}) => {\n      const {image} = inputs as FlipLeftRightInputs;\n      const webgpuBackend = backend as WebGPUBackend;\n\n      const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n      const output =\n          webgpuBackend.runWebGPUProgram(program, [image], image.dtype);\n      return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const floor =\n    unaryKernelFunc({opType: UnaryOpType.FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgpu',\n  kernelFunc: floor\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorDivImplCPU} from '../kernel_utils/shared';\n\nexport const floorDiv = binaryKernelFunc({\n  opType: BinaryOpType.FLOOR_DIV,\n  cpuKernelImpl: floorDivImplCPU,\n  dtype: 'int32'\n});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, PixelsOpType, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class FromPixelsProgram implements WebGPUProgram {\n  dispatch: [number, number, number];\n  dispatchLayout: {x: number[]};\n  pixelsOpType = PixelsOpType.FROM_PIXELS;\n  outputShape: number[] = [0];\n  shaderKey: string;\n  importVideo: boolean;\n  variableNames: string[] = [];\n  workgroupSize: [number, number, number] =\n      [256, 1, 1];  // The empirical value.\n\n  constructor(outputShape: number[], numChannels: number, importVideo = false) {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [numChannels, 1, 1]);\n\n    this.importVideo = importVideo;\n    this.shaderKey = `fromPixels_${this.importVideo}`;\n  }\n\n  getUserCode(): string {\n    const textureLoad = this.importVideo ?\n        'textureLoad(src, vec2<i32>(coords.yx));' :\n        'textureLoad(src, vec2<i32>(coords.yx), 0)';\n    const textureType =\n        this.importVideo ? 'texture_external' : 'texture_2d<f32>';\n    return `\n      @binding(1) @group(0) var src: ${textureType};\n      ${main('index')} {\n        let flatIndex = index * uniforms.numChannels;\n        if (flatIndex < uniforms.size) {\n          let coords = getCoordsFromIndex(flatIndex);\n          let values = ${textureLoad};\n          for (var i = 0; i < uniforms.numChannels; i = i + 1) {\n            result[flatIndex + i] = i32(floor(255.0 * values[i]));\n          }\n        }\n      }\n  `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use backend file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs, util} from '@tensorflow/tfjs-core';\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {FromPixelsProgram} from '../from_pixels_webgpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgpu',\n  kernelFunc: fromPixels as unknown as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n\nexport function fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: WebGPUBackend,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const isCanvas = (typeof (HTMLCanvasElement) !== 'undefined' &&\n                    pixels instanceof HTMLCanvasElement) ||\n      (typeof (OffscreenCanvas) !== 'undefined' &&\n       pixels instanceof OffscreenCanvas);\n  const isImageBitmap =\n      typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap;\n\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n  const outputShape = [height, width, numChannels];\n\n  const importVideo =\n      env().getBool('WEBGPU_IMPORT_EXTERNAL_TEXTURE') && isVideo;\n  const isVideoOrImage = isVideo || isImage;\n  if (isImageBitmap || isCanvas || isVideoOrImage) {\n    let resource;\n    if (importVideo) {\n      resource = backend.device.importExternalTexture(\n          {source: pixels as HTMLVideoElement});\n    } else {\n      if (isVideoOrImage) {\n        const newWillReadFrequently =\n            env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n        if (fromPixels2DContext == null ||\n            newWillReadFrequently !== willReadFrequently) {\n          willReadFrequently = newWillReadFrequently;\n          fromPixels2DContext = document.createElement('canvas').getContext(\n              '2d', {willReadFrequently});\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(\n            pixels as HTMLVideoElement | HTMLImageElement, 0, 0, width, height);\n        pixels = fromPixels2DContext.canvas;\n      }\n\n      const usage = GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING;\n      const format = 'rgba8unorm' as GPUTextureFormat;\n      const texture = backend.textureManager.acquireTexture(\n          outputShape[1], outputShape[0], format, usage);\n      backend.queue.copyExternalImageToTexture(\n          {source: pixels as HTMLCanvasElement | ImageBitmap}, {texture},\n          [outputShape[1], outputShape[0]]);\n      resource = texture;\n    }\n\n    const size = util.sizeFromShape(outputShape);\n    const strides = util.computeStrides(outputShape);\n    const program =\n        new FromPixelsProgram(outputShape, numChannels, importVideo);\n\n    const uniformData = [\n      {type: 'uint32', data: [size]}, {type: 'uint32', data: [numChannels]},\n      {type: 'uint32', data: [...strides]}\n    ];\n    const input = backend.makeTensorInfo([height, width], 'int32');\n    const info = backend.tensorMap.get(input.dataId);\n    info.resource = resource;\n\n    const result =\n        backend.runWebGPUProgram(program, [input], 'int32', uniformData);\n    backend.disposeData(input.dataId);\n    return result;\n  }\n\n  // TODO: Encoding should happen on GPU once we no longer have to download\n  // image data to the CPU.\n  const imageData = (pixels as ImageData | backend_util.PixelData).data;\n  let pixelArray = imageData;\n  if (numChannels != null && numChannels !== 4) {\n    pixelArray = new Uint8Array(pixels.width * pixels.height * numChannels);\n\n    const dataLength = imageData.length;\n    let j = 0;\n    for (let i = 0; i < dataLength; i++) {\n      if (i % 4 < numChannels) {\n        pixelArray[j++] = imageData[i];\n      }\n    }\n  }\n\n  const output =\n      backend.makeTensorInfo(outputShape, 'int32', new Int32Array(pixelArray));\n  backend.uploadToGPU(output.dataId);\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class BatchNormProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y?: number[], z?: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[];\n  uniforms = 'varianceEpsilon : f32,';\n  // This is an experimental value.\n  workgroupSize: [number, number, number] = [128, 1, 1];\n  offsetShape: number[]|null;\n  scaleShape: number[]|null;\n  varianceEpsilon: number;\n  size = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n    }\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n    }\n    this.offsetShape = offsetShape;\n    this.scaleShape = scaleShape;\n    this.shaderKey = 'batchNorm';\n  }\n\n  getUserCode(): string {\n    let offsetSnippet = '0.0';\n    if (this.offsetShape != null) {\n      offsetSnippet = 'getOffsetByOutputIndex(index)';\n    }\n\n    let scaleSnippet = '1.0';\n    if (this.scaleShape != null) {\n      scaleSnippet = 'getScaleByOutputIndex(index)';\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size)\n        {\n          let xValue = getXByOutputIndex(index);\n          let meanValue = getMeanByOutputIndex(index);\n          let varianValue = getVarianceByOutputIndex(index);\n          let offsetValue = ${offsetSnippet};\n          let scaleValue = ${scaleSnippet};\n          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));\n          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));\n        }\n      }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, Tensor} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {BatchNormProgram} from '../batchnorm_webgpu';\n\nexport const fusedBatchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x, scale, offset, mean, variance} = inputs as FusedBatchNormInputs;\n    const {varianceEpsilon} = attrs as unknown as FusedBatchNormAttrs;\n    const webGPUBackend = backend as WebGPUBackend;\n    const batchNormInputs = [x as Tensor, mean as Tensor, variance as Tensor];\n    let offsetShape = null;\n    if (offset != null) {\n      offsetShape = offset.shape;\n      batchNormInputs.push(offset as Tensor);\n    }\n    let scaleShape = null;\n    if (scale != null) {\n      scaleShape = scale.shape;\n      batchNormInputs.push(scale as Tensor);\n    }\n    const program = new BatchNormProgram(\n        x.shape, mean.shape, variance.shape, offsetShape, scaleShape);\n    const uniformData = [{type: 'float32', data: [varianceEpsilon]}];\n    return webGPUBackend.runWebGPUProgram(\n        program, batchNormInputs, x.dtype, uniformData);\n  }\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {conv2DImpl} from './Conv2D_impl';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  return conv2DImpl({\n    x,\n    filter,\n    convInfo,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedConv2d as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {DepthwiseConv2DVec4Program} from '../depthwise_conv2d_vec4_webgpu';\nimport {DepthwiseConv2DProgram} from '../depthwise_conv2d_webgpu';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: WebGPUBackend\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n\n  const dimensions = [\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]},\n  ];\n\n  let program: DepthwiseConv2DProgram|DepthwiseConv2DVec4Program;\n  if (convInfo.outHeight > 4 && convInfo.outWidth > 4 &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.inChannels === convInfo.outChannels &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.inChannels % 4 === 0) {\n    program = new DepthwiseConv2DVec4Program(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push({type: 'int32', data: [program.virtualWidth]});\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, activation, hasPreluActivationWeights);\n    dimensions.push(\n        {type: 'int32', data: [convInfo.filterHeight]},\n        {type: 'int32', data: [convInfo.filterWidth]},\n        {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n          type: 'int32',\n          data: [convInfo.dilationHeight, convInfo.dilationWidth]\n        });\n  }\n  if (activation === 'leakyrelu') {\n    dimensions.push({type: 'float32', data: [leakyreluAlpha]});\n    program.uniforms += ' alpha : f32,';\n  }\n  const result =\n      backend.runWebGPUProgram(program, programInputs, 'float32', dimensions);\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgpu',\n  kernelFunc: fusedDepthwiseConv2D as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class GatherNDProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[] = ['A', 'indices'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  sliceDim: number;\n  constructor(sliceDim: number, shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `gathernd_${sliceDim}`;\n    this.sliceDim = sliceDim;\n    this.uniforms = `sliceDim : i32, strides : ${getCoordsDataType(sliceDim)},`;\n  }\n\n  getUserCode(): string {\n    let strideString;\n    if (this.sliceDim > 1) {\n      strideString = 'uniforms.strides[j]';\n    } else {\n      strideString = 'uniforms.strides';\n    }\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          var flattenIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexTemp = i32(round(getIndices(coords[0], j)));\n            let strideNum = ${strideString};\n            flattenIndex = flattenIndex + indexTemp * strideNum;\n          }\n\n          setOutputAtIndex(index, getA(flattenIndex, coords[1]));\n        }\n      }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, Rank, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {GatherNDProgram} from '../gather_nd_webgpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync<Rank, 'float32'>(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program = new GatherNDProgram(sliceRank, [numSlices, sliceSize]);\n  const uniformData =\n      [{type: 'int32', data: [sliceRank]}, {type: 'int32', data: strides}];\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype, uniformData);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgpu',\n  kernelFunc: gatherNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class GatherProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames: string[] = ['A', 'indices'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  aShape: number[];\n  size = true;\n\n  constructor(aShape: number[], outputShape: number[]) {\n    this.outputShape = aShape.slice();\n    this.aShape = aShape;\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = `gather`;\n  }\n\n  getUserCode(): string {\n    const sourceCoords = getSourceCoords(this.aShape);\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let indexZ = i32(getIndices(resRC.x, resRC.z));\n          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);\n          setOutputAtIndex(index, inBounds * getA(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: number[]): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('indexZ');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, Rank, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {GatherProgram} from '../gather_webgpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(\n    args:\n        {inputs: GatherV2Inputs, backend: WebGPUBackend, attrs: GatherV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  // Unlike WebGL, WebGPU won't check if index is out of bound by calling\n  // backend.readSync() function in debug mode.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices])) {\n    const indicesTensorData = backend.tensorMap.get(flattenIndex.dataId);\n    const indicesValues = indicesTensorData.values as TypedArray;\n    const indicesBuffer =\n        buffer(flattenIndex.shape, flattenIndex.dtype, indicesValues) as\n        TensorBuffer<Rank>;\n    const flattenXTensorData = backend.tensorMap.get(flattenX.dataId);\n    const xValues = flattenXTensorData.values as TypedArray;\n    const xBuffer =\n        buffer(flattenX.shape, flattenX.dtype, xValues) as TensorBuffer<Rank>;\n    const outBuf = gatherV2ImplCPU(xBuffer, indicesBuffer, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeData(t.dataId));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgpu',\n  kernelFunc: gatherV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU as cpuGreater} from '../kernel_utils/shared';\n\nexport const greater = binaryKernelFunc({\n  opType: BinaryOpType.GREATER,\n  cpuKernelImpl: cpuGreater,\n  dtype: 'bool',\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU as cpuGreaterEqual} from '../kernel_utils/shared';\n\nexport const greaterEqual = binaryKernelFunc({\n  opType: BinaryOpType.GREATER_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuGreaterEqual\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgpu',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const isFinite =\n    unaryKernelFunc({opType: UnaryOpType.IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgpu',\n  kernelFunc: isFinite\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const isInf =\n    unaryKernelFunc({opType: UnaryOpType.IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgpu',\n  kernelFunc: isInf\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const isNaN =\n    unaryKernelFunc({opType: UnaryOpType.IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgpu',\n  kernelFunc: isNaN\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: WebGPUBackend,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n  const uniformData = [{type: 'float32', data: [alpha]}];\n  const program =\n      new UnaryOpProgram(x.shape, UnaryOpType.LEAKYRELU, 'alpha : f32,');\n  return backend.runWebGPUProgram(program, [x], 'float32', uniformData);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgpu',\n  kernelFunc: leakyRelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU as cpuLess} from '../kernel_utils/shared';\n\nexport const less = binaryKernelFunc(\n    {opType: BinaryOpType.LESS, dtype: 'bool', cpuKernelImpl: cpuLess});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU as cpuLessEqual} from '../kernel_utils/shared';\n\nexport const lessEqual = binaryKernelFunc({\n  opType: BinaryOpType.LESS_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: cpuLessEqual\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class LinSpaceProgram implements WebGPUProgram {\n  variableNames: string[] = [];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'start : f32, step : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(shape: number) {\n    this.outputShape = [shape];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'linSpace';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          setOutputAtIndex(index, uniforms.start + f32(index) * uniforms.step);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {LinSpaceProgram} from '../lin_space_webgpu';\n\nexport function linSpace(args: {backend: WebGPUBackend, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n  const step = (stop - start) / (num - 1);\n\n  const program = new LinSpaceProgram(num);\n  const uniformData =\n      [{type: 'float32', data: [start]}, {type: 'float32', data: [step]}];\n  return backend.runWebGPUProgram(program, [], 'float32', uniformData);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgpu',\n  kernelFunc: linSpace as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const log =\n    unaryKernelFunc({opType: UnaryOpType.LOG, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgpu',\n  kernelFunc: log\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const log1p = unaryKernelFunc({opType: UnaryOpType.LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgpu',\n  kernelFunc: log1p\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const logicalAnd =\n    binaryKernelFunc({opType: BinaryOpType.LOGICAL_AND, dtype: 'bool'});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const logicalNot = unaryKernelFunc({opType: UnaryOpType.LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgpu',\n  kernelFunc: logicalNot\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const logicalOr = binaryKernelFunc({opType: BinaryOpType.LOGICAL_OR});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nconst powOperatorSnippet = `\n  var powValue = 0.0;\n  let basis = uniforms.bias + uniforms.alpha * sum;\n  if (uniforms.beta == 0.5) {\n    powValue = inverseSqrt(basis);\n  } else if (uniforms.beta == 1.0) {\n    powValue = 1.0 / basis;\n  } else {\n    powValue = exp(log(basis) * (-uniforms.beta));\n  }\n`;\n\nexport class LRNProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'radius : i32, bias : f32, alpha : f32, beta : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(xShape: number[]) {\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'lrn';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n        let d = coords[3];\n\n        let x = getX(b, r, c, d);\n        var sum = 0.0;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let idx = d + i;\n          if (idx >= 0 && idx < uniforms.xShape[3]) {\n            let z = getX(b, r, c, idx);\n            sum = sum + z * z;\n          }\n        }\n        ${powOperatorSnippet}\n\n        setOutputAtIndex(index, x * powValue);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n\nexport class LRNSharedProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[], y: number[], z: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'radius : i32, bias : f32, alpha : f32, beta : f32,';\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  maxAllowRadius = 16;\n  elementsPerWorkgroup: number;\n\n  constructor(xShape: number[], radius: number) {\n    util.assert(\n        radius <= this.maxAllowRadius,\n        () => `Radius must be less than or equal to ${\n            this.maxAllowRadius}, current radius is ${radius}`);\n\n    this.outputShape = xShape;\n    // The reason why not using this.workgroupSize[0] + 2 * maxAllowRadius here\n    // is to make sure that there is only one time global memory load access for\n    // each thread.\n    this.elementsPerWorkgroup = this.workgroupSize[0] - 2 * this.maxAllowRadius;\n    this.dispatchLayout = {x: [3], y: [2], z: [0, 1]};\n    this.dispatch = computeDispatch(this.dispatchLayout, this.outputShape, [\n      this.elementsPerWorkgroup, this.workgroupSize[1], this.workgroupSize[2]\n    ]);\n    this.shaderKey = 'lrn_shared';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    var <workgroup>lrnSub: array<f32, ${this.workgroupSize[0]}>;\n    const elementsPerWorkgroup = ${this.elementsPerWorkgroup};\n    const maxAllowRadius = ${this.maxAllowRadius};\n\n    ${main()} {\n      let localDepth = i32(localId.x);\n      let workgroupDepth = i32(workgroupId.x) * elementsPerWorkgroup;\n      let xDepth = workgroupDepth + localDepth - maxAllowRadius;\n      let b = i32(globalId.z) / uniforms.xShape[1];\n      let r = i32(globalId.z) - b * uniforms.xShape[1];\n      let c = i32(globalId.y);\n      let d = workgroupDepth + localDepth;\n\n      var x = 0.0;\n      if (xDepth >= 0 && xDepth < uniforms.xShape[3]) {\n        x = getX(b, r, c, xDepth);\n      }\n      lrnSub[localDepth] = x;\n      workgroupBarrier();\n\n      if (localDepth < elementsPerWorkgroup && d < uniforms.outShape[3]) {\n        var sum = 0.0;\n        let index = localDepth + maxAllowRadius;\n        for (var i = -uniforms.radius; i <= uniforms.radius; i = i + 1) {\n          let z = lrnSub[index + i];\n          sum = sum + z * z;\n        }\n        ${powOperatorSnippet}\n\n        setOutputAtCoords(b, r, c, d, lrnSub[index] * powValue);\n      }\n    } `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {LRNProgram, LRNSharedProgram} from '../lrn_webgpu';\n\nexport function lrn(\n    args: {inputs: LRNInputs, backend: WebGPUBackend, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  // When the adjacent channels is less than or equal to 16, which could cover\n  // most cases, we use shared memory version to get better performance.\n  // The theoretical adjacent channels may be very large, but the shared memory\n  // size of hardware is limited, so we use the naive version when the adjacent\n  // channels is large.\n  let program: LRNProgram|LRNSharedProgram;\n  if (depthRadius > 16) {\n    program = new LRNProgram(x.shape);\n  } else {\n    program = new LRNSharedProgram(x.shape, depthRadius);\n  }\n  const uniformData = [\n    {type: 'int32', data: [depthRadius]}, {type: 'float32', data: [bias]},\n    {type: 'float32', data: [alpha]}, {type: 'float32', data: [beta]}\n  ];\n  const res = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n\n  return res;\n}\n\nexport const lrnConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgpu',\n  kernelFunc: lrn as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class LRNGradProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  uniforms = 'depthRadius : i32, bias : f32, alpha : f32, beta : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(inputShape: number[]) {\n    this.outputShape = inputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'lrn_grad';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let b = coords[0];\n        let r = coords[1];\n        let c = coords[2];\n\n        let MIN_DEPTH_BEGIN = 0;\n        let MAX_DEPTH_END = uniforms.outShape[3];\n        var result = 0.0;\n        for (var d = MIN_DEPTH_BEGIN; d < MAX_DEPTH_END; d++) {\n          let depthBegin = max(MIN_DEPTH_BEGIN, d - uniforms.depthRadius);\n          let depthEnd = min(MAX_DEPTH_END, d + uniforms.depthRadius + 1);\n\n          var norm = 0.0;\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            } else {\n              break;\n            }\n          }\n\n          norm = uniforms.alpha * norm + uniforms.bias;\n\n          for (var k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; k++) {\n            if (k < depthBegin) {\n              continue;\n            } else if (k >= depthBegin && k < depthEnd) {\n              var dyi = -2.0 * uniforms.alpha * uniforms.beta\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d) / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * uniforms.beta);\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, result);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {LRNGradProgram} from '../lrn_grad_webgpu';\n\nexport function lrnGrad(\n    args: {inputs: LRNGradInputs, backend: WebGPUBackend, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape);\n  const uniformData = [\n    {type: 'int32', data: [depthRadius]}, {type: 'float32', data: [bias]},\n    {type: 'float32', data: [alpha]}, {type: 'float32', data: [beta]}\n  ];\n  const res =\n      backend.runWebGPUProgram(program, [x, y, dy], x.dtype, uniformData);\n\n  return res;\n}\n\nexport const lrnGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgpu',\n  kernelFunc: lrnGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU as cpuMaximum} from '../kernel_utils/shared';\n\nexport const maximum = binaryKernelFunc({\n  opType: BinaryOpType.MAX,\n  cpuKernelImpl: cpuMaximum,\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {poolImpl} from './Pool_impl';\n\nexport function maxPool(\n    args: {inputs: MaxPoolInputs, backend: WebGPUBackend, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  return poolImpl(x, convInfo, 'max', backend);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgpu',\n  kernelFunc: maxPool as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Pool3DProgram} from '../pool_webgpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: WebGPUBackend,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max');\n  const dimensions = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data:\n          [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    }\n  ];\n  return backend.runWebGPUProgram(maxPoolProgram, [x], x.dtype, dimensions);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgpu',\n  kernelFunc: maxPool3d as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MaxPool2DBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy', 'maxPos'];\n  uniforms =\n      `strides : vec2<i32>, pads : vec2<i32>, dilations : vec2<i32>, filterDims : vec2<i32>,\n       outHeight : i32, outWidth : i32`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'maxPool2DBackprop';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords[0];\n        let d = coords[3];\n\n        let dyRCCorner = vec2<i32>(coords.yz) - uniforms.pads;\n        let dyRCorner = dyRCCorner.x;\n        let dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] - 1;\n        for (var wR = 0; wR < uniforms.filterDims[0]; wR += uniforms.dilations[0]) {\n          let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[0]);\n\n          if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n            continue;\n          }\n          let idyR = i32(dyR);\n\n          for (var wC = 0; wC < uniforms.filterDims[1]; wC += uniforms.dilations[1]) {\n            let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[1]);\n\n            if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n              continue;\n            }\n            let idyC = i32(dyC);\n\n            let dyValue = getDy(batch, idyR, idyC, d);\n            let maxPosValue = lastIndex - i32(getMaxPos(batch, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            let curPosValue = wR * uniforms.filterDims[1] + wC;\n            let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy', 'maxPos'];\n  uniforms = `strides : vec3<i32>, pads : vec3<i32>, filterDims : vec3<i32>,\n      outDepth : i32, outHeight : i32, outWidth : i32`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'maxPool3DBackprop';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n        let batch = coords.x;\n        let ch = coords.u;\n\n        let dyCorner = vec3<i32>(coords.y, coords.z, coords.w) - uniforms.pads;\n        let dyDCorner = dyCorner.x;\n        let dyRCorner = dyCorner.y;\n        let dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd = 0.0;\n        let lastIndex = uniforms.filterDims[0] * uniforms.filterDims[1] * uniforms.filterDims[2] - 1;\n\n        for (var wD = 0; wD < uniforms.filterDims[0]; wD++) {\n          let dyD = f32(dyDCorner + wD) / f32(uniforms.strides[0]);\n\n          if (dyD < 0.0 || dyD >= f32(uniforms.outDepth) || fract(dyD) > 0.0) {\n            continue;\n          }\n          let idyD = i32(dyD);\n\n          for (var wR = 0; wR < uniforms.filterDims[1]; wR++) {\n            let dyR = f32(dyRCorner + wR) / f32(uniforms.strides[1]);\n\n            if (dyR < 0.0 || dyR >= f32(uniforms.outHeight) || fract(dyR) > 0.0) {\n              continue;\n            }\n            let idyR = i32(dyR);\n\n            for (var wC = 0; wC < uniforms.filterDims[2]; wC++) {\n              let dyC = f32(dyCCorner + wC) / f32(uniforms.strides[2]);\n\n              if (dyC < 0.0 || dyC >= f32(uniforms.outWidth) || fract(dyC) > 0.0) {\n                continue;\n              }\n              let idyC = i32(dyC);\n\n              let dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              let maxPosValue = lastIndex - i32(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              let curPosValue = wD * uniforms.filterDims[1] * uniforms.filterDims[2] + wR * uniforms.filterDims[2] + wC;\n              let mask = select(0.0, 1.0, maxPosValue == curPosValue);\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n\n        setOutputAtIndex(index, dotProd);\n      }\n    }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_webgpu';\nimport {Pool3DProgram} from '../pool_webgpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: WebGPUBackend,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  let uniformData = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data:\n          [convInfo.padInfo.front, convInfo.padInfo.top, convInfo.padInfo.left]\n    },\n    {\n      type: 'int32',\n      data: [convInfo.inDepth, convInfo.inHeight, convInfo.inWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    }\n  ];\n  const maxPool3dPositions = backend.runWebGPUProgram(\n      maxPool3dPositionsProgram, [x], 'int32', uniformData);\n\n  const maxPool3dBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  uniformData = [\n    {\n      type: 'int32',\n      data: [convInfo.strideDepth, convInfo.strideHeight, convInfo.strideWidth]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth - 1 - convInfo.padInfo.front,\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterDepth, convInfo.effectiveFilterHeight,\n        convInfo.effectiveFilterWidth\n      ]\n    },\n    {type: 'int32', data: [convInfo.outDepth]},\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]}\n  ];\n  const result = backend.runWebGPUProgram(\n      maxPool3dBackpropProgram, [dy, maxPool3dPositions], x.dtype, uniformData);\n  backend.disposeData(maxPool3dPositions.dataId);\n\n  return result;\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgpu',\n  kernelFunc: maxPool3DGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_webgpu';\nimport {Pool2DProgram} from '../pool_webgpu';\nimport {assertNotComplex} from '../webgpu_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: WebGPUBackend,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n\n  const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', true);\n  let uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    }\n  ];\n  const maxPoolPositions = backend.runWebGPUProgram(\n      maxPoolPositionsProgram, [x], 'int32', uniformData);\n\n  const maxPoolBackpropProgram = new MaxPool2DBackpropProgram(convInfo);\n  uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]}, {\n      type: 'int32',\n      data: [\n        convInfo.effectiveFilterHeight - 1 - convInfo.padInfo.top,\n        convInfo.effectiveFilterWidth - 1 - convInfo.padInfo.left\n      ]\n    },\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    },\n    {type: 'int32', data: [convInfo.outHeight]},\n    {type: 'int32', data: [convInfo.outWidth]}\n  ];\n  const result = backend.runWebGPUProgram(\n      maxPoolBackpropProgram, [dy, maxPoolPositions], x.dtype, uniformData);\n  backend.disposeData(maxPoolPositions.dataId);\n\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgpu',\n  kernelFunc: maxPoolGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {Pool2DProgram} from '../pool_webgpu';\n\nexport function maxPoolWithArgmax(args: {\n  inputs: MaxPoolWithArgmaxInputs,\n  attrs: MaxPoolWithArgmaxAttrs,\n  backend: WebGPUBackend\n}): TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {filterSize, strides, pad, includeBatchInIndex} = attrs;\n  const {x} = inputs;\n\n  util.assert(\n      x.shape.length === 4,\n      () => `Error in maxPool: input must be rank 4 but got rank ${\n          x.shape.length}.`);\n  const dilations: [number, number] = [1, 1];\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad);\n\n  const uniformData = [\n    {type: 'int32', data: [convInfo.strideHeight, convInfo.strideWidth]},\n    {type: 'int32', data: [convInfo.padInfo.top, convInfo.padInfo.left]},\n    {type: 'int32', data: [convInfo.dilationHeight, convInfo.dilationWidth]},\n    {type: 'int32', data: [convInfo.inHeight, convInfo.inWidth]}, {\n      type: 'int32',\n      data: [convInfo.effectiveFilterHeight, convInfo.effectiveFilterWidth]\n    }\n  ];\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput =\n      backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput =\n      backend.runWebGPUProgram(program, [x], 'int32', uniformData);\n  return [poolOutput, indexOutput];\n}\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgpu',\n  kernelFunc: maxPoolWithArgmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function min(\n    args: {inputs: MinInputs, backend: WebGPUBackend, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'min', backend);\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgpu',\n  kernelFunc: min as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU as cpuMinimum} from '../kernel_utils/shared';\n\nexport const minimum = binaryKernelFunc({\n  opType: BinaryOpType.MIN,\n  cpuKernelImpl: cpuMinimum,\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MirrorPadProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  uniforms = '';\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  xShape: number[];\n  offset: number;\n  size = true;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.xShape = xShape;\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.offset = mode === 'reflect' ? 0 : 1;\n    this.shaderKey = `mirrorPad_${mode}`;\n  }\n\n  getUserCode(): string {\n    const rank = this.xShape.length;\n    // The length of paddings are same with the rank of the input tensor.\n    const start = this.xShape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n    const end = this.xShape\n                    .map(\n                        (_, i) => `uniforms.pad${i}[0] + uniforms.xShape${\n                            rank > 1 ? `[${i}]` : ''}`)\n                    .join(',');\n\n    const shaderStart = rank === 1 ? 'start' : 'start[i]';\n    const shaderEnd = rank === 1 ? 'end' : 'end[i]';\n    const shaderOutC = rank === 1 ? 'outC' : 'outC[i]';\n    const dtype = getCoordsDataType(rank);\n    const unpackedCoords = rank > 1 ?\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) :\n        'coords';\n\n    return `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let start = ${dtype}(${start});\n          let end = ${dtype}(${end});\n          var outC = getCoordsFromIndex(index);\n          for (var i = 0; i < ${rank}; i = i + 1) {\n            if (${shaderOutC} < ${shaderStart}) {\n              ${shaderOutC} = ${shaderStart} * 2 - ${shaderOutC} - ${\n        this.offset};\n            } else if(${shaderOutC} >= ${shaderEnd}) {\n              ${shaderOutC} = (${shaderEnd} - 1) * 2 - ${shaderOutC} + ${\n        this.offset};\n            }\n          }\n          let coords = outC - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, MirrorPad, MirrorPadAttrs, MirrorPadInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {MirrorPadProgram} from '../mirror_pad_webgpu';\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MirrorPadInputs;\n    const {paddings, mode} = attrs as unknown as MirrorPadAttrs;\n    const webGPUBackend = backend as WebGPUBackend;\n\n    const uniformData = paddings.map(p => {\n      return {type: 'int32', data: [p[0], p[1]]};\n    });\n    const program = new MirrorPadProgram(x.shape, paddings, mode);\n    const output =\n        webGPUBackend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const mod = binaryKernelFunc({opType: BinaryOpType.MOD});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class MultinomialProgram implements WebGPUProgram {\n  variableNames: string[] = ['probs'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'seed : f32, numOutcomes: i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(batchSize: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = 'multinomial';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    fn random (seed : f32, resultUV : vec2<f32>) -> f32 {\n      let HASHSCALE1 = 443.8975;\n      let p = resultUV * seed;\n      var p3  = fract(vec3<f32>(p.xyx) * HASHSCALE1);\n      p3 = p3 + dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let coords = getOutputCoords();\n        let batch = coords[0];\n\n        let resUV = vec2<f32>(f32(coords[1]) / f32(uniforms.outShape[1]),\n            f32(coords[0]) / f32(uniforms.outShape[0]));\n        let r = random(uniforms.seed, resUV);\n        var cdf = 0.0;\n        for (var i = 0; i < uniforms.numOutcomes - 1; i = i + 1) {\n          cdf = cdf + getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutputAtIndexI32(index, i);\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutputAtIndexI32(index, uniforms.numOutcomes - 1);\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {flatDispatchLayout} from './webgpu_util';\n\nexport class SoftmaxProgram implements WebGPUProgram {\n  variableNames = ['logits'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number];\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;  // [rows, cols]\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = [this.outputShape[0], 1, 1];\n    if (this.outputShape[1] >= 4096) {\n      this.workgroupSize = [256, 1, 1];\n    } else {\n      this.workgroupSize = [64, 1, 1];\n    }\n    this.shaderKey = 'softmax';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    var<workgroup> buf : array<f32, ${this.workgroupSize[0]}>;\n    var<workgroup> rowMaxShared : f32;\n    var<workgroup> rowSumShared : f32;\n    const blockSize = ${this.workgroupSize[0]};\n    ${main('index')} {\n      let row = index / blockSize;\n      let tid = i32(localId.x);\n      let cols = uniforms.outShape[1];\n\n      var threadMax = -3.402823e+38f;\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = getLogits(row, col);\n        threadMax = max(threadMax, value);\n      }\n      if (tid < cols) {\n        buf[tid] = threadMax;\n      }\n      workgroupBarrier();\n\n      var reduceSize = min(cols, blockSize);\n      for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n        reduceSize = currSize + (reduceSize & 1);\n        if (tid < currSize) {\n          buf[tid] = max(buf[tid], buf[tid + reduceSize]);\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowMaxShared = buf[0];\n      }\n      workgroupBarrier();\n\n      var threadSum = 0.0;\n      for (var col = tid; col < cols; col += blockSize) {\n        let subExp = exp(getLogits(row, col) - rowMaxShared);\n        threadSum += subExp;\n      }\n      buf[tid] = threadSum;\n      workgroupBarrier();\n\n      for (var currSize = blockSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n        if (tid < currSize) {\n          buf[tid] = buf[tid] + buf[tid + currSize];\n        }\n        workgroupBarrier();\n      }\n\n      if (tid == 0) {\n        rowSumShared = buf[0];\n      }\n      workgroupBarrier();\n\n      for (var col = tid; col < cols; col += blockSize) {\n        let value = exp(getLogits(row, col) - rowMaxShared) / rowSumShared;\n        setOutputAtCoords(row, col, value);\n      }\n  }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SoftmaxProgram} from '../softmax_webgpu';\n\nimport {reshape} from './Reshape';\n\nexport function softmax(\n    args: {inputs: SoftmaxInputs, backend: WebGPUBackend, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsReshaped = reshape({\n    inputs: {x: logits},\n    backend,\n    attrs: {\n      shape: [\n        util.sizeFromShape(logits.shape) / logits.shape[dim], logits.shape[dim]\n      ]\n    }\n  });\n  const program = new SoftmaxProgram(logitsReshaped.shape);\n  const res = backend.runWebGPUProgram(program, [logitsReshaped], logits.dtype);\n  const resReshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: logits.shape}});\n  backend.disposeData(logitsReshaped.dataId);\n  backend.disposeData(res.dataId);\n  return resReshaped;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgpu',\n  kernelFunc: softmax as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {MultinomialProgram} from '../multinomial_webgpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: WebGPUBackend,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numSamples);\n  const uniformData =\n      [{type: 'float32', data: [seed]}, {type: 'int32', data: [numOutcomes]}];\n  const res = backend.runWebGPUProgram(program, [probs], 'int32', uniformData);\n  if (!normalized) {\n    backend.disposeData(probs.dataId);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgpu',\n  kernelFunc: multinomial as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {negImplCPU} from '../kernel_utils/shared';\n\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.tensorMap.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  const program = new UnaryOpProgram(x.shape, UnaryOpType.NEG);\n\n  return backend.runWebGPUProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgpu',\n  kernelFunc: neg as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: WebGPUBackend,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  console.warn(\n      'tf.nonMaxSuppression() in webgpu locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = kernel_impls.nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgpu',\n  kernelFunc: nonMaxSuppressionV3 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nexport type TypedArray = Float32Array|Int32Array|Uint8Array;\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: WebGPUBackend,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  console.warn(\n      'tf.nonMaxSuppression() in webgpu locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} =\n      kernel_impls.nonMaxSuppressionV5Impl(\n          boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n          scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgpu',\n  kernelFunc: nonMaxSuppressionV5 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class OneHotProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'onValue : f32, offValue : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(numIndices: number, depth: number) {\n    this.outputShape = [numIndices, depth];\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'onehot';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,\n                                      f32(i32(round(getX(coords.x))) == coords.y)));\n        }\n      }\n    `;\n\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {OneHotProgram} from '../onehot_webgpu';\nimport {reshape} from './Reshape';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: WebGPUBackend, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {dtype, depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n\n  const uniformData =\n      [{type: 'float32', data: [onValue]}, {type: 'float32', data: [offValue]}];\n  const result =\n      backend.runWebGPUProgram(program, [reshaped], dtype, uniformData);\n  backend.disposeData(reshaped.dataId);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeData(result.dataId);\n\n  return out;\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgpu',\n  kernelFunc: oneHot as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgpu',\n  kernelFunc: zerosLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: WebGPUBackend}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeData(realPart.dataId);\n    backend.disposeData(r.dataId);\n    backend.disposeData(imagPart.dataId);\n    backend.disposeData(i.dataId);\n\n    return result;\n  } else {\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgpu',\n  kernelFunc: onesLike as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: WebGPUBackend, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(t => backend.disposeData(t.dataId));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgpu',\n  kernelFunc: pack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport function padCommon(shape: number[], fillZero = false): string {\n  const rank = shape.length;\n  const type = getCoordsDataType(rank);\n  const start = shape.map((_, i) => `uniforms.pad${i}[0]`).join(',');\n  const end = shape\n                  .map(\n                      (_, i) => `uniforms.pad${i}[0] + uniforms.xShape${\n                          rank > 1 ? `[${i}]` : ''}`)\n                  .join(',');\n  const startValue = rank > 1 ? `${type}(${start})` : `${start}`;\n  const endValue = rank > 1 ? `${type}(${end})` : `${end}`;\n\n  const leftPadCondition =\n      rank > 1 ? `any(paddedCoords < start)` : `paddedCoords < start`;\n  const rightPadCondition =\n      rank > 1 ? `any(paddedCoords >= end)` : `paddedCoords >= end`;\n\n  const unpackedCoords = rank > 1 ?\n      ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank) :\n      'coords';\n  return `\n        let start = ${startValue};\n        let end = ${endValue};\n        if (${leftPadCondition} || ${rightPadCondition}) {\n          setOutputAtIndex(index, ${fillZero ? 0.0 : 'uniforms.constantValue'});\n        } else {\n          let coords = paddedCoords - start;\n          setOutputAtIndex(index, getX(${unpackedCoords}));\n        }\n  `;\n}\n\nexport class PadProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'constantValue : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  xShape: number[];\n  size = true;\n\n  constructor(xShape: number[], paddings: Array<[number, number]>) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.xShape = xShape;\n    this.shaderKey = 'pad';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let paddedCoords = getCoordsFromIndex(index);\n          ${padCommon(this.xShape)}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {identity} from './Identity';\nimport {PadProgram} from '../pad_webgpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs,\n            backend: WebGPUBackend,\n            attrs: PadV2Attrs}): TensorInfo => {\n      const {inputs, backend, attrs} = args;\n      const {x} = inputs;\n      const {paddings, constantValue} = attrs;\n      if (paddings.every(p => util.arraysEqual(p, [0, 0]))) {\n        return identity({inputs: {x}, backend});\n      }\n      if (util.sizeFromShape(x.shape) === 0) {\n        // Short-circuit the computation, since x doesn't have value, only\n        // the shape is used to compute output shape to pad.\n        const outputShape = paddings.map(\n            (p, i) =>\n                p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n        return fill({\n          backend,\n          attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n        });\n      }\n      const uniformData = [{type: 'float32', data: [constantValue]}];\n      paddings.map(p => uniformData.push({type: 'int32', data: [p[0], p[1]]}));\n      const program = new PadProgram(x.shape, paddings);\n      return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n    };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgpu',\n  kernelFunc: padV2 as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const pow = binaryKernelFunc({\n  opType: BinaryOpType.POW,\n});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {BinaryOpProgram} from '../binary_op_webgpu';\n\nexport function prelu(args: {inputs: PreluInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = new BinaryOpProgram(BinaryOpType.PRELU, x.shape, alpha.shape);\n  return backend.runWebGPUProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgpu',\n  kernelFunc: prelu as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {reduce} from '../kernel_utils/reduce';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: WebGPUBackend, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return reduce(x, axis, keepDims, 'prod', backend);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgpu',\n  kernelFunc: prod as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: WebGPUBackend, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgpu',\n  kernelFunc: range as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const realDiv = binaryKernelFunc({opType: BinaryOpType.DIV});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgpu',\n  kernelFunc: realDiv as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const reciprocal = unaryKernelFunc({opType: UnaryOpType.RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgpu',\n  kernelFunc: reciprocal\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const relu = unaryKernelFunc({opType: UnaryOpType.RELU});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgpu',\n  kernelFunc: relu\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const relu6 = unaryKernelFunc({opType: UnaryOpType.RELU6});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgpu',\n  kernelFunc: relu6\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeBilinearProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number) {\n    this.outputShape = [inputShape[0], newHeight, newWidth, inputShape[3]];\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.shaderKey = `resizeBilinear`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n        let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC =\n            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *\n            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);\n\n          // Compute the four integer indices.\n          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);\n          let sourceCeilRC = vec2<i32>(\n            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));\n\n          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);\n\n          let top = topLeft + (topRight - topLeft) * fracRC.y;\n          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          let newValue = top + (bottom - top) * fracRC.x;\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeBilinearProgram} from '../resize_bilinear_webgpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, size, halfPixelCenters} = attrs;\n\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  const halfPixelCentersValue = halfPixelCenters ? 0.5 : 0.0;\n  const uniformData = [\n    {type: 'float32', data: [adjustHeight, adjustWidth]},\n    {type: 'float32', data: [halfPixelCentersValue]}\n  ];\n\n  const program = new ResizeBilinearProgram(\n      images.shape as [number, number, number, number], newHeight, newWidth);\n\n  return backend.runWebGPUProgram(program, [images], 'float32', uniformData);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgpu',\n  kernelFunc: resizeBilinear as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeBilinearBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy'];\n  uniforms =\n      `effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, heightScale : f32, widthScale : f32,\n       invHeightScale : f32, invWidthScale : f32, winHeight : i32, winWidth : i32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  alignCorners: boolean;\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.alignCorners = alignCorners;\n    this.shaderKey = `resizeBilinearBackprop_${alignCorners}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(startRLerp - f32(uniforms.winHeight / 2));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(startCLerp - f32(uniforms.winWidth / 2));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let dxR = f32(dyR) * uniforms.heightScale;\n              let topDxRIndex = i32(floor(dxR));\n              let bottomDxRIndex = i32(min(ceil(dxR), f32(uniforms.outShape[1] - 1)));\n              let dxRLerp = dxR - f32(topDxRIndex);\n              let inverseDxRLerp = 1.0 - dxRLerp;\n\n              let dxC = f32(dyC) * uniforms.widthScale;\n              let leftDxCIndex = i32(floor(dxC));\n              let rightDxCIndex = i32(min(ceil(dxC), f32(uniforms.outShape[2] - 1)));\n              let dxCLerp = dxC - f32(leftDxCIndex);\n              let inverseDxCLerp = 1.0 - dxCLerp;\n\n              if (r == topDxRIndex && c == leftDxCIndex) {\n                // topLeft\n                accumulator +=\n                  getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n              }\n\n              if (r == topDxRIndex && c == rightDxCIndex) {\n                // topRight\n                accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == leftDxCIndex) {\n                // bottomLeft\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n              }\n\n              if (r == bottomDxRIndex && c == rightDxCIndex) {\n                // bottomRight\n                accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_webgpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const [, xHeight, xWidth, ] =\n      images.shape as [number, number, number, number];\n  const [, yHeight, yWidth] = dy.shape as [number, number, number, number];\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  const program = new ResizeBilinearBackpropProgram(\n      images.shape as [number, number, number, number], alignCorners);\n  const uniformData = [\n    {type: 'int32', data: effectiveXSize},\n    {type: 'int32', data: effectiveYSize},\n    {type: 'float32', data: [heightScale]},\n    {type: 'float32', data: [widthScale]},\n    {type: 'float32', data: [invHeightScale]},\n    {type: 'float32', data: [invWidthScale]},\n    {type: 'int32', data: [winHeight]}, {type: 'int32', data: [winWidth]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], dy.dtype, uniformData);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgpu',\n  kernelFunc: resizeBilinearGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeNearestNeighborProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms = 'adjustHeightWidth : vec2<f32>, roundBase : f32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  halfPixelCenters: boolean;\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, halfPixelCenters: boolean) {\n    this.outputShape = [inputShape[0], newHeight, newWidth, inputShape[3]];\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.halfPixelCenters = halfPixelCenters;\n    this.shaderKey = `resizeNearest_${halfPixelCenters}`;\n  }\n\n  getUserCode(): string {\n    let sourceFracIndexRC: string;\n    if (this.halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2<f32>(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2<f32>(rc) * effectiveInputOverOutputRatioRC`;\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let b = coords[0];\n          let d = coords[3];\n          let rc = coords.yz;\n\n          let effectiveInSize = vec2<f32>(\n            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveOutSize = vec2<f32>(\n            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],\n            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);\n\n          let effectiveInputOverOutputRatioRC =\n              effectiveInSize / effectiveOutSize;\n\n          // Fractional source index\n          let sourceFracIndexRC = ${sourceFracIndexRC};\n\n          // Compute the coordinators of nearest neighbor point.\n          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));\n          let sourceNearestRC = vec2<i32>(\n            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));\n          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n          setOutputAtIndex(index, newValue);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_webgpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n  const adjustHeight = alignCorners && newHeight > 1 ? 1.0 : 0.0;\n  const adjustWidth = alignCorners && newWidth > 1 ? 1.0 : 0.0;\n  // When align corners is false, we rounds the value with floor.\n  const roundBase = alignCorners ? 0.5 : 0.0;\n  const uniformData = [\n    {type: 'float32', data: [adjustHeight, adjustWidth]},\n    {type: 'float32', data: [roundBase]}\n  ];\n\n  const program = new ResizeNearestNeighborProgram(\n      images.shape as [number, number, number, number], newHeight, newWidth,\n      halfPixelCenters);\n  return backend.runWebGPUProgram(program, [images], images.dtype, uniformData);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighbor as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ResizeNearestNeigborBackpropProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['dy'];\n  uniforms =\n      `effectiveXSize : vec2<i32>, effectiveYSize : vec2<i32>, invHeightScale : f32, invWidthScale : f32,\n       winHeight : i32, winWidth : i32,`;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  alignCorners: boolean;\n  size = true;\n\n  constructor(\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.alignCorners = alignCorners;\n    this.shaderKey = `resizeNearestNeigborBackprop_${alignCorners}`;\n  }\n\n  getUserCode(): string {\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getOutputCoords();\n          let b = coords[0];\n          let d = coords[3];\n          let r = coords[1];\n          let c = coords[2];\n\n          var accumulator = 0.0;\n\n          // Compute bounds for where in dy we will look\n          let startRLerp = floor(f32(r) * uniforms.invHeightScale);\n          let startDyR = i32(floor(startRLerp - f32(uniforms.winHeight / 2)));\n\n          let startCLerp = floor(f32(c) * uniforms.invWidthScale);\n          let startDyC = i32(floor(startCLerp - f32(uniforms.winWidth / 2)));\n\n          // Loop over dy\n          for (var dyROffset = 0; dyROffset < uniforms.winHeight; dyROffset++) {\n            let dyR = startDyR + dyROffset;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= uniforms.dyShape[1]) {\n              continue;\n            }\n\n            for (var dyCOffset = 0; dyCOffset < uniforms.winWidth; dyCOffset++) {\n              let dyC = startDyC + dyCOffset;\n\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= uniforms.dyShape[2]) {\n                continue;\n              }\n\n              let sourceFracRow = f32(uniforms.effectiveXSize[0]) *\n                  (f32(dyR) / f32(uniforms.effectiveYSize[0]));\n\n              let sourceFracCol = f32(uniforms.effectiveXSize[1]) *\n                  (f32(dyC) / f32(uniforms.effectiveYSize[1]));\n\n              let sourceNearestRow =\n                  i32(min(f32(uniforms.outShape[1] - 1),\n                  ${\n        this.alignCorners ? 'floor(sourceFracRow + 0.5)' :\n                            'floor(sourceFracRow)'}));\n\n              let sourceNearestCol =\n                  i32(min(f32(uniforms.outShape[2] - 1),\n                  ${\n        this.alignCorners ? 'floor(sourceFracCol + 0.5)' :\n                            'floor(sourceFracCol)'}));\n\n              if (r == sourceNearestRow && c == sourceNearestCol) {\n                accumulator += getDy(b, dyR, dyC, d);\n              }\n            }\n          }\n          // End loop over dy\n\n          setOutputAtIndex(index, accumulator);\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_webgpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: WebGPUBackend,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const [, xHeight, xWidth] = images.shape as [number, number, number, number];\n  const [, yHeight, yWidth] = dy.shape as [number, number, number, number];\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      images.shape as [number, number, number, number], alignCorners);\n  const uniformData = [\n    {type: 'int32', data: effectiveXSize},\n    {type: 'int32', data: effectiveYSize},\n    {type: 'float32', data: [invHeightScale]},\n    {type: 'float32', data: [invWidthScale]},\n    {type: 'int32', data: [winHeight]}, {type: 'int32', data: [winWidth]}\n  ];\n  return backend.runWebGPUProgram(program, [dy], dy.dtype, uniformData);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgpu',\n  kernelFunc: resizeNearestNeighborGrad as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ReverseProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(xShape: [number, number, number, number]) {\n    this.outputShape = xShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = ` axis : vec4<i32>,`;\n    this.shaderKey = 'reverse';\n  }\n\n  getUserCode(): string {\n    const reverseCoordsSnippet = `\n      // Using uniform variables as judging conditions, so the function has\n      // coherent execution within all threads.\n      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {\n        var reverseCoords = coords;\n        if (uniforms.axis[0] == 1) {\n          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;\n        }\n        if (uniforms.axis[1] == 1) {\n          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;\n        }\n        if (uniforms.axis[2] == 1) {\n          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;\n        }\n        if (uniforms.axis[3] == 1) {\n          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;\n        }\n\n        return reverseCoords;\n      }\n    `;\n    const userCode = `\n      ${reverseCoordsSnippet}\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let reverseCoords = getReverseCoords(coords);\n          setOutputAtIndex(index, getX(reverseCoords[0],\n              reverseCoords[1], reverseCoords[2], reverseCoords[3]));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ReverseProgram} from '../reverse_webgpu';\n\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\nexport function reverse(\n    args: {inputs: ReverseInputs, backend: WebGPUBackend, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const xShape = x.shape;\n  const xShape4D: [number, number, number, number] = [1, 1, 1, 1];\n  xShape.forEach((d, i) => {\n    const index = i + 4 - xRank;\n    xShape4D[index] = d;\n  });\n\n  const axes = util.parseAxisParam(dims, x.shape);\n  const dims4D: [number, number, number, number] = [0, 0, 0, 0];\n  axes.forEach(ax => {\n    const index = ax + 4 - xRank;\n    dims4D[index] = 1;\n  });\n  const uniformData = [{type: 'int32', data: dims4D}];\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: xShape4D}});\n\n  const program = new ReverseProgram(xShape4D);\n  const values = backend.runWebGPUProgram(\n      program, [xReshaped], xReshaped.dtype, uniformData);\n  backend.disposeData(xReshaped.dataId);\n\n  const result =\n      reshape({inputs: {x: values}, backend, attrs: {shape: xShape}});\n  backend.disposeData(values.dataId);\n\n  return result;\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgpu',\n  kernelFunc: reverse as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class RotateProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  fillSnippet: string;\n  size = true;\n\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    this.outputShape = imageShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = `centerX : f32, centerY : f32, sinRadians : f32,\n          cosRadians : f32,`;\n    this.shaderKey = 'rotate';\n    this.outputShape = imageShape;\n\n    if (typeof fillValue === 'number') {\n      this.uniforms += ` fillValue : f32,`;\n      this.fillSnippet = `var outputValue = uniforms.fillValue;`;\n      this.shaderKey += '_float';\n    } else {\n      this.uniforms += ` fillValue : vec3<f32>,`;\n      this.fillSnippet = `var outputValue = uniforms.fillValue[coords[3]];`;\n      this.shaderKey += '_vec3';\n    }\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let coords = getCoordsFromIndex(index);\n            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *\n                uniforms.sinRadians;\n            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *\n                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *\n                uniforms.cosRadians;\n            let coordX = i32(round(coordXFloat + uniforms.centerX));\n            let coordY = i32(round(coordYFloat + uniforms.centerY));\n            ${this.fillSnippet}\n            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&\n                coordY < uniforms.xShape[1]) {\n              outputValue = getX(coords[0], coordY, coordX, coords[3]);\n            }\n            setOutputAtIndex(index, outputValue);\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {RotateProgram} from '../rotate_webgpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'webgpu',\n    kernelFunc: ({inputs, attrs, backend}) => {\n      const {image} = inputs as RotateWithOffsetInputs;\n      const {radians, fillValue, center} =\n          attrs as unknown as RotateWithOffsetAttrs;\n      const webgpuBackend = backend as WebGPUBackend;\n\n      const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n      const [centerX, centerY] =\n          backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n      const uniformData = [\n            {type: 'float32', data: [centerX]},\n            {type: 'float32', data: [centerY]},\n            {type: 'float32', data: [Math.sin(radians)]},\n            {type: 'float32', data: [Math.cos(radians)]}\n          ];\n\n      if (typeof fillValue === 'number') {\n        uniformData.push(\n            {type: 'float32', data: [Number.parseFloat(fillValue.toFixed(2))]});\n      } else {\n        uniformData.push({type: 'float32', data: fillValue});\n      }\n\n      const output = webgpuBackend.runWebGPUProgram(\n          program, [image], image.dtype, uniformData);\n      return output;\n   }\n };\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const round = unaryKernelFunc({opType: UnaryOpType.ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgpu',\n  kernelFunc: round\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const rsqrt =\n    unaryKernelFunc({opType: UnaryOpType.RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgpu',\n  kernelFunc: rsqrt\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {atomicAddSnippet} from './shader_util';\nimport {dataTypeToGPUType, getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class ScatterProgram implements WebGPUProgram {\n  variableNames = ['updates', 'indices'];\n  uniforms: string;\n  outputShape: number[];\n  sumDupeIndices: boolean;\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  updatesRank: number;\n  indicesRank: number;\n  sliceDimGreaterThanOne: boolean;\n  atomic = true;\n  type: DataType;\n\n  constructor(\n      flattenXShape: number[], sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      outputDtype: DataType, sumDupeIndices = true) {\n    this.outputShape = shape;\n    this.type = outputDtype;\n    this.sumDupeIndices = sumDupeIndices;\n    this.dispatchLayout = flatDispatchLayout(flattenXShape);\n    // Dispatching based on |updates| shape instead of output shape.\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, flattenXShape, this.workgroupSize);\n    this.sliceDimGreaterThanOne = sliceDim > 1;\n    this.shaderKey =\n        `scatter_${indicesRank}_${updatesRank}_${this.sliceDimGreaterThanOne}_${\n            outputDtype}_${sumDupeIndices}_${strides.length}`;\n    const stridesType = getCoordsDataType(strides.length);\n    this.uniforms =\n        `sliceDim : i32, strides: ${stridesType}, updatesSize: i32,`;\n    this.updatesRank = updatesRank;\n    this.indicesRank = indicesRank;\n  }\n\n  getUserCode(): string {\n    let indicesString = '';\n    if (this.indicesRank === 1) {\n      indicesString = 'coords[0]';\n    } else if (this.indicesRank === 2) {\n      indicesString = 'coords[0], j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    const strideString = this.sliceDimGreaterThanOne ? 'uniforms.strides[j]' :\n                                                       'uniforms.strides';\n\n    let outCoordsString = '';\n    let getUpdatesCoordsFromFlatIndex = '';\n    if (this.dispatchLayout.x.length === 1) {\n      outCoordsString = 'flattenedIndex';\n      getUpdatesCoordsFromFlatIndex = `\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {\n        return index;\n      }\n      `;\n    } else if (this.dispatchLayout.x.length === 2) {\n      outCoordsString = 'vec2<i32>(flattenedIndex, coords[1])';\n      getUpdatesCoordsFromFlatIndex = `\n      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {\n        // N.B. |updates| could be a scalar tensor, conceptually representing a\n        // 2D tensor with all values equal to that. By design, its size must be\n        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|\n        // gives the other.\n        let sliceSize = uniforms.outShape[1];\n        let d0 = index / sliceSize;\n        let d1 = index - d0 * sliceSize;\n        return vec2<i32>(d0, d1);\n      }\n      `;\n    }\n    const updatesString =\n        Array.from({length: this.updatesRank}, (_, idx) => `coords[${idx}]`);\n    const updatesSnippet = `getUpdates(${updatesString.join(', ')})`;\n\n    const userCode = `\n    ${getUpdatesCoordsFromFlatIndex}\n      ${main('index')} {\n        if (index < uniforms.updatesSize) {\n          let coords = getUpdatesCoordsFromFlatIndex(index);\n          var flattenedIndex = 0;\n          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {\n            let indexInside = i32(round(${indicesSnippet}));\n            flattenedIndex = flattenedIndex + indexInside * ${strideString};\n          }\n          let updateValue =\n              ${dataTypeToGPUType(this.type)}(${updatesSnippet});\n          let flatIndex = getOutputIndexFromCoords(${outCoordsString});\n\n          ${\n        this.sumDupeIndices ?\n            atomicAddSnippet(\n                '&result[flatIndex]', 'updateValue',\n                this.type as 'float32' | 'int32') :\n            `atomicStore(&result[flatIndex], bitcast<i32>(updateValue));`}\n        }\n      }`;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: WebGPUBackend,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const type = flattenX.dtype;\n  const output =\n      fill({backend, attrs: {shape: flattenShape, value: 0, dtype: type}});\n  const size = util.sizeFromShape(flattenX.shape);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]}, {type: 'int32', data: strides},\n    {type: 'int32', data: [size]}\n  ];\n  const program = new ScatterProgram(\n      flattenX.shape, sliceRank, flattenIndices.shape.length,\n      flattenX.shape.length, strides, flattenShape, type);\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], type, uniformData, output);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeData(flattenIndices.dataId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(res.dataId);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgpu',\n  kernelFunc: scatterNd as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SearchSortedProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['sortedSequence', 'values'];\n  uniforms = 'numInputs : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  side: string;\n\n  constructor(outputShape: [number, number], side: 'left'|'right') {\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.side = side;\n    this.shaderKey = `search_sorted_${side}`;\n  }\n\n  getUserCode(): string {\n    const boundComparator = this.side === 'left' ? '<' : '<=';\n    const userCode = `\n      fn findBound(batch: i32, value: f32) -> i32 {\n        var left = i32(0);\n        var right = uniforms.numInputs;\n        while (left < right) {\n          var mid = (left + right) / 2;\n          if (getSortedSequence(batch, mid) ${boundComparator} value) {\n            left = mid + 1;\n          } else {\n            right = mid;\n          }\n        }\n        return right;\n      }\n\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let value = getValuesByOutputIndex(index);\n          setOutputAtIndexI32(index, findBound(coords[0], value));\n        }\n      }\n    `;\n\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SearchSorted, SearchSortedAttrs, SearchSortedInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SearchSortedProgram} from '../search_sorted_webgpu';\n\nexport function searchSorted(args: {\n  inputs: SearchSortedInputs,\n  backend: WebGPUBackend,\n  attrs: SearchSortedAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sortedSequence, values} = inputs;\n  const {side} = attrs;\n\n  const program =\n      new SearchSortedProgram([values.shape[0], values.shape[1]], side);\n  const uniformData = [{type: 'int32', data: [sortedSequence.shape[1]]}];\n  return backend.runWebGPUProgram(\n      program, [sortedSequence, values], 'int32', uniformData);\n}\n\nexport const searchSortedConfig: KernelConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgpu',\n  kernelFunc: searchSorted as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SelectProgram implements WebGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  cRank: number;\n  rank: number;\n  size = true;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n\n    this.cRank = cRank;\n    this.rank = rank;\n    this.shaderKey = 'select';\n  }\n\n  getUserCode(): string {\n    // TODO(WGSL): below code can be merged with getUserCode.\n    let cCoords;\n    let abCoords;\n    if (this.rank > 4) {\n      throw Error(`Where for rank ${this.rank} is not yet supported`);\n    }\n\n    if (this.rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < this.outputShape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < this.cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          let cVal = getC(${cCoords});\n          if (cVal >= 1.0) {\n            setOutputAtIndex(index, getA(${abCoords}));\n          } else {\n            setOutputAtIndex(index, getB(${abCoords}));\n          }\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SelectProgram} from '../select_webgpu';\n\nexport function select(args: {inputs: SelectInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGPUProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgpu',\n  kernelFunc: select as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const selu = unaryKernelFunc({opType: UnaryOpType.SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgpu',\n  kernelFunc: selu\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sigmoid = unaryKernelFunc({opType: UnaryOpType.SIGMOID});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sign = unaryKernelFunc({opType: UnaryOpType.SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgpu',\n  kernelFunc: sign\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sin = unaryKernelFunc({opType: UnaryOpType.SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgpu',\n  kernelFunc: sin\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sinh = unaryKernelFunc({opType: UnaryOpType.SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgpu',\n  kernelFunc: sinh\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const softplus = unaryKernelFunc({opType: UnaryOpType.SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgpu',\n  kernelFunc: softplus\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {padCommon} from './pad_webgpu';\nimport {getSwitchedCoords} from './transpose_webgpu';\nimport {getCoordsDataType, getCoordsFromIndexSnippet, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SpaceToBatchNDProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = '';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  newDim: number[];\n  xShape: number[];\n  paddedXShape: number[];\n  size = true;\n\n  constructor(\n      xShape: number[], paddedXShape: number[],\n      paddings: Array<[number, number]>, reshapedPaddedXShape: number[],\n      newDim: number[], paddedXShapeStridesShapeLength: number) {\n    const outputShape: number[] = new Array(reshapedPaddedXShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = reshapedPaddedXShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.newDim = newDim;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.xShape = xShape;\n    this.paddedXShape = paddedXShape;\n    this.uniforms += `reshapedPaddedXShape : ${\n        getCoordsDataType(\n            reshapedPaddedXShape.length)}, paddedXShapeStrides : ${\n        getCoordsDataType(paddedXShapeStridesShapeLength)}, `;\n    paddings.map((_, i) => {\n      this.uniforms += ` pad${i} : vec2<i32>,`;\n    });\n    this.shaderKey = `spaceToBatchND_${newDim}`;\n  }\n\n  getUserCode(): string {\n    const dtype = getCoordsDataType(this.outputShape.length);\n    const switched = getSwitchedCoords(this.newDim);\n\n    const userCode = `\n      ${getCoordsFromIndexSnippet(this.paddedXShape, 'PaddedX')}\n      ${main('index')} {\n        if(index < uniforms.size) {\n          let coords = getCoordsFromIndex(index);\n          let switchedIndex = getIndexFromCoords${this.outputShape.length}D(${\n        dtype}(${switched}), uniforms.reshapedPaddedXShape);\n          let paddedCoords = getPaddedXCoordsFromIndex(switchedIndex);\n          ${padCommon(this.xShape, true)}\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {SpaceToBatchNDProgram} from '../space_to_batchND_webgpu';\n\nimport {reshape} from './Reshape';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: WebGPUBackend,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGPU backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedXShape = completePaddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedXShape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedXShape, blockShape, prod, false);\n\n  const paddedXShapeStrides = util.computeStrides(paddedXShape);\n  const program = new SpaceToBatchNDProgram(\n      x.shape, paddedXShape, completePaddings, reshapedPaddedShape,\n      permutedReshapedPaddedPermutation, paddedXShapeStrides.length);\n  const uniformData = [\n    {type: 'int32', data: reshapedPaddedShape},\n    {type: 'int32', data: paddedXShapeStrides}\n  ];\n  completePaddings.map(\n      p => uniformData.push({type: 'int32', data: [p[0], p[1]]}));\n  const paddedXT = backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n  backend.disposeData(paddedXT.dataId);\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgpu',\n  kernelFunc: spaceToBatchND as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class SparseSegmentSumProgram implements WebGPUProgram {\n  variableNames = ['input', 'indices', 'segmentIds'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'segmentSize : i32, sparseSize : i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  type: DataType;\n\n  constructor(outShape: number[], sparseSize: number, outputDtype: DataType) {\n    this.outputShape = outShape;\n    this.type = outputDtype;\n    this.dispatchLayout = flatDispatchLayout([sparseSize]);\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, [sparseSize], this.workgroupSize);\n\n    this.shaderKey = 'sparseSegmentSum';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.sparseSize) {\n        let indexInSegmentIds = index / uniforms.segmentSize;\n        let indexInSegment = index % uniforms.segmentSize;\n        let indexInInput = indices[indexInSegmentIds];\n        let segmentId = segmentIds[indexInSegmentIds];\n\n        let value = input[indexInInput * uniforms.segmentSize + indexInSegment];\n        let outIndex = segmentId * uniforms.segmentSize + indexInSegment;\n        ${\n        atomicAddSnippet(\n            '&result[outIndex]', 'value', this.type as 'float32' | 'int32')}\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n\nexport class SparseSegmentIdCountProgram implements WebGPUProgram {\n  variableNames = ['segmentIds'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n\n  constructor(outShape: number, segmentIdsShape: number[]) {\n    this.outputShape = [outShape];\n    this.dispatchLayout = flatDispatchLayout(segmentIdsShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, segmentIdsShape, this.workgroupSize);\n\n    this.shaderKey = 'sparseSegmentIdCountProgram';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.segmentIdsShape) {\n        let segmentId = segmentIds[index];\n        ${atomicAddSnippet('&result[segmentId]', '1', 'int32')}\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n\nexport class SparseSegmentMeanProgram implements WebGPUProgram {\n  variableNames = ['segmentSum', 'sameSegmentIdCount'];\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  uniforms = 'segmentSize : i32';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  type: DataType;\n\n  constructor(outShape: number[], outputDtype: DataType) {\n    this.outputShape = outShape;\n    this.type = outputDtype;\n    this.dispatchLayout = flatDispatchLayout(outShape);\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, outShape, this.workgroupSize);\n\n    this.shaderKey = 'sparseSegmentMean';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.size) {\n        let segmentId = index / uniforms.segmentSize;\n        let count = sameSegmentIdCount[segmentId];\n        if (count != 0) {\n          ${\n        this.type === 'float32' ?\n            'setOutputAtIndex(index, segmentSum[index] / f32(count));' :\n            'setOutputAtIndexI32(index, segmentSum[index] / count);'}\n        }\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {fill} from '../kernels/Fill';\nimport {SparseSegmentIdCountProgram, SparseSegmentMeanProgram, SparseSegmentSumProgram} from '../sparse_segment_reduce_webgpu';\nimport {WebGPUProgram} from '../webgpu_program';\n\nexport function sparseSegmentReduce(\n    input: TensorInfo, indices: TensorInfo, segmentIds: TensorInfo,\n    isSum = false, backend: WebGPUBackend): TensorInfo {\n  const inputSize = util.sizeFromShape(input.shape);\n  const segmentSize = inputSize / input.shape[0];\n  const dtype = input.dtype;\n\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const numIndices = util.sizeFromShape(indices.shape);\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? $segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  let program: WebGPUProgram;\n  const outputShape = input.shape.slice();\n  outputShape[0] = outputRows;\n\n  const sparseSize = numIndices * segmentSize;\n  const sparseSegmentSum =\n      fill({backend, attrs: {shape: outputShape, value: 0, dtype}});\n  program = new SparseSegmentSumProgram(outputShape, sparseSize, dtype);\n  let uniformData = [\n    {type: 'int32', data: [segmentSize]}, {type: 'int32', data: [sparseSize]}\n  ];\n  const $sparseSegmentSum = backend.runWebGPUProgram(\n      program, [input, indices, segmentIds], dtype, uniformData,\n      sparseSegmentSum);\n\n  if (isSum) {\n    return $sparseSegmentSum;\n  }\n\n  const sparseSegmentIdCount =\n      fill({backend, attrs: {shape: [outputRows], value: 0, dtype: 'int32'}});\n  program = new SparseSegmentIdCountProgram(outputRows, segmentIds.shape);\n  const $sparseSegmentIdCount = backend.runWebGPUProgram(\n      program, [segmentIds], 'int32', null, sparseSegmentIdCount);\n\n  const sparseSegmentMean =\n      fill({backend, attrs: {shape: outputShape, value: 0, dtype}});\n  program = new SparseSegmentMeanProgram(outputShape, dtype);\n  uniformData = [{type: 'int32', data: [segmentSize]}];\n  const $sparseSegmentMean = backend.runWebGPUProgram(\n      program, [$sparseSegmentSum, $sparseSegmentIdCount], dtype, uniformData,\n      sparseSegmentMean);\n\n  backend.disposeData($sparseSegmentSum.dataId);\n  backend.disposeData($sparseSegmentIdCount.dataId);\n  return $sparseSegmentMean;\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {sparseSegmentReduce} from '../kernel_utils/sparse_segment_reduce';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n\n  return sparseSegmentReduce(data, indices, segmentIds, false, backend);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgpu',\n  kernelFunc: sparseSegmentMean as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {sparseSegmentReduce} from '../kernel_utils/sparse_segment_reduce';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n\n  return sparseSegmentReduce(data, indices, segmentIds, true, backend);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgpu',\n  kernelFunc: sparseSegmentSum as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TileProgram implements WebGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.rank = this.outputShape.length;\n    this.shaderKey = 'tile';\n  }\n\n  getUserCode(): string {\n    const sourceCoords = getSourceCoords(this.rank, 'uniforms.');\n\n    const userCode = `\n      ${main('index')} {\n        if (index < uniforms.size) {\n          let resRC = getCoordsFromIndex(index);\n          setOutputAtIndex(index, getA(${sourceCoords}));\n        }\n      }\n    `;\n    return userCode;\n  }\n}\n\nfunction getSourceCoords(rank: number, uniformPrefix = ''): string {\n  if (rank >= 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `(resRC % ${uniformPrefix}aShape)`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n  for (let i = 0; i < rank; i++) {\n    sourceCoords.push(`(${currentCoords[i]} % ${uniformPrefix}aShape[${i}])`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_webgpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: WebGPUBackend, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank >= 5 case.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string' ||\n      x.shape.length >= 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGPUProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgpu',\n  kernelFunc: tile as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Rank, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {scatterImplCPU} from '../kernel_utils/shared';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: WebGPUBackend,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n  const sumDupeIndices = false;\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync<Rank, 'int32'>(sparseIndices);\n    const updatesBuf = backend.bufferSync<Rank, 'string'>(sparseValues);\n    const $defaultValue = util.decodeString(\n        backend.readSync(defaultValue.dataId)[0] as Uint8Array);\n    const outBuf = scatterImplCPU(\n        indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n        sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const $sparseIndices = reshape({\n    inputs: {x: sparseIndices},\n    backend,\n    attrs: {shape: [numUpdates, sliceRank]}\n  });\n  const $sparseValues = sparseValues.shape.length ?\n      reshape({\n        inputs: {x: sparseValues},\n        backend,\n        attrs: {shape: [numUpdates, sliceSize]}\n      }) :\n      identity({inputs: {x: sparseValues}, backend});\n\n  const type = $sparseValues.dtype;\n  const zero =\n      backend.makeTensorInfo([], type, util.makeZerosTypedArray(1, type));\n\n  // Fill output tensor with the default value.\n  const $defaultValue = reshape({\n    inputs: {x: defaultValue},\n    backend,\n    attrs: {shape: Array(flattenShape.length).fill(1)}\n  });\n  const $denseValues =\n      tile({inputs: {x: $defaultValue}, backend, attrs: {reps: flattenShape}});\n\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]},\n    {type: 'int32', data: strides},\n    {type: 'int32', data: [size]},\n  ];\n\n  switch (numUpdates) {\n    case 0:\n      break;\n    case 1:\n      if (true) {\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            $sparseValues.shape.length, strides, flattenShape, type,\n            sumDupeIndices);\n        backend.runWebGPUProgram(\n            program, [$sparseValues, $sparseIndices], type, uniformData,\n            $denseValues);\n      }\n      break;\n    default:\n      if (true) {\n        // First replace the default value with 0 at indices.\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            zero.shape.length, strides, flattenShape, type, sumDupeIndices);\n        backend.runWebGPUProgram(\n            program, [zero, $sparseIndices], type, uniformData, $denseValues);\n      }\n      {\n        // Then replace 0 with the (sum of) sparse value(s) at indices.\n        const program = new ScatterProgram(\n            [numUpdates, sliceSize], sliceRank, $sparseIndices.shape.length,\n            $sparseValues.shape.length, strides, flattenShape, type);\n        backend.runWebGPUProgram(\n            program, [$sparseValues, $sparseIndices], type, uniformData,\n            $denseValues);\n      }\n  }\n\n  const denseValues = reshape(\n      {inputs: {x: $denseValues}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeData($sparseIndices.dataId);\n  backend.disposeData($sparseValues.dataId);\n  backend.disposeData($defaultValue.dataId);\n  backend.disposeData(zero.dataId);\n  backend.disposeData($denseValues.dataId);\n  return denseValues;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgpu',\n  kernelFunc: sparseToDense as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: WebGPUBackend, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgpu',\n  kernelFunc: splitV as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const sqrt = unaryKernelFunc({opType: UnaryOpType.SQRT});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgpu',\n  kernelFunc: sqrt\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const webGPUBackend = backend as WebGPUBackend;\n    const program = new UnaryOpProgram(x.shape, UnaryOpType.SQUARE);\n    return webGPUBackend.runWebGPUProgram(program, [x], x.dtype);\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nexport const squaredDifference = binaryKernelFunc({\n  opType: BinaryOpType.SQUARED_DIFFERENCE,\n});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnaryOpType} from '../unary_op_util';\nimport {UnaryOpProgram} from '../unary_op_webgpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: WebGPUBackend}):\n    TensorInfo {\n  const {x} = inputs;\n  const program =\n      new UnaryOpProgram(x.shape, UnaryOpType.STEP, 'stepAlpha : f32,');\n  const uniformData = [{type: 'float32', data: [attrs.alpha]}];\n  return backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgpu',\n  kernelFunc: step as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getCoordsDataType, getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class StridedSliceProgram implements WebGPUProgram {\n  variableNames = ['x'];\n  uniforms: string;\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  // TODO(xing.xu): Increase the workPerThread.\n  workPerThread = 1;\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize,\n        [this.workPerThread, 1, 1]);\n\n    const dtype = getCoordsDataType(this.outputShape.length);\n    this.uniforms = `begin : ${dtype},  strides : ${dtype}, `;\n    this.shaderKey = 'stridedSlice';\n  }\n\n  getUserCode(): string {\n    const rank = this.outputShape.length;\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * uniforms.strides + uniforms.begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          this.outputShape\n              .map((_, i) => {\n                outputAxis++;\n                return this.outputShape.length === 1 ?\n                    `coords * uniforms.strides[${i}] + uniforms.begin[${i}]` :\n                    `coords[${outputAxis - 1}] * uniforms.strides[${\n                        i}] + uniforms.begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    const userCode = `\n       ${main('index')} {\n         if (index < uniforms.size) {\n           let coords = getCoordsFromIndex(index);\n           setOutputAtIndex(index, getX(${newCoords}));\n         }\n       }\n     `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {StridedSliceProgram} from '../strided_slice_webgpu';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: WebGPUBackend,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeData(sliced.dataId);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      const values = backend.readSync(x.dataId) as TypedArray;\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram(finalShapeSparse);\n      const uniformData =\n          [{type: 'int32', data: $begin}, {type: 'int32', data: $strides}];\n      const resultValues =\n          backend.runWebGPUProgram(program, [x], x.dtype, uniformData);\n      result = reshape(\n          {inputs: {x: resultValues}, backend, attrs: {shape: finalShape}});\n      backend.disposeData(resultValues.dataId);\n    }\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgpu',\n  kernelFunc: stridedSlice as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: WebGPUBackend,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgpu',\n  kernelFunc: stringNGrams as unknown as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {BinaryOpType} from '../binary_op_util';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nexport const sub = binaryKernelFunc(\n    {opType: BinaryOpType.SUB, cpuKernelImpl: cpuSub, supportsComplex: true});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const tan = unaryKernelFunc({opType: UnaryOpType.TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgpu',\n  kernelFunc: tan\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {UnaryOpType} from '../unary_op_util';\n\nexport const tanh = unaryKernelFunc({opType: UnaryOpType.TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgpu',\n  kernelFunc: tanh\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, TensorScatterUpdate, TensorScatterUpdateAttrs, TensorScatterUpdateInputs, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {ScatterProgram} from '../scatter_webgpu';\n\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\n\nexport function tensorScatterUpdate(args: {\n  inputs: TensorScatterUpdateInputs,\n  backend: WebGPUBackend,\n  attrs: TensorScatterUpdateAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {tensor, indices, updates} = inputs;\n  const {} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, tensor.shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(tensor.shape, indices.dtype);\n  }\n\n  const toDispose = [];\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  toDispose.push(flattenIndices);\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n  toDispose.push(flattenX);\n  const flattenTensor =\n      reshape({inputs: {x: tensor}, backend, attrs: {shape: flattenShape}});\n  toDispose.push(flattenTensor);\n  const output = tile({\n    inputs: {x: flattenTensor},\n    backend,\n    attrs: {reps: Array(flattenShape.length).fill(1)}\n  });\n  const program = new ScatterProgram(\n      [numUpdates, sliceSize], sliceRank, flattenIndices.shape.length,\n      flattenX.shape.length, strides, flattenShape, tensor.dtype, false);\n  const size = util.sizeFromShape([numUpdates, sliceSize]);\n  const uniformData = [\n    {type: 'int32', data: [sliceRank]},\n    {type: 'int32', data: strides},\n    {type: 'int32', data: [size]},\n  ];\n  const res = backend.runWebGPUProgram(\n      program, [flattenX, flattenIndices], flattenTensor.dtype, uniformData,\n      output);\n  toDispose.push(res);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: tensor.shape}});\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n\n  return reshaped;\n}\n\nexport const tensorScatterUpdateConfig: KernelConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'webgpu',\n  kernelFunc: tensorScatterUpdate as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\n\nexport class SwapProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'indices'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.uniforms = `inputSize : i32, firstPass : i32, negativeInf : f32,\n        dir : i32, inc : i32,`;\n    this.shaderKey = 'swap';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // We compare elements pair-wise within a group of size 2 * inc.\n            // The comparing rule for each group alternates between ascending\n            // and descending. Within each group, we compare each pair at\n            // positions i and i+inc. To decide whether an element at position i\n            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n            // inc, it is in the first half of the group, we denote it as x0,\n            // otherwise we denote it as x1.\n            // For example, as shown in the Bitonic top K paper referenced\n            // above, Figure5(a) shows that element[1] is in the second half of\n            // the group when group size is 2, but it is in the first half of\n            // the group when group size is 4.\n            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;\n            var i = 0;\n            if (isFirstInPair) {\n              i = elemIdx;\n            } else {\n              i = elemIdx - uniforms.inc;\n            }\n\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.inc;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.inc));\n            }\n\n            var x0 = f32(0.0);\n            var x1 = f32(0.0);\n            if (i0 < uniforms.inputSize) {\n              x0 = getX(batch, i0);\n            } else {\n              x0 = uniforms.negativeInf;\n            }\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = uniforms.negativeInf;\n            }\n\n            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;\n            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n            if (reverse == isGreater) {\n              // Elements in opposite order of direction\n              let iTemp = i0;\n              i0 = i1;\n              i1 = iTemp;\n            }\n            if (isFirstInPair) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n\nexport class MergeProgram implements WebGPUProgram {\n  outputShape: number[];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'indices'];\n  uniforms: string;\n  workgroupSize: [number, number, number] = [256, 1, 1];\n  size = true;\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    // |n| Size of the original input of TopK\n    // |firstPass| indicates if this is the first time swap is being used which\n    // means no indices input containing the top K is present yet.\n    // |k| Top k elements desired\n    this.uniforms = `inputSize : i32, firstPass : i32, k : i32,`;\n    this.shaderKey = 'merge';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n        ${main('index')} {\n          if (index < uniforms.size) {\n            let outC = getCoordsFromIndex(index);\n            let batch = outC[0];\n            let elemIdx = outC[1];\n            // The output size is half of the previous size.\n            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _\n            // (k=4), we only need to output the indices at positions |, the\n            // indices at positions _ can be thrown away, see Figure5(b) After\n            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced\n            // above.\n            // For example, the paper shows we only need to output the orange\n            // bars. The output sequence should look like this | | | | | | | |.\n            // Because the sequence is halved, to map the output index back to\n            // the previous sequence to find the corresponding value, we need\n            // to double the index. When we double the index, we basically\n            // interpolate a position, so 2i looks like\n            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k\n            // position of each 2k positions by - elemIdx % k. E.g. for output\n            // at index 4,5,6,7, we want to get the corresponding element at\n            // original index 8,9,10,11, for output at index 8,9,10,11,\n            // we want to get the corresponding element at original index\n            // 16,17,18,19, so on and so forth.\n\n            var i = 0;\n            if (elemIdx < uniforms.k) {\n              i = elemIdx;\n            } else {\n              i = elemIdx * 2 - elemIdx % uniforms.k;\n            }\n            var i0 = 0;\n            if (uniforms.firstPass == 1) {\n              i0 = i;\n            } else {\n              i0 = i32(getIndices(batch, i));\n            }\n            var i1 = 0;\n            if (uniforms.firstPass == 1) {\n              i1 = i + uniforms.k;\n            } else {\n              i1 = i32(getIndices(batch, i + uniforms.k));\n            }\n\n            let x0 = getX(batch, i0);\n            var x1 = f32(0.0);\n            if (i1 < uniforms.inputSize) {\n              x1 = getX(batch, i1);\n            } else {\n              x1 = x0;\n            }\n\n            if (x0 >= x1) {\n              setOutputAtIndex(index, f32(i0));\n            } else {\n              setOutputAtIndex(index, f32(i1));\n            }\n          }\n        }\n      `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_webgpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: WebGPUBackend, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeData(tensorInfo.dataId);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: WebGPUBackend, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted}= attrs;\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape({inputs: {x}, attrs: {shape: [batch, lastDim]}, backend});\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const firstPass = indices === null ? 1 : 0;\n    const uniformDataSwap = [\n        {type: 'int32', data: [lastDim]},\n        {type: 'int32', data: [firstPass]},\n        {type: 'float32', data: [Number.NEGATIVE_INFINITY]},\n        {type: 'int32', data: [dir]},\n        {type: 'int32', data: [inc]}\n    ];\n    const prevIndices = indices;\n    indices = backend.runWebGPUProgram(\n        program, inputs, 'int32', uniformDataSwap);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const uniformDataMerge = [\n        {type: 'int32', data: [lastDim]},\n        {type: 'int32', data: [firstPass]},\n        {type: 'int32', data: [kPow2]}\n    ];\n    const prevIndices = indices;\n    indices = backend.runWebGPUProgram(\n        mergeProgram, inputs, 'int32', uniformDataMerge);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgpu',\n  kernelFunc: topK as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class TransformProgram implements WebGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  uniforms = 'interpolationModeId : i32, fillModeId : i32, fillValue : f32,';\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  size = true;\n\n  constructor(outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(this.outputShape);\n    this.dispatch = computeDispatch(\n        this.dispatchLayout, this.outputShape, this.workgroupSize);\n    this.shaderKey = 'transform';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n          fn mapCoord(outCoord : f32, len : f32) -> f32{\n            var inCoord = outCoord;\n            if(uniforms.fillModeId == 2) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  if (inCoord < sz2) {\n                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +\n                    inCoord;\n                  }\n                  if (inCoord < -len) {\n                    inCoord = inCoord + sz2;\n                  } else {\n                    inCoord = -inCoord - 1.0;\n                  }\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz2 = 2.0 * len;\n                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));\n                  if (inCoord >= len) {\n                    inCoord = sz2 - inCoord - 1.0;\n                  }\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 3) {\n              if (inCoord < 0.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);\n                }\n              } else if (inCoord > len - 1.0) {\n                if (len <= 1.0) {\n                  inCoord = 0.0;\n                } else {\n                  let sz = len - 1.0;\n                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));\n                }\n              }\n              return clamp(inCoord, 0.0, len - 1.0);\n            } else if (uniforms.fillModeId == 4) {\n              return clamp(outCoord, 0.0, len - 1.0);\n            }\n            return outCoord;\n          }\n          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,\n            channel : i32) -> f32 {\n            var outputValue : f32;\n            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {\n                outputValue = getImage(batch, coordY, coordX, channel);\n            } else {\n              outputValue = uniforms.fillValue;\n            }\n            return outputValue;\n          }\n\n          ${main('index')} {\n            if (index < uniforms.size) {\n              let coords = getCoordsFromIndex(index);\n              var outputValue : f32;\n              let batch = coords[0];\n              let x = coords[2];\n              let y = coords[1];\n              let channel = coords[3];\n              let xf = f32(x);\n              let yf = f32(y);\n              let a1 = getTransforms(batch, 0);\n              let a2 = getTransforms(batch, 1);\n              let a3 = getTransforms(batch, 2);\n              let b1 = getTransforms(batch, 3);\n              let b2 = getTransforms(batch, 4);\n              let b3 = getTransforms(batch, 5);\n              let c1 = getTransforms(batch, 6);\n              let c2 = getTransforms(batch, 7);\n              let projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = uniforms.fillValue;\n              } else {\n                let inX = (a1 * xf + a2 * yf + a3) / projection;\n                let inY = (b1 * xf + b2 * yf + b3) / projection;\n                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));\n                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));\n\n                if (uniforms.interpolationModeId == 1) {\n                  let coordY = i32(round(mapY));\n                  let coordX = i32(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  let yFloor = floor(mapY);\n                  let xFloor = floor(mapX);\n                  let yCeil = yFloor + 1.0;\n                  let xCeil = xFloor + 1.0;\n                  let valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);\n                  let valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutputAtIndex(index, outputValue);\n            }\n          }\n        `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {TransformProgram} from '../transform_webgpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: WebGPUBackend,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(outShape);\n  const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n  let fillModeId: number;\n  switch (fillMode) {\n    case 'constant':\n      fillModeId = 1;\n      break;\n    case 'reflect':\n      fillModeId = 2;\n      break;\n    case 'wrap':\n      fillModeId = 3;\n      break;\n    case 'nearest':\n      fillModeId = 4;\n      break;\n    default:\n      fillModeId = 1;\n      break;\n  }\n  const uniformData = [\n    {type: 'int32', data: [interpolationModeId]},\n    {type: 'int32', data: [fillModeId]}, {type: 'float32', data: [fillValue]}\n  ];\n  return backend.runWebGPUProgram(\n      program, [image, transforms], 'float32', uniformData);\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgpu',\n  kernelFunc: transform as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: WebGPUBackend, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgpu',\n  kernelFunc: unpack as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType} from '@tensorflow/tfjs-core';\n\nimport {atomicAddSnippet} from './shader_util';\nimport {getMainHeaderString as main, WebGPUProgram} from './webgpu_program';\nimport {computeDispatch, flatDispatchLayout} from './webgpu_util';\n\nexport class UnsortedSegmentSumProgram implements WebGPUProgram {\n  outputShape: number[] = [];\n  shaderKey: string;\n  dispatchLayout: {x: number[]};\n  dispatch: [number, number, number];\n  variableNames = ['x', 'segmentIds'];\n  uniforms = 'numSegments : i32, xSize: i32,';\n  workgroupSize: [number, number, number] = [64, 1, 1];\n  atomic = true;\n  type: DataType;\n\n  constructor(inShape: number[], outShape: number[], outputDtype: DataType) {\n    this.outputShape = outShape;\n    this.dispatchLayout = flatDispatchLayout(inShape);\n    this.dispatch =\n        computeDispatch(this.dispatchLayout, inShape, this.workgroupSize);\n    if (outputDtype !== 'float32' && outputDtype !== 'int32') {\n      throw new Error(`UnsortedSegmentSum only supports float32 and int32\n              types, does not support ${outputDtype} type.`);\n    }\n    this.type = outputDtype;\n    this.shaderKey = 'unsortedSegmentSum';\n  }\n\n  getUserCode(): string {\n    const userCode = `\n    ${main('index')} {\n      if (index < uniforms.xSize) {\n        let coords = getXCoordsFromIndex(index);\n        let b = coords[0];\n        let inCol = coords[1];\n\n        let segmentId = i32(getSegmentIds(inCol));\n        if (segmentId >= 0) {\n          let flatIndex = b * uniforms.numSegments + segmentId % uniforms.numSegments;\n          let value = getX(b, inCol);\n\n          ${\n        atomicAddSnippet(\n            '&result[flatIndex]', 'value', this.type as 'float32' | 'int32')}\n        }\n      }\n    }\n  `;\n    return userCode;\n  }\n}\n","/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {WebGPUBackend} from '../backend_webgpu';\nimport {UnsortedSegmentSumProgram} from '../unsorted_segment_sum_webgpu';\n\nimport {fill} from './Fill';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: WebGPUBackend,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const dtype = x.dtype;\n  const shape = [a2D.shape[0], numSegments];\n  const output = fill({backend, attrs: {shape, value: 0, dtype}});\n  const program = new UnsortedSegmentSumProgram(a2D.shape, shape, dtype);\n  const uniformData = [\n    {type: 'int32', data: [numSegments]},\n    {type: 'int32', data: [util.sizeFromShape(a2D.shape)]}\n  ];\n  const segResult = backend.runWebGPUProgram(\n      program, [a2D, segmentIds], dtype, uniformData, output);\n\n  const reshaped =\n      reshape({inputs: {x: segResult}, backend, attrs: {shape: outShape}});\n  toDispose.push(segResult);\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeData(t.dataId));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgpu',\n  kernelFunc: unsortedSegmentSum as unknown as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumprodConfig} from './kernels/Cumprod';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {dilation2DBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2DBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {drawConfig} from './kernels/Draw';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedBatchNormConfig} from './kernels/FusedBatchNorm';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lrnConfig} from './kernels/LRN';\nimport {lrnGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {searchSortedConfig} from './kernels/SearchSorted';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tensorScatterUpdateConfig} from './kernels/TensorScatterUpdate';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv3DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumprodConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  depthwiseConv2dNativeConfig,\n  diagConfig,\n  dilation2DConfig,\n  dilation2DBackpropFilterConfig,\n  dilation2DBackpropInputConfig,\n  drawConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  fromPixelsConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedBatchNormConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  log1pConfig,\n  logConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lrnConfig,\n  lrnGradConfig,\n  maxConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPoolGradConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolWithArgmaxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  searchSortedConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tensorScatterUpdateConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n"],"names":["ENV","env","registerFlag","AdapterInfo","constructor","adapterInfo","this","vendor","architecture","intelGPUGeneration","getIntelGPUGeneration","isIntel","startsWith","Number","match","BufferManager","device","numUsedBuffers","numFreeBuffers","freeBuffers","Map","usedBuffers","numBytesUsed","numBytesAllocated","acquireBuffer","size","usage","mappedAtCreation","reuse","buffer","key","getBufferKey","has","set","get","length","pop","createBuffer","push","releaseBuffer","bufferArray","index","indexOf","Error","destroy","getNumUsedBuffers","getNumFreeBuffers","dispose","forEach","buffers","TextureManager","numUsedTextures","numFreeTextures","freeTextures","usedTextures","acquireTexture","width","height","format","byteSize","getBytesPerElement","getTextureKey","newTexture","shift","createTexture","releaseTexture","texture","textureList","textureIndex","splice","getNumUsedTextures","getNumFreeTextures","textures","symbolicallyComputeStrides","indicesArr","variableName","Math","max","numCoords","shape","map","d","strides","Array","i","atomicAddSnippet","ptr","v","type","PixelsOpType","compileProgram","program","inputsData","output","parallelCompilation","source","inputInfo","outputData","prefixSnippets","flatWorkgroupSize","workgroupSize","outputComponent","isFlatDispatch","pixelsOpType","inoutSnippet","FROM_PIXELS","dataTypeToGPUType","dtype","outShapeStridesType","useGlobalIndex","isFlatDispatchLayout","commonSnippet","join","getCoordsFromIndexSnippet","getUserCode","getStartHeaderString","stridesLength","stridesDataType","uniformDeclaration","variableNames","x","perDataType","getCoordsDataType","charAt","toLowerCase","slice","outputDataType","uniforms","uniformShader","curInsertRe","replace","preInsertRe","_","p1","p2","insertAlignment","atomic","variableComponents","coordsSnippet","outShape","dispatchLayout","y","z","outRank","rank","gatherDimensionsStr","dims","arr","j","dimensions","snippet","getOutputCoordsSnippet","sources","isInfSnippet","getOutputIndexFromCoordsSnippet","outBufferType","component","gpuType","typeSnippet","setOutputSnippet","inputSnippet","res","texName","name","funcName","toUpperCase","inputs","shapeStr","rankStr","getInputAtCoordsSnippet","texFuncSnippet","inRank","util","arraysEqual","broadcastDims","backend_util","getBroadcastDims","rankDiff","getCoordsXYZ","unpackedCoordsSnippet","coordsType","coordsValues","s","getInputByOutputSnippet","getInputSnippet","makeShader","module","createShaderModule","code","label","printShaderString","printShaderArray","split","some","item","shaderKey","includes","console","group","debug","groupEnd","createComputePipelineAsync","compute","entryPoint","layout","createComputePipeline","getMainHeaderString","params","getWorkgroupSizeString","stridesName","computeStrides","coords","assert","dispatch","hasOwnProperty","arrayProduct","product","computeDispatch","outputShape","elementsPerThread","dispatchX","dispatchY","dispatchZ","ceil","computeWorkgroupInfoForMatMul","dimAOuter","dimInner","dimBOuter","transposeA","computeWorkgroupSizeForConv2d","isVec4","dim0","dim1","computeWorkPerThreadForConv2d","flatDispatchLayout","GPUBytesPerElement","isWebGPUSupported","globalThis","navigator","gpu","assertNotComplex","tensor","opName","isArray","t","MatMulProgramType","tileSize","every","dim","dimIdx","CPU_HANDOFF_SIZE_THRESHOLD","getNumber","WebGPUBackend","KernelBackend","nextDataId","super","commandQueueOwnedIds","WeakSet","dispatchCountInPass","disposed","downloadWaitMs","tensorDataPendingDisposal","queryResolveBuffer","querySet","querySetCount","stagingPendingDisposal","uniformPendingDisposal","uploadWaitMs","hasReadSyncWarned","hasTimestampQueryWarned","webgpu_util.isWebGPUSupported","pipelineCache","queue","commandEncoder","computePassEncoder","supportTimestampQuery","features","thresholdToIncreaseWorkgroups","bufferManager","textureManager","tensorMap","DataStorage","engine","getBool","dummyCanvas","document","createElement","dummyContext","getContext","configure","body","appendChild","floatPrecision","disposeData","dataId","force","tensorData","refCount","complexTensorInfos","real","imag","releaseResource","delete","memory","numBytesInGPU","numBytesAllocatedInGPU","unreliable","resource","external","GPUBuffer","GPUTexture","incRef","decRef","write","values","id","move","submitQueue","submit","finish","b","ensureCommandEncoderReady","createCommandEncoder","endComputePassEncoder","end","async","pipelines","Promise","all","Object","e","message","keys","warn","stagingBuffer","GPUBufferUsage","COPY_DST","MAP_READ","copyBufferToBuffer","mapAsync","GPUMapMode","READ","getMappedRange","unmap","undefined","getCurrentTexture","convertAndCacheOnCPU","data","readSync","realValues","imagValues","complexVals","convertBackendValuesAndArrayBuffer","mergeRealAndImagArrays","alphaModes","bufferSize","pixelsSize","valsGPU","ArrayBuffer","canvasWidth","canvasHeight","stagingDeviceStorage","OffscreenCanvas","stagingHostStorage","storage","context","GPUTextureUsage","alphaMode","readDataGPUToCPU","offset","copyBufferToTexture","bytesPerRow","willReadFrequently","clearRect","drawImage","stagingValues","getImageData","span","Uint8ClampedArray","k","value","fullyReadCount","floor","remainSize","vals","ps","read","getBufferData","copyBuffer","srcBuffer","dstBuffer","createTensorFromGPUData","webGPUData","zeroCopy","webgpu_util.GPUBytesPerElement","sizeFromShape","STORAGE","COPY_SRC","makeTensorFromDataId","readToGPU","srcTensorData","tensorInfo","makeTensorInfo","tensorRef","makeTensorFromTensorInfo","bufferSync","strings","decodeString","_a","f","oldActiveTimers","activeTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","query","filter","flattenedActiveTimerNames","kernelMs","wallMs","sum","ms","isString","encodeString","tensorToBinding","createView","uploadToGPU","mapState","MAP_WRITE","arrayBuffer","Int32Array","Float32Array","makeUniforms","programUniform","currentOffset","preLength","offsets","maxAlignmentOfField","baseAlignment","Uint32Array","uniformBuffer","UNIFORM","writeBuffer","runWebGPUProgram","outputDtype","programDefinedUniform","getTypedArrayFromDType","MAX_COMPUTE_PER_DIMENSION_DISPATCH_SIZE","limits","maxComputeWorkgroupsPerDimension","dispatchAverage","sqrt","cbrt","reshapeDispatch","input","shapes","types","element","inputShapesEqualsOutShape","broadcastDimsKey","flatDispatchString","webgpu_program.makeShaderKey","webgpu_program.compileProgram","pipeline","recordAndSubmit","bufferShapes","uniformsType","NaN","Infinity","concat","bindings","add","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","shouldTimeProgram","computePassDescriptor","createQuerySet","count","timestampWrites","queryIndex","location","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","webgpu_program.PixelsOpType","DRAW","getQueryTime","QUERY_RESOLVE","resolveQuerySet","queryStagingBuffer","BigUint64Array","time","shouldExecuteOnCPU","sizeThreshold","numDataIds","BinaryOpType","registerBackend","gpuDescriptor","powerPreference","adapter","requestAdapter","deviceDescriptor","requiredFeatures","adapterLimits","requiredLimits","maxComputeWorkgroupStorageSize","maxStorageBufferBindingSize","maxBufferSize","maxComputeWorkgroupSizeX","maxComputeInvocationsPerWorkgroup","requestDevice","requestAdapterInfo","getBinaryOpString","useVec4","doOpSnippet","ATAN2","MAX","MIN","MOD","NOT_EQUAL","POW","isNaN","dTypeN","boolN","ADD","COMPLEX_MULTIPLY_IMAG","COMPLEX_MULTIPLY_REAL","DIV","ELU_DER","EQUAL","FLOOR_DIV","GREATER","GREATER_EQUAL","LESS","LESS_EQUAL","LOGICAL_AND","LOGICAL_OR","MUL","PRELU","SQUARED_DIFFERENCE","SUB","UnaryOpType","ERF","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","SELU","SELU_SCALE","SELU_SCALEALPHA","getUnaryOpString","ABS","ACOS","ACOSH","ASIN","ASINH","ATAN","ATANH","COS","COSH","CEIL","ELU","EXP","EXPM1","FLOOR","IS_FINITE","IS_INF","IS_NAN","LINEAR","LOG","LOG1P","LOGICAL_NOT","NEG","LEAKYRELU","RECIPROCAL","RELU","RELU6","ROUND","RSQRT","SIGMOID","SIGN","SIN","SINH","SOFTPLUS","SQRT","SQUARE","STEP","TAN","TANH","TO_INT","activationFnSnippet","activation","hasPreluActivationWeights","packed","coordsLength","activationOpSnippet","dataType","biasActivationSnippet","hasBias","matMulReadFnSource","transposeB","fitAOuter","fitBOuter","fitInner","sampleA","sampleB","matMulReadWriteFnSource","makeMatMulPackedVec4Source","workPerThread","tileInner","splitK","splitedDimInner","broadcastBatch","tileAOuter","tileBOuter","tileAWidth","tileAHight","innerElementSize","rowPerThreadB","rowPerThread","colPerThread","main","transpose","writeDataToSubAVec4Snippet","bCachedStr","accStr","calculateResultSnippet","writeDataToSubASnippet","makeMatMulPackedSource","sequentialAccessByThreads","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","MatMulPackedProgram","aShape","bias","preluActivationWeights","isVectorA","workgroupInfo","addBias","getShapeFit","userCode","readVectorASnippet","makeVectorMatrixProductSource","MatMulReduceProgram","workgroupSizeX","MatMulSmallOutputSizeProgram","bShape","makeMatMulSmallOutputSizeSource","MatMulSplitKProgram","BiasActivationProgram","FillProgram","fill","args","backend","attrs","inferDtype","getArrayFromDType","uniformData","fillConfig","kernelName","Fill","backendName","kernelFunc","reshape","xSize","$shape","inferFromImplicitShape","$xSize","reshapeConfig","Reshape","batchMatMulImpl","a","leakyreluAlpha","aRank","bRank","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","broadcast_util","assertAndGetBroadcastShape","a3dShape","b3dShape","a3d","b3d","intermediates","batchDim","out","matmulProgramType","thresholdFlagValue","workgroupsBy32x32","biasActivationProgram","activationInputs","outActivated","outReshaped","_fusedMatMulConfig","_FusedMatMul","BinaryOpComplexProgram","op","BinaryOpProgram","useSharedMemoryWithA","useSharedMemoryWithB","lastDimensionSize","aDivisibleBy4","bDivisibleBy4","isScalarShape","dType","opFnStr","sharedIndexSnippet","accessDataSnippet","identity","identityConfig","Identity","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","UnaryOpProgram","unaryKernelFunc","opType","cpuKernelImpl","webgpuBackend","$dtype","xData","outValues","binaryKernelFunc","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","upcastType","realProgram","imagProgram","complexOutput","decodedAVals","fromUint8ToStringArray","decodedBVals","createSimpleBinaryKernelImpl","aVals","bVals","newShape","resultRank","resultStrides","resultSize","result","aStrides","bStrides","aBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","bitwiseAndImpl","createSimpleUnaryImpl","newValues","ceilImpl","xi","equalImpl","expImpl","exp","expm1Impl","expm1","floorImpl","floorDivImpl","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","log","maximumImpl","aValue","bValue","minimumImpl","min","multiplyImpl","notEqualImpl","makeSplits","indices","indicesShape","paramsNestedSplits","numParamsDenseValues","valueSlices","numValues","numSplits","outSplits","splits","lastSplit","validateSplits","nrows","rowLength","start","limit","outDim","outSplitsOutDim","delta","computeFlatOuterDims","orig","numOutDims","outDims","inDim","getValues","paramsDenseValues","paramsDenseValuesShape","paramsDenseValuesDType","valuesShape","valuesOut","numElements","valueSize","denseM","valuesM","outPos","writeValueSlices","INT32_MAX","RowPartitionType","RaggedTensorToTensorOp","shapeShape","valuesDType","defaultValue","defaultValueShape","rowPartitionValues","rowPartitionValuesShapes","rowPartitionTypeStrings","rowPartitionTypes","getRowPartitionTypesHelper","raggedRank","getRaggedRank","getRowPartitionTypeByDimension","dimension","FIRST_DIM_SIZE","getRowPartitionTensor","getMaxWidth","rowPartitionTensor","VALUE_ROWIDS","getMaxWidthValueRowID","ROW_SPLITS","getMaxWidthRowSplit","static","rowSplit","tensorLength","maxWidth","currentWidth","valueRowIds","indexLength","firstEqualIndex","firstEqualIndexValue","tensorShapeFromTensor","tShape","isPartial","makeShape","calculateOutputSize","firstDim","valueShape","validateDefaultValueShape","combineRaggedTensorToTensorShapes","calculateFirstParentOutputIndex","firstDimension","outputIndexMultiplier","firstDimensionOutput","minDimension","currentOutputIndex","calculateOutputIndexRowSplit","parentOutputIndex","outputSize","rowSplitSize","realLength","parentOutputIndexCurrent","calculateOutputIndexValueRowID","indexSize","currentOutputColumn","currentValueRowId","nextValueRowId","calculateOutputIndex","partitionType","getFirstDimensionSize","firstPartitionTensor","firstPartitionType","multiplier","outputTensor","outputIndex","setOutput","valuesBase","outputBase","elementShape","valueElementSize","outputIndexSize","srcShape","tidy","defaultValueTensor","bCastDefault","broadcastTo","dataSync","srcStart","dstStart","dstEnd","srcI","dstI","src","subarray","copyArray","dst","rsqrtImpl","sigmoidImpl","sqrtImpl","squaredDifferenceImpl","diff","staticRegexReplaceImpl","pattern","replaceGlobal","rewrite","RegExp","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","delimiters","skipEmpty","delimiter","token","tokenStart","subImpl","comparePair","valueDiff","select","array","left","right","sd","sign","swap","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","inputType","from","zero","toTypedArray","resultData","resultShape","simplyConcat","colOffset","decodedData","tIdx","row","resIdx","col","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","paramsShape","paramsSize","flattenIndex","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","stop","num","step","reduceSize","xShape","xDtype","minusOne","createScalarValue","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","prod","paramsNestedSplitsShapes","outputRaggedRank","numParams","locString","validateIndices","outputNestedSplits","splitsOut","getSplits","outputDenseValues","starts","startsShape","startsDType","limitsShape","deltas","deltasShape","broadcastStarts","broadcastLimits","broadcastDeltas","inSizes","nRows","rtNestedSplits","abs","nVals","rtDenseValues","valueIndex","rowSize","shapesShape","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","TensorBuffer","resultValues","begin","isContinous","slice_util","isSliceContinous","xStrides","flatOffset","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","indicesDType","denseShape","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","getSparseFillEmptyRowsIndicesDenseShapeMismatch","rowsAreOrdered","lastIndicesRow","csrOffset","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","unknownIndex","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","trunc","getSparseReshapeInputOutputMultipleErrorMessage","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","getSparseSegmentReductionNegativeSegmentIdsErrorMessage","outputLength","reduce","uninitializedIndex","outIndex","nextIndex","getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage","getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage","getSparseSegmentReductionIndicesOutOfRangeErrorMessage","newLoc","dataSplits","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","reps","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","perm","xRank","newStrides","axis","$axis","parseAxisParam","uniqueElements","inputBuffer","uniqueIndices","is1DTensor","toString","axisValues","m","existingIndex","uniqueIndex","outputTmpShape","outputBuffer","uniqueElementIndex","addImplCPU","castImpl","castImplCPU","ceilImplCPU","concatImpl","concatImplCPU","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","floorDivImplCPU","gatherNdImpl","gatherNdImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterEqualImplCPU","greaterImplCPU","lessEqualImplCPU","lessImplCPU","logImplCPU","maxImpl","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImpl","negImplCPU","notEqualImplCPU","prodImpl","prodImplCPU","rangeImpl","rangeImplCPU","rsqrtImplCPU","scatterImpl","scatterImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","stridedSliceImpl","stridedSliceImplCPU","stringNGramsImpl","stringNGramsImplCPU","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU","shared","absConfig","Abs","acos","acosConfig","Acos","acosh","acoshConfig","Acosh","addKernelFunc","cpuAdd","addConfig","Add","AddNPackedProgram","snippets","variable","operation","addNConfig","AddN","tensors","d1","d2","TransposeSharedProgram","newDim","TransposeProgram","switched","getSwitchedCoords","switchedCoords","cpuTranspose","transposeConfig","Transpose","ReduceProgram","reduceInfo","reduceType","inSize","reduceOp","initValue","outputSnippet","RETURN_TYPES","mean","any","keepDims","toDispose","origAxes","axes","permutedAxes","getAxesPermutation","getInnerMostAxes","assertAxesAreInnerMostDims","reduceOutShape","resOutShape","expandShapeToKeepDim","windowSize","outSize","sumOutType","reduced","allConfig","All","anyConfig","Any","ArgMinMaxProgram","getInputShapeLastDim","splitOutputCoords","argMaxConfig","ArgMax","$x","intermediateTensorInfos","NEGATIVE_INFINITY","argMinConfig","ArgMin","POSITIVE_INFINITY","asin","asinConfig","Asin","asinh","asinhConfig","Asinh","atan","atanConfig","Atan","atan2","atan2Config","Atan2","atanh","atanhConfig","Atanh","PoolWithFilterSizeEqualsOneProgram","convInfo","Pool2DProgram","poolType","computePositions","flattenPositions","includeBatchIndex","updateSnippet","returnValue","Pool3DProgram","reductionIndices","maxConfig","Max","meanConfig","Mean","poolImpl","filterWidth","filterHeight","inShape","inWidth","inHeight","padInfo","reshapeX","reduceX","strideHeight","strideWidth","top","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","computePool2DInfo","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPoolProgram","strideDepth","front","inDepth","effectiveFilterDepth","AvgPool2DBackpropProgram","AvgPool3DBackpropProgram","avgPool3DGradConfig","AvgPool3DGrad","dy","avgMultiplier","filterDepth","outDepth","outHeight","outWidth","avgPoolGradConfig","AvgPoolGrad","batchMatMulConfig","BatchMatMul","SliceProgram","destSize","sourceCoords","coord","getCoords","coordSum","$begin","$size","parseSliceParams","assertParamsValid","xTensorData","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","writeSnippet","BincountProgram","hasWeights","bincountConfig","Bincount","weights","bincountInputs","BroadcastArgsProgram","broadcastArgsConfig","BroadcastArgs","s0","s1","s0TensorInfo","s1TensorInfo","s0Vals","s1Vals","broadcastShape","s0Size","s1Size","notEqual","cpuNotEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf","zeros","floatX","realPart","hasEncodingLoss","resultType","int","zerosTensorInfo","ceilConfig","Ceil","ClipVec4Program","ClipProgram","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbsConfig","ComplexAbs","programInputs","ConcatProgram","computeOutShape","offsetLength","lastIndex","lastShiftIndex","imagConfig","Imag","reals","imags","realConcated","imagConcated","r","runOnCpu","tensors2D","innerSize","inputsValShapes","finalOutShape","outInfo","maxInputNum","maxStorageBuffersPerShaderStage","reducedInputs","subArray","computeTensors2D","reshapedResult","assertParamsConsistent","$inputs","concatConfig","Concat","Conv2DMMProgram","isChannelsLast","inChannels","outChannels","matMulSource","elementsSize","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","Conv2DNaiveProgram","Im2ColProgram","rowDim","colDim","getShapeForBatchMatMul","conv2DImpl","sameSize","useNaiveConv2d","xReshaped","filterReshaped","sharedDim","conv2dByMatMul","x2ColShape","im2ColProgram","x2Col","conv2dWithIm2Col","inputVar","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DDerInputProgram","channelDim","vec4Snippet","Conv2DDerFilterProgram","filterShape","Conv3DDerFilterProgram","Conv3DDerInputProgram","conv2DBackpropFilterConfig","Conv2DBackpropFilter","Conv2DDerInputMMProgram","conv2dTransposeCommonSnippet","conv2DBackpropInputConfig","Conv2DBackpropInput","Conv3DNaiveProgram","conv3DConfig","Conv3D","computeConv3DInfo","dilationDepth","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","cos","cosConfig","Cos","cosh","coshConfig","Cosh","CropAndResizeProgram","channnel","boxShape","cropSize","method","numBoxes","methodId","cropHeightBiggerThan1","cropWidthBiggerThan1","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","extrapolationValue","CumOpType","CumProgram","exclusive","reverse","initVal","Prod","val","condition","idxString","getFinalCoord","cumImpl","permutation","permutedX","permutedAxis","log2","prevResult","reverseTransposedResult","getUndoAxesPermutation","cumprodConfig","Cumprod","cumsumConfig","Cumsum","Sum","denseBincountConfig","DenseBincount","xRankOne","DepthToSpaceProgram","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","DepthToSpace","blockSize","outputHeight","outputWidth","outputDepth","DepthwiseConv2DNCHWSharedProgram","hasPreluActivation","tileAHeight","DepthwiseConv2DVec4Program","virtualWidth","virtualOutputShape","xNumber","DepthwiseConv2DProgram","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","DepthwiseConv2DDerFilterProgram","DepthwiseConv2DDerInputProgram","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","DiagProgram","diagConfig","Diag","flat","Dilation2DProgram","dilation2DConfig","Dilation2D","computeDilation2DInfo","Dilation2DBackpropInputProgram","Dilation2DBackpropFilterProgram","dilation2DBackpropFilterConfig","Dilation2DBackpropFilter","dilation2DBackpropInputConfig","Dilation2DBackpropInput","DrawProgram","textureFormat","calculateResult","drawConfig","Draw","canvas","options","imageOptions","alpha","canvasWebGPU","gpuContext","numChannels","STORAGE_BINDING","info","canvas2dContext","multiplyKernelFunc","cpuMultiply","multiplyConfig","Multiply","sumConfig","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","elu","eluConfig","Elu","eluGradConfig","EluGrad","equal","cpuEqual","equalConfig","Equal","erf","erfConfig","Erf","expConfig","Exp","$dim","expandDimsConfig","ExpandDims","expm1Config","Expm1","FFTProgram","fftImpl","inverse","inputSize","innerDimensionSize","input2D","PI","imagPart","complexOutputReshaped","fftConfig","FFT","FlipLeftRightProgram","imageShape","flipLeftRightConfig","FlipLeftRight","floorConfig","Floor","floorDiv","floorDivConfig","FloorDiv","FromPixelsProgram","importVideo","textureLoad","fromPixelsConfig","FromPixels","pixels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","isCanvas","HTMLCanvasElement","isImageBitmap","ImageBitmap","videoWidth","videoHeight","isVideoOrImage","importExternalTexture","newWillReadFrequently","fromPixels2DContext","RENDER_ATTACHMENT","TEXTURE_BINDING","copyExternalImageToTexture","imageData","pixelArray","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","offsetSnippet","scaleSnippet","fusedBatchNormConfig","FusedBatchNorm","scale","variance","varianceEpsilon","webGPUBackend","batchNormInputs","fusedConv2DConfig","FusedConv2D","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","eitherStridesOrDilationsAreOne","GatherNDProgram","sliceDim","strideString","gatherNdConfig","GatherNd","prepareAndValidate","flattenIndices","flattenX","outValue","GatherProgram","currentCoords","getSourceCoords","gatherV2","batchDims","parsedAxis","shapeInfo","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","indicesValues","indicesBuffer","xValues","xBuffer","gatherV2Config","GatherV2","greater","cpuGreater","greaterConfig","Greater","greaterEqual","cpuGreaterEqual","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFinite","isFiniteConfig","IsFinite","isInf","isInfConfig","IsInf","isNaNConfig","IsNan","leakyReluConfig","LeakyRelu","less","cpuLess","lessConfig","Less","lessEqual","cpuLessEqual","lessEqualConfig","LessEqual","LinSpaceProgram","linSpaceConfig","LinSpace","logConfig","Log","log1p","log1pConfig","Log1p","logicalAnd","logicalAndConfig","LogicalAnd","logicalNot","logicalNotConfig","LogicalNot","logicalOr","logicalOrConfig","LogicalOr","powOperatorSnippet","LRNProgram","LRNSharedProgram","radius","maxAllowRadius","elementsPerWorkgroup","lrnConfig","LRN","depthRadius","beta","LRNGradProgram","lrnGradConfig","LRNGrad","maximum","cpuMaximum","maximumConfig","Maximum","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPoolProgram","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","maxPool3DGradConfig","MaxPool3DGrad","maxPool3dPositionsProgram","maxPool3dPositions","maxPool3dBackpropProgram","maxPoolGradConfig","MaxPoolGrad","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackpropProgram","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","includeBatchInIndex","poolOutput","minConfig","Min","minimum","cpuMinimum","minimumConfig","Minimum","MirrorPadProgram","paddings","mode","p","shaderStart","shaderEnd","shaderOutC","unpackedCoords","mirrorPadConfig","MirrorPad","mod","modConfig","Mod","MultinomialProgram","numSamples","SoftmaxProgram","softmax","logits","logitsReshaped","resReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","seed","normalized","probs","numOutcomes","negConfig","Neg","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","kernel_impls","nonMaxSuppressionV3Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","nonMaxSuppressionV5Impl","OneHotProgram","depth","oneHotConfig","OneHot","onValue","offValue","zerosLike","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","padCommon","fillZero","PadProgram","padV2Config","PadV2","constantValue","pow","powConfig","Pow","preluConfig","Prelu","prodConfig","rangeConfig","Range","realDiv","realDivConfig","RealDiv","reciprocal","reciprocalConfig","Reciprocal","relu","reluConfig","Relu","relu6","relu6Config","Relu6","ResizeBilinearProgram","newHeight","newWidth","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","ResizeBilinearBackpropProgram","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","ResizeNearestNeighborProgram","sourceFracIndexRC","resizeNearestNeighborConfig","ResizeNearestNeighbor","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","ReverseProgram","reverseConfig","Reverse","xShape4D","dims4D","ax","RotateProgram","fillValue","fillSnippet","rotateWithOffsetConfig","RotateWithOffset","radians","center","centerX","centerY","getImageCenter","sin","parseFloat","toFixed","round","roundConfig","Round","rsqrt","rsqrtConfig","Rsqrt","ScatterProgram","flattenXShape","indicesRank","updatesRank","sliceDimGreaterThanOne","stridesType","indicesString","indicesSnippet","outCoordsString","getUpdatesCoordsFromFlatIndex","updatesSnippet","scatterNdConfig","ScatterNd","calculateShapes","SearchSortedProgram","side","searchSortedConfig","SearchSorted","sortedSequence","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","selu","seluConfig","Selu","sigmoid","sigmoidConfig","Sigmoid","signConfig","Sign","sinConfig","Sin","sinh","sinhConfig","Sinh","softplus","softplusConfig","Softplus","SpaceToBatchNDProgram","paddedXShape","reshapedPaddedXShape","paddedXShapeStridesShapeLength","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXShapeStrides","paddedXT","SparseSegmentSumProgram","sparseSize","SparseSegmentIdCountProgram","segmentIdsShape","SparseSegmentMeanProgram","sparseSegmentReduce","isSum","segmentSize","$segmentIds","sparseSegmentSum","$sparseSegmentSum","sparseSegmentIdCount","$sparseSegmentIdCount","sparseSegmentMean","$sparseSegmentMean","sparseSegmentMeanConfig","SparseSegmentMean","sparseSegmentSumConfig","SparseSegmentSum","TileProgram","uniformPrefix","tile","buf","tileConfig","Tile","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","updatesBuf","$defaultValue","$sparseIndices","$sparseValues","$denseValues","denseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","sqrtConfig","Sqrt","squareConfig","Square","squaredDifference","squaredDifferenceConfig","SquaredDifference","stepConfig","Step","StridedSliceProgram","newCoords","outputAxis","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","stringNGramsConfig","StringNGrams","$data","$dataSplits","sub","cpuSub","subConfig","Sub","tan","tanConfig","Tan","tanh","tanhConfig","Tanh","tensorScatterUpdateConfig","TensorScatterUpdate","flattenTensor","SwapProgram","MergeProgram","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topKConfig","TopK","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","uniformDataSwap","prevIndices","len","mergeProgram","uniformDataMerge","prevValues","TransformProgram","transformConfig","Transform","transforms","interpolation","fillMode","imageHeight","imageWidth","interpolationModeId","fillModeId","unpackConfig","Unpack","UnsortedSegmentSumProgram","kernelConfigs","UnsortedSegmentSum","numSegments","a2D","segResult","kernelConfig","registerKernel"],"mappings":"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S/E,KAAKkF,sCAM7C,ECYI,MCsGD2kE,GAAgC,CACpC99C,GACAghB,GACAG,GACAG,GACAI,GACAM,GACAuC,GACAE,GACAK,GACAK,GACAI,GACAG,GACAG,GACAG,GACAG,GACAiC,GACAM,GACAW,GACAQ,GACAE,GACAe,GACAoB,GACAK,GACAiB,GACAY,GACAI,GACAltB,GACA0tB,GACA6B,GACAwC,GACAa,GACAI,GACAG,GACAI,GACAE,GACAG,GACAG,GACAmB,GACAwB,GACAE,GACAG,GACAS,GACAmB,GACAE,GACAP,GACAU,GACAI,GACAK,GACAE,GACAK,GACAiB,GACAqB,GACAE,GACAI,GACAG,GACAE,GACAG,GACAE,GACAW,GACAhiC,GACAoiC,GACAU,GACAR,GACAG,GACAkC,GACAO,GACAE,GACAM,GACAsB,GACAI,GACAI,GACA/jC,GACAikC,GACAzV,GACA4V,GACAG,GACAE,GACAE,GACAI,GACAI,GACAG,GACAK,GACAH,GACAM,GACAG,GACAG,GACAQ,GACAK,GACAjhB,GACAqhB,GACAE,GACAY,GACAV,GACAK,GACAU,GACAtiB,GACA0iB,GACAI,GACAU,GACAG,GACAW,GACApP,GACA0P,GACAE,GACAW,GACAvf,GACAkgB,GACAO,GACAG,GACAO,GACAI,GACAE,GACAE,GACAC,GACA1hB,GACA6hB,GACAG,GACAG,GACAG,GACA3xC,GACAgyC,GACAM,GACAa,GACAG,GACAG,GACAQ,GACAW,GACAG,GACAa,GACAK,GACAS,GACAG,GACAG,GACAE,GACAE,GACAG,GACA5qB,GACA4uB,GACAK,GACAe,GACAtP,GACAqK,GACAM,GACAsB,GACAE,GACAQ,GACAU,GACAM,GACAE,GACAG,GACA4B,GACA5e,GACA+e,GACAG,GACAE,GACA3D,GACAmE,GACAgB,GACAt6B,GACA+6B,GDtQoD,CACpDngD,WAAYugD,EAAkBA,mBAC9BrgD,YAAa,SACbC,WAzDI,SAA6BV,GAKjC,MAAMhf,OAACA,EAAMif,QAAEA,EAAOC,MAAEA,GAASF,GAC3B9hB,EAACA,EAACg/B,WAAEA,GAAcl8B,GAClB+/D,YAACA,GAAe7gD,EAEhBuf,EAAQvhC,EAAEzC,MAAM5C,OAEhB2tC,EAAY,GAElB,IAAI7G,EAAO,EACX,MAAM6a,EAAc/4C,EAAAA,aAAamlC,mBAAmB,CAACjH,GAAOF,GAC5D,IAAIgb,EAAYv8C,EACG,MAAfs8C,IACFC,EAAYz8B,GAAU,CAAChd,OAAQ,CAAC9C,KAAI+hB,UAASC,MAAO,CAACsf,KAAMgb,KAC3DhU,EAAUxtC,KAAKyhD,GACf9a,EAAOl+B,EAAYA,aAAColC,iBAAiB,EAAGpH,GAAO,IAGjD,MAAMpgC,EAAWoC,EAAYA,aAAColD,aAAa1U,gBACvCsI,EAAUh/C,MAAOkkC,EAAMohC,GACrB/6B,EAAS1kC,EAAIA,KAAC+N,cAAc,CAACorC,EAAUh/C,MAAMkkC,KAC7CqhC,EACFrgD,GAAQ,CAAC3f,OAAQ,CAAC9C,EAAGu8C,GAAYx6B,UAASC,MAAO,CAACzkB,MAAO,EAAE,EAAGuqC,MAClEQ,EAAUxtC,KAAKgoE,GAEf,MAAM3jE,EAAQa,EAAEb,MACV5B,EAAQ,CAACulE,EAAIvlE,MAAM,GAAIslE,GACvBxkE,EAASwjB,GAAK,CAACE,UAASC,MAAO,CAACzkB,QAAO6S,MAAO,EAAGjR,WACjDhB,EAAU,IAAIukE,GAA0BI,EAAIvlE,MAAOA,EAAO4B,GAC1DgjB,EAAc,CAClB,CAACnkB,KAAM,QAASmQ,KAAM,CAAC00D,IACvB,CAAC7kE,KAAM,QAASmQ,KAAM,CAAC/K,EAAIA,KAAC+N,cAAc2xD,EAAIvlE,UAE1CwlE,EAAYhhD,EAAQ1N,iBACtBlW,EAAS,CAAC2kE,EAAK9jC,GAAa7/B,EAAOgjB,EAAa9jB,GAE9C0xC,EACFttB,GAAQ,CAAC3f,OAAQ,CAAC9C,EAAG+iE,GAAYhhD,UAASC,MAAO,CAACzkB,MAAO4D,KAC7DmnC,EAAUxtC,KAAKioE,GACf,IAAI36C,EAAS2nB,EACb,GAAmB,MAAfuM,EAAqB,CACvBhU,EAAUxtC,KAAKi1C,GACf,MAAMzO,EAAO/9B,EAAAA,aAAaq5C,uBAAuBN,GACjDl0B,EAAStI,GAAU,CAAChd,OAAQ,CAAC9C,EAAGooB,GAASrG,UAASC,MAAO,CAACsf,SAC3D,CAGD,OADAgH,EAAU9sC,SAAQoM,GAAKma,EAAQlX,YAAYjD,EAAEkD,UACtCsd,CACT,GC0QEoqC,IAGF,IAAK,MAAMwQ,KAAgBL,GACzBM,EAAcA,eAACD"}